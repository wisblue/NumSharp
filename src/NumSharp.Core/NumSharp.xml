<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NumSharp</name>
    </assembly>
    <members>
        <member name="T:NumSharp.np">
            <summary>
            API bridge between NumSharp and Python NumPy
            </summary>
        </member>
        <member name="M:NumSharp.np.roll(NumSharp.NDArray,System.Int32,System.Int32)">
            <summary>
            Roll array elements along a given axis.
            
            Elements that roll beyond the last position are re-introduced at the first.
            </summary>
        </member>
        <member name="F:NumSharp.np.newaxis">
            <summary>
                A convenient alias for None, useful for indexing arrays.
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy-1.17.0/reference/arrays.indexing.html<br></br><br></br>https://stackoverflow.com/questions/42190783/what-does-three-dots-in-python-mean-when-indexing-what-looks-like-a-number</remarks>
        </member>
        <member name="M:NumSharp.np.cumsum(NumSharp.NDArray,System.Nullable{System.Int32},System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Return the cumulative sum of the elements along a given axis.
            </summary>
            <param name="arr">Input array.</param>
            <param name="axis">Axis along which the cumulative sum is computed. The default (None) is to compute the cumsum over the flattened array.</param>
            <param name="typeCode">Type of the returned array and of the accumulator in which the elements are summed. If dtype is not specified, it defaults to the dtype of a, unless a has an integer dtype with a precision less than that of the default platform integer. In that case, the default platform integer is used.</param>
            <returns>A new array holding the result is returned unless out is specified, in which case a reference to out is returned. The result has the same size as a, and the same shape as a if axis is not None or a is a 1-d array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.cumsum.html</remarks>
        </member>
        <member name="M:NumSharp.np.fromfile(System.String,NumSharp.NPTypeCode)">
            <summary>
                Construct an array from data in a text or binary file.
                A highly efficient way of reading binary data with a known data-type, as well as parsing simply formatted text files. Data written using the tofile method can be read using this function.
            </summary>
            <param name="file">filename.</param>
            <param name="dtype">Data type of the returned array. For binary files, it is used to determine the size and byte-order of the items in the file.</param>
            <returns></returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromfile.html</remarks>
        </member>
        <member name="M:NumSharp.np.fromfile(System.String,System.Type)">
            <summary>
                Construct an array from data in a text or binary file.
                A highly efficient way of reading binary data with a known data-type, as well as parsing simply formatted text files. Data written using the tofile method can be read using this function.
            </summary>
            <param name="file">filename.</param>
            <param name="dtype">Data type of the returned array. For binary files, it is used to determine the size and byte-order of the items in the file.</param>
            <returns></returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromfile.html</remarks>
        </member>
        <member name="M:NumSharp.np.size(NumSharp.NDArray,System.Nullable{System.Int32})">
            <summary>
                Return the number of elements along a given axis.
            </summary>
            <param name="a">Input data.</param>
            <param name="axis">Axis along which the elements are counted. By default, give the total number of elements.</param>
            <returns>Number of elements along the specified axis.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.size.html</remarks>
        </member>
        <member name="M:NumSharp.np.arange(System.Single)">
            <summary>
            Return evenly spaced values within a given interval.
            
            Values are generated within the half-open interval [start, stop)
            (in other words, the interval including start but excluding stop).
            For integer arguments the function is equivalent to the Python built-in
            range function, but returns an ndarray rather than a list.
            
            When using a non-integer step, such as 0.1, the results will often not
            be consistent.  It is better to use numpy.linspace for these cases.
            </summary>
            <param name="stop">
            End of interval.  The interval does not include this value, except
            in some cases where step is not an integer and floating point
            round-off affects the length of out.
            </param>
            <returns>
            Array of evenly spaced values.
            
            For floating point arguments, the length of the result is
            ceil((stop - start)/step).  Because of floating point overflow,
            this rule may result in the last element of out being greater
            than stop.
            </returns>
        </member>
        <member name="M:NumSharp.np.arange(System.Double)">
            <summary>
            Return evenly spaced values within a given interval.
            
            Values are generated within the half-open interval [start, stop)
            (in other words, the interval including start but excluding stop).
            For integer arguments the function is equivalent to the Python built-in
            range function, but returns an ndarray rather than a list.
            
            When using a non-integer step, such as 0.1, the results will often not
            be consistent.  It is better to use numpy.linspace for these cases.
            </summary>
            <param name="stop">
            End of interval.  The interval does not include this value, except
            in some cases where step is not an integer and floating point
            round-off affects the length of out.
            </param>
            <returns>
            Array of evenly spaced values.
            
            For floating point arguments, the length of the result is
            ceil((stop - start)/step).  Because of floating point overflow,
            this rule may result in the last element of out being greater
            than stop.
            </returns>
        </member>
        <member name="M:NumSharp.np.arange(System.Single,System.Single,System.Single)">
            <summary>
            Return evenly spaced values within a given interval.
            
            Values are generated within the half-open interval [start, stop)
            (in other words, the interval including start but excluding stop).
            For integer arguments the function is equivalent to the Python built-in
            range function, but returns an ndarray rather than a list.
            
            When using a non-integer step, such as 0.1, the results will often not
            be consistent.  It is better to use numpy.linspace for these cases.
            </summary>
            <param name="start">
            Start of interval.  The interval includes this value.  The default
            start value is 0.
            </param>
            <param name="stop">
            End of interval.  The interval does not include this value, except
            in some cases where step is not an integer and floating point
            round-off affects the length of out.
            </param>
            <param name="step">
            Spacing between values.  For any output out, this is the distance
            between two adjacent values, out[i+1] - out[i].  The default
            step size is 1.  If step is specified as a position argument,
            start must also be given.
            </param>
            <returns>
            Array of evenly spaced values.
            
            For floating point arguments, the length of the result is
            ceil((stop - start)/step).  Because of floating point overflow,
            this rule may result in the last element of out being greater
            than stop.
            </returns>
        </member>
        <member name="M:NumSharp.np.arange(System.Double,System.Double,System.Double)">
            <summary>
            Return evenly spaced values within a given interval.
            
            Values are generated within the half-open interval [start, stop)
            (in other words, the interval including start but excluding stop).
            For integer arguments the function is equivalent to the Python built-in
            range function, but returns an ndarray rather than a list.
            
            When using a non-integer step, such as 0.1, the results will often not
            be consistent.  It is better to use numpy.linspace for these cases.
            </summary>
            <param name="start">
            Start of interval.  The interval includes this value.  The default
            start value is 0.
            </param>
            <param name="stop">
            End of interval.  The interval does not include this value, except
            in some cases where step is not an integer and floating point
            round-off affects the length of out.
            </param>
            <param name="step">
            Spacing between values.  For any output out, this is the distance
            between two adjacent values, out[i+1] - out[i].  The default
            step size is 1.  If step is specified as a position argument,
            start must also be given.
            </param>
            <returns>
            Array of evenly spaced values.
            
            For floating point arguments, the length of the result is
            ceil((stop - start)/step).  Because of floating point overflow,
            this rule may result in the last element of out being greater
            than stop.
            </returns>
        </member>
        <member name="M:NumSharp.np.arange(System.Int32)">
            <summary>
            Return evenly spaced values within a given interval.
            
            Values are generated within the half-open interval [start, stop)
            (in other words, the interval including start but excluding stop).
            For integer arguments the function is equivalent to the Python built-in
            range function, but returns an ndarray rather than a list.
            
            When using a non-integer step, such as 0.1, the results will often not
            be consistent.  It is better to use numpy.linspace for these cases.
            </summary>
            <param name="stop">
            End of interval.  The interval does not include this value, except
            in some cases where step is not an integer and floating point
            round-off affects the length of out.
            </param>
            <returns>
            Array of evenly spaced values.
            
            For floating point arguments, the length of the result is
            ceil((stop - start)/step).  Because of floating point overflow,
            this rule may result in the last element of out being greater
            than stop.
            </returns>
        </member>
        <member name="M:NumSharp.np.arange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return evenly spaced values within a given interval.
            
            Values are generated within the half-open interval [start, stop)
            (in other words, the interval including start but excluding stop).
            For integer arguments the function is equivalent to the Python built-in
            range function, but returns an ndarray rather than a list.
            
            When using a non-integer step, such as 0.1, the results will often not
            be consistent.  It is better to use numpy.linspace for these cases.
            </summary>
            <param name="start">
            Start of interval.  The interval includes this value.  The default
            start value is 0.
            </param>
            <param name="stop">
            End of interval.  The interval does not include this value, except
            in some cases where step is not an integer and floating point
            round-off affects the length of out.
            </param>
            <param name="step">
            Spacing between values.  For any output out, this is the distance
            between two adjacent values, out[i+1] - out[i].  The default
            step size is 1.  If step is specified as a position argument,
            start must also be given.
            </param>
            <returns>
            Array of evenly spaced values.
            
            For floating point arguments, the length of the result is
            ceil((stop - start)/step).  Because of floating point overflow,
            this rule may result in the last element of out being greater
            than stop.
            </returns>
        </member>
        <member name="M:NumSharp.np.are_broadcastable(NumSharp.NDArray[])">
            <summary>
                Tests if these two two arrays are broadcastable against each other.
            </summary>
            <param name="ndArrays">The arrays to test for broadcasting.</param>
            <returns>True if these can be broadcasted against each other.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_arrays.html</remarks>
        </member>
        <member name="M:NumSharp.np.are_broadcastable(NumSharp.Shape[])">
            <summary>
                Tests if these two two arrays are broadcastable against each other.
            </summary>
            <param name="shapes">The shapes to test for broadcasting.</param>
            <returns>True if these can be broadcasted against each other.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_arrays.html</remarks>
        </member>
        <member name="M:NumSharp.np.are_broadcastable(System.Int32[][])">
            <summary>
                Tests if these two two arrays are broadcastable against each other.
            </summary>
            <param name="shapes">The shapes to test for broadcasting.</param>
            <returns>True if these can be broadcasted against each other.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_arrays.html</remarks>
        </member>
        <member name="M:NumSharp.np.are_broadcastable(NumSharp.NDArray,NumSharp.NDArray)">
            <summary>
                Tests if these two two arrays are broadcastable against each other.
            </summary>
            <param name="lhs">An array to test for broadcasting.</param>
            <param name="rhs">An array to test for broadcasting.</param>
            <returns>True if these can be broadcasted against each other.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_arrays.html</remarks>
        </member>
        <member name="M:NumSharp.np.array(NumSharp.NDArray,System.Boolean)">
            <summary>
                Wraps given <paramref name="nd"/> in an alias. If <paramref name="copy"/> is true then returns a clone.
            </summary>
            <param name="nd"></param>
            <param name="copy">If <paramref name="copy"/> is true then returns a clone.</param>
        </member>
        <member name="M:NumSharp.np.array(System.Array,System.Type,System.Int32,System.Boolean,System.Char)">
            <summary>
                Creates an <see cref="T:NumSharp.NDArray"/> from an array with an unknown size or dtype.
            </summary>
            <param name="array"></param>
            <param name="dtype"></param>
            <param name="ndmin">Specifies the minimum number of dimensions that the resulting array should have. Ones will be pre-pended to the shape as needed to meet this requirement.</param>
            <param name="copy">Always copies if the array is larger than 1-d.</param>
            <param name="order">Not used.</param>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html</remarks>
        </member>
        <member name="M:NumSharp.np.array``1(``0[])">
            <summary>
                Creates a Vector <see cref="T:NumSharp.NDArray"/> from given <paramref name="data"/>.
            </summary>
            <typeparam name="T">The type of given array, must be compliant to numpy's supported dtypes.</typeparam>
            <param name="data">The array to create <see cref="T:NumSharp.NDArray"/> from.</param>
            <returns>An <see cref="T:NumSharp.NDArray"/> with the data and shape of the given array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html <br></br>Always performs a copy.</remarks>
        </member>
        <member name="M:NumSharp.np.array``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Creates a Vector <see cref="T:NumSharp.NDArray"/> from given <paramref name="data"/>.
            </summary>
            <typeparam name="T">The type of given array, must be compliant to numpy's supported dtypes.</typeparam>
            <param name="data">The enumeration of data to create <see cref="T:NumSharp.NDArray"/> from.</param>
            <returns>An <see cref="T:NumSharp.NDArray"/> with the data and shape of the given array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html <br></br>Always performs a copy.</remarks>
        </member>
        <member name="M:NumSharp.np.array``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Creates a Vector <see cref="T:NumSharp.NDArray"/> from given <paramref name="data"/>.
            </summary>
            <typeparam name="T">The type of given array, must be compliant to numpy's supported dtypes.</typeparam>
            <param name="data">The enumeration of data to create <see cref="T:NumSharp.NDArray"/> from.</param>
            <param name="size"></param>
            <returns>An <see cref="T:NumSharp.NDArray"/> with the data and shape of the given array.</returns>
            <remarks>
                https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html <br></br>
                Always performs a copy.<br></br>
                <paramref name="size"/> can be used to limit the amount of items to read form <paramref name="data"/>. Reading stops on either size or <paramref name="data"/> ends.
            </remarks>
        </member>
        <member name="M:NumSharp.np.array(System.String)">
            <summary>
                Create a vector <see cref="T:NumSharp.NDArray"/> of dtype <see cref="T:System.Char"/>.
            </summary>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.np.array``1(``0[][])">
            <summary>
                Creates an <see cref="T:NumSharp.NDArray"/> from given <paramref name="data"/>.
            </summary>
            <typeparam name="T">The type of given array, must be compliant to numpy's supported dtypes.</typeparam>
            <param name="data">The array to create <see cref="T:NumSharp.NDArray"/> from. Shape is taken from the first item of each array/nested array.</param>
            <returns>An <see cref="T:NumSharp.NDArray"/> with the data and shape of the given array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html <br></br>Always performs a copy.</remarks>
        </member>
        <member name="M:NumSharp.np.array``1(``0[][][])">
            <summary>
                Creates an <see cref="T:NumSharp.NDArray"/> from given <paramref name="data"/>.
            </summary>
            <typeparam name="T">The type of given array, must be compliant to numpy's supported dtypes.</typeparam>
            <param name="data">The array to create <see cref="T:NumSharp.NDArray"/> from. Shape is taken from the first item of each array/nested array.</param>
            <returns>An <see cref="T:NumSharp.NDArray"/> with the data and shape of the given array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html <br></br>Always performs a copy.</remarks>
        </member>
        <member name="M:NumSharp.np.array``1(``0[][][][])">
            <summary>
                Creates an <see cref="T:NumSharp.NDArray"/> from given <paramref name="data"/>.
            </summary>
            <typeparam name="T">The type of given array, must be compliant to numpy's supported dtypes.</typeparam>
            <param name="data">The array to create <see cref="T:NumSharp.NDArray"/> from. Shape is taken from the first item of each array/nested array.</param>
            <returns>An <see cref="T:NumSharp.NDArray"/> with the data and shape of the given array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html <br></br>Always performs a copy.</remarks>
        </member>
        <member name="M:NumSharp.np.array``1(``0[][][][][])">
            <summary>
                Creates an <see cref="T:NumSharp.NDArray"/> from given <paramref name="data"/>.
            </summary>
            <typeparam name="T">The type of given array, must be compliant to numpy's supported dtypes.</typeparam>
            <param name="data">The array to create <see cref="T:NumSharp.NDArray"/> from. Shape is taken from the first item of each array/nested array.</param>
            <returns>An <see cref="T:NumSharp.NDArray"/> with the data and shape of the given array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html <br></br>Always performs a copy.</remarks>
        </member>
        <member name="M:NumSharp.np.array``1(``0[],System.Boolean)">
            <summary>
                Creates an <see cref="T:NumSharp.NDArray"/> from given <paramref name="data"/>.
            </summary>
            <typeparam name="T">The type of given array, must be compliant to numpy's supported dtypes.</typeparam>
            <param name="data">The array to create <see cref="T:NumSharp.NDArray"/> from.</param>
            <param name="copy">
                If true then the array will be copied to a newly allocated memory.<br></br>
                If false then the array will be pinned by calling <see cref="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)"/>.
            </param>
            <returns>An <see cref="T:NumSharp.NDArray"/> with the data and shape of the given array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html</remarks>
        </member>
        <member name="M:NumSharp.np.array``1(``0[0:,0:],System.Boolean)">
            <summary>
                Creates an <see cref="T:NumSharp.NDArray"/> from given <paramref name="data"/>.
            </summary>
            <typeparam name="T">The type of given array, must be compliant to numpy's supported dtypes.</typeparam>
            <param name="data">The array to create <see cref="T:NumSharp.NDArray"/> from.</param>
            <param name="copy">
                If true then the array will be copied to a newly allocated memory.<br></br>
                If false then the array will be pinned by calling <see cref="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)"/>.
            </param>
            <returns>An <see cref="T:NumSharp.NDArray"/> with the data and shape of the given array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html</remarks>
        </member>
        <member name="M:NumSharp.np.array``1(``0[0:,0:,0:],System.Boolean)">
            <summary>
                Creates an <see cref="T:NumSharp.NDArray"/> from given <paramref name="data"/>.
            </summary>
            <typeparam name="T">The type of given array, must be compliant to numpy's supported dtypes.</typeparam>
            <param name="data">The array to create <see cref="T:NumSharp.NDArray"/> from.</param>
            <param name="copy">
                If true then the array will be copied to a newly allocated memory.<br></br>
                If false then the array will be pinned by calling <see cref="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)"/>.
            </param>
            <returns>An <see cref="T:NumSharp.NDArray"/> with the data and shape of the given array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html</remarks>
        </member>
        <member name="M:NumSharp.np.array``1(``0[0:,0:,0:,0:],System.Boolean)">
            <summary>
                Creates an <see cref="T:NumSharp.NDArray"/> from given <paramref name="data"/>.
            </summary>
            <typeparam name="T">The type of given array, must be compliant to numpy's supported dtypes.</typeparam>
            <param name="data">The array to create <see cref="T:NumSharp.NDArray"/> from.</param>
            <param name="copy">
                If true then the array will be copied to a newly allocated memory.<br></br>
                If false then the array will be pinned by calling <see cref="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)"/>.
            </param>
            <returns>An <see cref="T:NumSharp.NDArray"/> with the data and shape of the given array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html</remarks>
        </member>
        <member name="M:NumSharp.np.array``1(``0[0:,0:,0:,0:,0:],System.Boolean)">
            <summary>
                Creates an <see cref="T:NumSharp.NDArray"/> from given <paramref name="data"/>.
            </summary>
            <typeparam name="T">The type of given array, must be compliant to numpy's supported dtypes.</typeparam>
            <param name="data">The array to create <see cref="T:NumSharp.NDArray"/> from.</param>
            <param name="copy">
                If true then the array will be copied to a newly allocated memory.<br></br>
                If false then the array will be pinned by calling <see cref="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)"/>.
            </param>
            <returns>An <see cref="T:NumSharp.NDArray"/> with the data and shape of the given array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html</remarks>
        </member>
        <member name="M:NumSharp.np.array``1(``0[0:,0:,0:,0:,0:,0:],System.Boolean)">
            <summary>
                Creates an <see cref="T:NumSharp.NDArray"/> from given <paramref name="data"/>.
            </summary>
            <typeparam name="T">The type of given array, must be compliant to numpy's supported dtypes.</typeparam>
            <param name="data">The array to create <see cref="T:NumSharp.NDArray"/> from.</param>
            <param name="copy">
                If true then the array will be copied to a newly allocated memory.<br></br>
                If false then the array will be pinned by calling <see cref="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)"/>.
            </param>
            <returns>An <see cref="T:NumSharp.NDArray"/> with the data and shape of the given array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html</remarks>
        </member>
        <member name="M:NumSharp.np.array``1(``0[0:,0:,0:,0:,0:,0:,0:],System.Boolean)">
            <summary>
                Creates an <see cref="T:NumSharp.NDArray"/> from given <paramref name="data"/>.
            </summary>
            <typeparam name="T">The type of given array, must be compliant to numpy's supported dtypes.</typeparam>
            <param name="data">The array to create <see cref="T:NumSharp.NDArray"/> from.</param>
            <param name="copy">
                If true then the array will be copied to a newly allocated memory.<br></br>
                If false then the array will be pinned by calling <see cref="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)"/>.
            </param>
            <returns>An <see cref="T:NumSharp.NDArray"/> with the data and shape of the given array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html</remarks>
        </member>
        <member name="M:NumSharp.np.array``1(``0[0:,0:,0:,0:,0:,0:,0:,0:],System.Boolean)">
            <summary>
                Creates an <see cref="T:NumSharp.NDArray"/> from given <paramref name="data"/>.
            </summary>
            <typeparam name="T">The type of given array, must be compliant to numpy's supported dtypes.</typeparam>
            <param name="data">The array to create <see cref="T:NumSharp.NDArray"/> from.</param>
            <param name="copy">
                If true then the array will be copied to a newly allocated memory.<br></br>
                If false then the array will be pinned by calling <see cref="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)"/>.
            </param>
            <returns>An <see cref="T:NumSharp.NDArray"/> with the data and shape of the given array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html</remarks>
        </member>
        <member name="M:NumSharp.np.array(System.String[])">
            <summary>
                Create a vector ndarray of type <see cref="T:System.String"/>.
            Encode string array.
            format: [numOfRow lenOfRow1 lenOfRow2 contents]
            sample: [2 2 4 aacccc]
            </summary>
            <param name="strArray"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.np.asanyarray(System.Object@,System.Type)">
            <summary>
                Convert the input to an ndarray, but pass ndarray subclasses through.
            </summary>
            <param name="a">Input data, in any form that can be converted to an array. This includes scalars, lists, lists of tuples, tuples, tuples of tuples, tuples of lists, and ndarrays.</param>
            <param name="dtype">By default, the data-type is inferred from the input data.</param>
            <returns>Array interpretation of a. If a is an ndarray or a subclass of ndarray, it is returned as-is and no copy is performed.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.asanyarray.html</remarks>
        </member>
        <member name="M:NumSharp.np.broadcast(NumSharp.NDArray,NumSharp.NDArray)">
            <summary>
                Produce an object that mimics broadcasting.
            </summary>
            <returns>Broadcast the input parameters against one another, and return an object that encapsulates the result. Amongst others, it has shape and nd properties, and may be used as an iterator.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast.html</remarks>
        </member>
        <member name="M:NumSharp.np.broadcast_arrays(NumSharp.NDArray[])">
            <summary>
                Broadcast any number of arrays against each other.
            </summary>
            <param name="ndArrays">The arrays to broadcast.</param>
            <returns>These arrays are views on the original arrays. They are typically not contiguous. Furthermore, more than one element of a broadcasted array may refer to a single memory location. If you need to write to the arrays, make copies first.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_arrays.html</remarks>
        </member>
        <member name="M:NumSharp.np.broadcast_arrays(NumSharp.NDArray,NumSharp.NDArray)">
            <summary>
                Broadcast two arrays against each other.
            </summary>
            <param name="lhs">An array to broadcast.</param>
            <param name="rhs">An array to broadcast.</param>
            <returns>These arrays are views on the original arrays. They are typically not contiguous. Furthermore, more than one element of a broadcasted array may refer to a single memory location. If you need to write to the arrays, make copies first.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_arrays.html</remarks>
        </member>
        <member name="M:NumSharp.np.broadcast_to(NumSharp.Shape,NumSharp.Shape)">
            <summary>
                Broadcast an shape against an other new shape.
            </summary>
            <param name="from">The shape that is to be broadcasted</param>
            <param name="against">The shape that'll be used to broadcast <paramref name="from"/> shape</param>
            <returns>A readonly view on the original array with the given shape. It is typically not contiguous. Furthermore, more than one element of a broadcasted array may refer to a single memory location.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_to.html</remarks>
        </member>
        <member name="M:NumSharp.np.broadcast_to(NumSharp.Backends.UnmanagedStorage,NumSharp.Shape)">
            <summary>
                Broadcast an array to a new shape.
            </summary>
            <param name="from">The NDArray to broadcast.</param>
            <param name="against">The shape to broadcast against.</param>
            <returns>These arrays are views on the original arrays. They are typically not contiguous. Furthermore, more than one element of a broadcasted array may refer to a single memory location. If you need to write to the arrays, make copies first.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_to.html</remarks>
        </member>
        <member name="M:NumSharp.np.broadcast_to(NumSharp.NDArray,NumSharp.Shape)">
            <summary>
                Broadcast an array to a new shape.
            </summary>
            <param name="from">The NDArray to broadcast.</param>
            <param name="against">The shape to broadcast against.</param>
            <returns>These arrays are views on the original arrays. They are typically not contiguous. Furthermore, more than one element of a broadcasted array may refer to a single memory location. If you need to write to the arrays, make copies first.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_to.html</remarks>
        </member>
        <member name="M:NumSharp.np.broadcast_to(NumSharp.Shape,NumSharp.NDArray)">
            <summary>
                Broadcast an shape against an other new shape.
            </summary>
            <param name="from">The shape that is to be broadcasted</param>
            <param name="against">The shape that'll be used to broadcast <paramref name="from"/> shape</param>
            <returns>A readonly view on the original array with the given shape. It is typically not contiguous. Furthermore, more than one element of a broadcasted array may refer to a single memory location.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_to.html</remarks>
        </member>
        <member name="M:NumSharp.np.broadcast_to(NumSharp.Backends.UnmanagedStorage,NumSharp.NDArray)">
            <summary>
                Broadcast an array to a new shape.
            </summary>
            <param name="from">The UnmanagedStorage to broadcast.</param>
            <param name="against">The shape to broadcast against.</param>
            <returns>These arrays are views on the original arrays. They are typically not contiguous. Furthermore, more than one element of a broadcasted array may refer to a single memory location. If you need to write to the arrays, make copies first.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_to.html</remarks>
        </member>
        <member name="M:NumSharp.np.broadcast_to(NumSharp.NDArray,NumSharp.NDArray)">
            <summary>
                Broadcast an array to a new shape.
            </summary>
            <param name="from">The NDArray to broadcast.</param>
            <param name="against">The shape to broadcast against.</param>
            <returns>These arrays are views on the original arrays. They are typically not contiguous. Furthermore, more than one element of a broadcasted array may refer to a single memory location. If you need to write to the arrays, make copies first.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_to.html</remarks>
        </member>
        <member name="M:NumSharp.np.broadcast_to(NumSharp.Shape,NumSharp.Backends.UnmanagedStorage)">
            <summary>
                Broadcast an shape against an other new shape.
            </summary>
            <param name="from">The shape that is to be broadcasted</param>
            <param name="against">The shape that'll be used to broadcast <paramref name="from"/> shape</param>
            <returns>A readonly view on the original array with the given shape. It is typically not contiguous. Furthermore, more than one element of a broadcasted array may refer to a single memory location.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_to.html</remarks>
        </member>
        <member name="M:NumSharp.np.broadcast_to(NumSharp.Backends.UnmanagedStorage,NumSharp.Backends.UnmanagedStorage)">
            <summary>
                Broadcast an array to a new shape.
            </summary>
            <param name="from">The UnmanagedStorage to broadcast.</param>
            <param name="against">The shape to broadcast against.</param>
            <returns>These arrays are views on the original arrays. They are typically not contiguous. Furthermore, more than one element of a broadcasted array may refer to a single memory location. If you need to write to the arrays, make copies first.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_to.html</remarks>
        </member>
        <member name="M:NumSharp.np.broadcast_to(NumSharp.NDArray,NumSharp.Backends.UnmanagedStorage)">
            <summary>
                Broadcast an array to a new shape.
            </summary>
            <param name="from">The NDArray to broadcast.</param>
            <param name="against">The shape to broadcast against.</param>
            <returns>These arrays are views on the original arrays. They are typically not contiguous. Furthermore, more than one element of a broadcasted array may refer to a single memory location. If you need to write to the arrays, make copies first.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.broadcast_to.html</remarks>
        </member>
        <member name="M:NumSharp.np.concatenate(NumSharp.NDArray[],System.Int32)">
            <summary>
                Join a sequence of arrays along an existing axis.
            </summary>
            <param name="axis">The axis along which the arrays will be joined. If axis is None, arrays are flattened before use. Default is 0.</param>
            <param name="arrays">The arrays must have the same shape, except in the dimension corresponding to axis (the first, by default).</param>
            <returns>The concatenated array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html</remarks>
        </member>
        <member name="M:NumSharp.np.concatenate(System.ValueTuple{NumSharp.NDArray,NumSharp.NDArray},System.Int32)">
            <summary>
                Join a sequence of arrays along an existing axis.
            </summary>
            <param name="axis">The axis along which the arrays will be joined. If axis is None, arrays are flattened before use. Default is 0.</param>
            <param name="arrays">The arrays must have the same shape, except in the dimension corresponding to axis (the first, by default).</param>
            <returns>The concatenated array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html</remarks>
        </member>
        <member name="M:NumSharp.np.concatenate(System.ValueTuple{NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray},System.Int32)">
            <summary>
                Join a sequence of arrays along an existing axis.
            </summary>
            <param name="axis">The axis along which the arrays will be joined. If axis is None, arrays are flattened before use. Default is 0.</param>
            <param name="arrays">The arrays must have the same shape, except in the dimension corresponding to axis (the first, by default).</param>
            <returns>The concatenated array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html</remarks>
        </member>
        <member name="M:NumSharp.np.concatenate(System.ValueTuple{NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray},System.Int32)">
            <summary>
                Join a sequence of arrays along an existing axis.
            </summary>
            <param name="axis">The axis along which the arrays will be joined. If axis is None, arrays are flattened before use. Default is 0.</param>
            <param name="arrays">The arrays must have the same shape, except in the dimension corresponding to axis (the first, by default).</param>
            <returns>The concatenated array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html</remarks>
        </member>
        <member name="M:NumSharp.np.concatenate(System.ValueTuple{NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray},System.Int32)">
            <summary>
                Join a sequence of arrays along an existing axis.
            </summary>
            <param name="axis">The axis along which the arrays will be joined. If axis is None, arrays are flattened before use. Default is 0.</param>
            <param name="arrays">The arrays must have the same shape, except in the dimension corresponding to axis (the first, by default).</param>
            <returns>The concatenated array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html</remarks>
        </member>
        <member name="M:NumSharp.np.concatenate(System.ValueTuple{NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray},System.Int32)">
            <summary>
                Join a sequence of arrays along an existing axis.
            </summary>
            <param name="axis">The axis along which the arrays will be joined. If axis is None, arrays are flattened before use. Default is 0.</param>
            <param name="arrays">The arrays must have the same shape, except in the dimension corresponding to axis (the first, by default).</param>
            <returns>The concatenated array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html</remarks>
        </member>
        <member name="M:NumSharp.np.concatenate(System.ValueTuple{NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray},System.Int32)">
            <summary>
                Join a sequence of arrays along an existing axis.
            </summary>
            <param name="axis">The axis along which the arrays will be joined. If axis is None, arrays are flattened before use. Default is 0.</param>
            <param name="arrays">The arrays must have the same shape, except in the dimension corresponding to axis (the first, by default).</param>
            <returns>The concatenated array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html</remarks>
        </member>
        <member name="M:NumSharp.np.concatenate(System.ValueTuple{NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,System.ValueTuple{NumSharp.NDArray}},System.Int32)">
            <summary>
                Join a sequence of arrays along an existing axis.
            </summary>
            <param name="axis">The axis along which the arrays will be joined. If axis is None, arrays are flattened before use. Default is 0.</param>
            <param name="arrays">The arrays must have the same shape, except in the dimension corresponding to axis (the first, by default).</param>
            <returns>The concatenated array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html</remarks>
        </member>
        <member name="M:NumSharp.np.concatenate(System.ValueTuple{NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray,System.ValueTuple{NumSharp.NDArray,NumSharp.NDArray}},System.Int32)">
            <summary>
                Join a sequence of arrays along an existing axis.
            </summary>
            <param name="axis">The axis along which the arrays will be joined. If axis is None, arrays are flattened before use. Default is 0.</param>
            <param name="arrays">The arrays must have the same shape, except in the dimension corresponding to axis (the first, by default).</param>
            <returns>The concatenated array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html</remarks>
        </member>
        <member name="M:NumSharp.np.copy(NumSharp.NDArray,System.Char)">
            <summary>
                Return a copy of the array.
            </summary>
            <param name="a">Input data.</param>
            <param name="order"></param>
            <returns>Array interpretation of a.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.copy.html</remarks>
        </member>
        <member name="M:NumSharp.np.dstack(NumSharp.NDArray[])">
            <summary>
                Stack arrays in sequence depth wise (along third axis).
                This is equivalent to concatenation along the third axis after 2-D arrays of shape(M, N) have been reshaped to(M, N,1) and 1-D arrays of shape(N,) have been reshaped to(1, N,1).
                Rebuilds arrays divided by dsplit. 
                This function makes most sense for arrays with up to 3 dimensions.For instance, for pixel-data with a height(first axis), width(second axis), and r/g/b channels(third axis). The functions concatenate, stack and block provide more general stacking and concatenation operations.
            </summary>
            <param name="tup">The arrays must have the same shape along all but the third axis. 1-D or 2-D arrays must have the same shape.</param>
            <returns>The array formed by stacking the given arrays, will be at least 3-D.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.dstack.html</remarks>
        </member>
        <member name="M:NumSharp.np.mintypecode(System.String,System.String,System.Char)">
            <summary>
                Return the character for the minimum-size type to which given types can be safely cast.
                The returned type character must represent the smallest size dtype such that an array of the returned type can handle the data from an array of all types in typechars(or if typechars is an array, then its dtype.char).
            </summary>
            <param name="typechars">every character represents a type. see <see cref="P:NumSharp.DType.char"/></param>
            <param name="typeset">The set of characters that the returned character is chosen from. The default set is ‘GDFgdf’.</param>
            <param name="default">The default character, this is returned if none of the characters in typechars matches a character in typeset.</param>
            <returns>The character representing the minimum-size type that was found.</returns>
        </member>
        <member name="M:NumSharp.np.mintypecode(System.Char[],System.String,System.Char)">
            <summary>
                Return the character for the minimum-size type to which given types can be safely cast.
                The returned type character must represent the smallest size dtype such that an array of the returned type can handle the data from an array of all types in typechars(or if typechars is an array, then its dtype.char).
            </summary>
            <param name="typechars"></param>
            <param name="typeset">The set of characters that the returned character is chosen from. The default set is ‘GDFgdf’.</param>
            <param name="default">The default character, this is returned if none of the characters in typechars matches a character in typeset.</param>
            <returns>The character representing the minimum-size type that was found.</returns>
        </member>
        <member name="M:NumSharp.np.dtype(System.String)">
            <summary>
                Parse a string into a <see cref="T:NumSharp.DType"/>.
            </summary>
            <param name="dtype"></param>
            <returns>A <see cref="T:NumSharp.DType"/> based on <paramref name="dtype"/>, return can be null.</returns>
            <remarks>
                https://docs.scipy.org/doc/numpy-1.16.0/reference/arrays.dtypes.html <br></br>
                This was created to ease the porting of C++ numpy to C#.
            </remarks>
        </member>
        <member name="M:NumSharp.np.empty(System.Int32[])">
            <summary>
                Return a new array of given shape and type, without initializing entries.
            </summary>
            <param name="shapes">Shape of the empty array, e.g., (2, 3) or 2.</param>
            <returns>Array of uninitialized (arbitrary) data of the given shape, dtype, and order. Object arrays will be initialized to None.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.empty.html</remarks>
        </member>
        <member name="M:NumSharp.np.empty``1(System.Int32[])">
            <summary>
                Return a new array of given shape and type, without initializing entries.
            </summary>
            <param name="shapes">Shape of the empty array, e.g., (2, 3) or 2.</param>
            <returns>Array of uninitialized (arbitrary) data of the given shape, dtype, and order. Object arrays will be initialized to None.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.empty.html</remarks>
        </member>
        <member name="M:NumSharp.np.empty(NumSharp.Shape,System.Type)">
            <summary>
                Return a new array of given shape and type, without initializing entries.
            </summary>
            <param name="shape">Shape of the empty array, e.g., (2, 3) or 2.</param>
            <param name="dtype">Desired output data-type for the array, e.g, numpy.int8. Default is numpy.float64.</param>
            <returns>Array of uninitialized (arbitrary) data of the given shape, dtype, and order. Object arrays will be initialized to None.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.empty.html</remarks>
        </member>
        <member name="M:NumSharp.np.empty(NumSharp.Shape,NumSharp.NPTypeCode)">
            <summary>
                Return a new array of given shape and type, without initializing entries.
            </summary>
            <param name="shape">Shape of the empty array, e.g., (2, 3) or 2.</param>
            <param name="typeCode">Desired output data-type for the array, e.g, numpy.int8. Default is numpy.float64.</param>
            <returns>Array of uninitialized (arbitrary) data of the given shape, dtype, and order. Object arrays will be initialized to None.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.empty.html</remarks>
        </member>
        <member name="M:NumSharp.np.empty(NumSharp.Shape)">
            <summary>
                Return a new array of given shape and type, without initializing entries.
            </summary>
            <param name="shape">Shape of the empty array, e.g., (2, 3) or 2.</param>
            <returns>Array of uninitialized (arbitrary) data of the given shape, dtype, and order. Object arrays will be initialized to None.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.empty.html</remarks>
        </member>
        <member name="M:NumSharp.np.empty_like(NumSharp.NDArray,System.Type)">
             <summary>
                Return a new array with the same shape and type as a given array.
             </summary>
            <param name="prototype">The shape and data-type of prototype define these same attributes of the returned array.</param>
             <param name="dtype">Overrides the data type of the result.</param>
             <returns>Array of uninitialized (arbitrary) data with the same shape and type as prototype.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.empty_like.html</remarks>
        </member>
        <member name="M:NumSharp.np.identity(System.Int32,System.Type)">
            <summary>
                Return the identity array. The identity array is a square array with ones on the main diagonal.
            </summary>
            <param name="n">Number of rows (and columns) in n x n output.</param>
            <param name="dtype">Data-type of the output. Defaults to double.</param>
            <returns>n x n array with its main diagonal set to one, and all other elements 0.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.identity.html</remarks>
        </member>
        <member name="M:NumSharp.np.eye(System.Int32,System.Nullable{System.Int32},System.Int32,System.Type)">
            <summary>
                Return a 2-D array with ones on the diagonal and zeros elsewhere.
            </summary>
            <param name="N">Number of rows in the output.</param>
            <param name="M">Number of columns in the output. If None, defaults to N.</param>
            <param name="k">Index of the diagonal: 0 (the default) refers to the main diagonal, a positive value refers to an upper diagonal, and a negative value to a lower diagonal.</param>
            <param name="dtype">Data-type of the returned array.</param>
            <returns>An array where all elements are equal to zero, except for the k-th diagonal, whose values are equal to one.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.eye.html</remarks>
        </member>
        <member name="M:NumSharp.np.full(System.ValueType,System.Int32[])">
            <summary>
                Return a new array of given shape and type, filled with fill_value.
            </summary>
            <param name="fill_value">Fill value.</param>
            <param name="shapes">Shape of the empty array, e.g., (2, 3) or 2.</param>
            <returns>Array of fill_value with the given shape, dtype, and order.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.full.html</remarks>
        </member>
        <member name="M:NumSharp.np.full``1(System.ValueType,System.Int32[])">
            <summary>
                Return a new array of given shape and type, filled with fill_value.
            </summary>
            <param name="fill_value">Fill value.</param>
            <param name="shapes">Shape of the empty array, e.g., (2, 3) or 2.</param>
            <returns>Array of fill_value with the given shape, dtype, and order.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.full.html</remarks>
        </member>
        <member name="M:NumSharp.np.full(System.ValueType,NumSharp.Shape,System.Type)">
            <summary>
                Return a new array of given shape and type, filled with fill_value.
            </summary>
            <param name="fill_value">Fill value.</param>
            <param name="shape">Shape of the empty array, e.g., (2, 3) or 2.</param>
            <param name="dtype">The desired data-type for the array The default, null, means np.array(fill_value).dtype.</param>
            <returns>Array of fill_value with the given shape, dtype, and order.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.full.html</remarks>
        </member>
        <member name="M:NumSharp.np.full(System.ValueType,NumSharp.Shape)">
            <summary>
                Return a new array of given shape and type, filled with fill_value.
            </summary>
            <param name="fill_value">Fill value.</param>
            <param name="shape">Shape of the empty array, e.g., (2, 3) or 2.</param>
            <returns>Array of fill_value with the given shape, dtype, and order.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.full.html</remarks>
        </member>
        <member name="M:NumSharp.np.full(NumSharp.Shape,System.ValueType,System.Type)">
            <summary>
                Return a new array of given shape and type, filled with fill_value.
            </summary>
            <param name="fill_value">Fill value.</param>
            <param name="shape">Shape of the empty array, e.g., (2, 3) or 2.</param>
            <param name="dtype">The desired data-type for the array The default, null, means np.array(fill_value).dtype.</param>
            <returns>Array of fill_value with the given shape, dtype, and order.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.full.html</remarks>
        </member>
        <member name="M:NumSharp.np.full(NumSharp.Shape,System.ValueType,NumSharp.NPTypeCode)">
            <summary>
                Return a new array of given shape and type, filled with fill_value.
            </summary>
            <param name="fill_value">Fill value.</param>
            <param name="shape">Shape of the empty array, e.g., (2, 3) or 2.</param>
            <param name="typeCode">The desired data-type for the array The default, null, means np.array(fill_value).dtype.</param>
            <returns>Array of fill_value with the given shape, dtype, and order.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.full.html</remarks>
        </member>
        <member name="M:NumSharp.np.full(NumSharp.Shape,System.ValueType)">
            <summary>
                Return a new array of given shape and type, filled with fill_value.
            </summary>
            <param name="fill_value">Fill value.</param>
            <param name="shape">Shape of the empty array, e.g., (2, 3) or 2.</param>
            <returns>Array of fill_value with the given shape, dtype, and order.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.full.html</remarks>
        </member>
        <member name="M:NumSharp.np.full(System.ValueType,NumSharp.Shape,NumSharp.NPTypeCode)">
            <summary>
                Return a new array of given shape and type, filled with fill_value.
            </summary>
            <param name="fill_value">Fill value.</param>
            <param name="shape">Shape of the empty array, e.g., (2, 3) or 2.</param>
            <param name="typeCode">The desired data-type for the array The default, null, means np.array(fill_value).dtype.</param>
            <returns>Array of fill_value with the given shape, dtype, and order.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.full.html</remarks>
        </member>
        <member name="M:NumSharp.np.full_like(NumSharp.NDArray,System.Object,System.Type)">
            <summary>
                Return a full array with the same shape and type as a given array.
            </summary>
            <param name="a">The shape and data-type of a define these same attributes of the returned array.</param>
            <param name="fill_value">Fill value.</param>
            <param name="dtype">Overrides the data type of the result.</param>
            <returns>Array of fill_value with the same shape and type as a.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.full_like.html</remarks>
        </member>
        <member name="M:NumSharp.np.hstack(NumSharp.NDArray[])">
            <summary>
                Stack arrays in sequence horizontally (column wise).
                This is equivalent to concatenation along the second axis, except for 1-D arrays where it concatenates along the first axis.Rebuilds arrays divided by hsplit.
                This function makes most sense for arrays with up to 3 dimensions.For instance, for pixel-data with a height(first axis), width(second axis), 
                and r/g/b channels(third axis). The functions concatenate, stack and block provide more general stacking and concatenation operations.
            </summary>
            <param name="tup">The arrays must have the same shape along all but the second axis, except 1-D arrays which can be any length.</param>
            <returns>The array formed by stacking the given arrays.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.hstack.html</remarks>
        </member>
        <member name="M:NumSharp.np.linspace(System.Double,System.Double,System.Int32,System.Boolean,System.Type)">
            <summary>
                Return evenly spaced numbers over a specified interval.<br></br>
                Returns num evenly spaced samples, calculated over the interval[start, stop].<br></br>
                The endpoint of the interval can optionally be excluded.
            </summary>
            <param name="start">The starting value of the sequence.</param>
            <param name="stop">The end value of the sequence, unless endpoint is set to False. In that case, the sequence consists of all but the last of num + 1 evenly spaced samples, so that stop is excluded. Note that the step size changes when endpoint is False.</param>
            <param name="num">Number of samples to generate. Default is 50. Must be non-negative.</param>
            <param name="endpoint">If True, stop is the last sample. Otherwise, it is not included. Default is True.</param>
            <param name="dtype">The type of the output array. If dtype is not given, infer the data type from the other input arguments.</param>
            <remarks>https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.linspace.html</remarks>
        </member>
        <member name="M:NumSharp.np.linspace(System.Single,System.Single,System.Int32,System.Boolean,System.Type)">
            <summary>
                Return evenly spaced numbers over a specified interval.<br></br>
                Returns num evenly spaced samples, calculated over the interval[start, stop].<br></br>
                The endpoint of the interval can optionally be excluded.
            </summary>
            <param name="start">The starting value of the sequence.</param>
            <param name="stop">The end value of the sequence, unless endpoint is set to False. In that case, the sequence consists of all but the last of num + 1 evenly spaced samples, so that stop is excluded. Note that the step size changes when endpoint is False.</param>
            <param name="num">Number of samples to generate. Default is 50. Must be non-negative.</param>
            <param name="endpoint">If True, stop is the last sample. Otherwise, it is not included. Default is True.</param>
            <param name="dtype">The type of the output array. If dtype is not given, infer the data type from the other input arguments.</param>
            <remarks>https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.linspace.html</remarks>
        </member>
        <member name="M:NumSharp.np.linspace(System.Single,System.Single,System.Int32,System.Boolean,NumSharp.NPTypeCode)">
            <summary>
                Return evenly spaced numbers over a specified interval.<br></br>
                Returns num evenly spaced samples, calculated over the interval[start, stop].<br></br>
                The endpoint of the interval can optionally be excluded.
            </summary>
            <param name="start">The starting value of the sequence.</param>
            <param name="stop">The end value of the sequence, unless endpoint is set to False. In that case, the sequence consists of all but the last of num + 1 evenly spaced samples, so that stop is excluded. Note that the step size changes when endpoint is False.</param>
            <param name="num">Number of samples to generate. Default is 50. Must be non-negative.</param>
            <param name="endpoint">If True, stop is the last sample. Otherwise, it is not included. Default is True.</param>
            <param name="typeCode">The type of the output array. If dtype is not given, infer the data type from the other input arguments.</param>
            <remarks>https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.linspace.html</remarks>
        </member>
        <member name="M:NumSharp.np.linspace(System.Double,System.Double,System.Int32,System.Boolean,NumSharp.NPTypeCode)">
            <summary>
                Return evenly spaced numbers over a specified interval.<br></br>
                Returns num evenly spaced samples, calculated over the interval[start, stop].<br></br>
                The endpoint of the interval can optionally be excluded.
            </summary>
            <param name="start">The starting value of the sequence.</param>
            <param name="stop">The end value of the sequence, unless endpoint is set to False. In that case, the sequence consists of all but the last of num + 1 evenly spaced samples, so that stop is excluded. Note that the step size changes when endpoint is False.</param>
            <param name="num">Number of samples to generate. Default is 50. Must be non-negative.</param>
            <param name="endpoint">If True, stop is the last sample. Otherwise, it is not included. Default is True.</param>
            <param name="typeCode">The type of the output array. If dtype is not given, infer the data type from the other input arguments.</param>
            <remarks>https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.linspace.html</remarks>
        </member>
        <member name="M:NumSharp.np.meshgrid(NumSharp.NDArray,NumSharp.NDArray,NumSharp.Kwargs)">
            <summary>
            Return coordinate matrices from coordinate vectors.
            Make N-D coordinate arrays for vectorized evaluations of
            N-D scalar/vector fields over N-D grids, given
            one-dimensional coordinate arrays x1, x2,..., xn.
            .. versionchanged:: 1.9
            1-D and 0-D cases are allowed.
            </summary>
            <param name="x1"> 1-D arrays representing the coordinates of a grid</param>
            <param name="x2"> 1-D arrays representing the coordinates of a grid</param>
            <param name="kwargs"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.np.mgrid(NumSharp.NDArray,NumSharp.NDArray)">
            <summary>
                nd_grid instance which returns a dense multi-dimensional “meshgrid”.
                An instance of numpy.lib.index_tricks.nd_grid which returns an dense (or fleshed out) mesh-grid when indexed, so that each returned argument has the same shape.
                The dimensions and number of the output arrays are equal to the number of indexing dimensions.If the step length is not a complex number, then the stop is not inclusive.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>mesh-grid `ndarrays` all of the same dimensions</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.mgrid.html</remarks>
        </member>
        <member name="M:NumSharp.np.ones(System.Int32[])">
            <summary>
                Return a new array of given shape and type, filled with ones.
            </summary>
            <param name="shapes">Shape of the new array.</param>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ones.html</remarks>
        </member>
        <member name="M:NumSharp.np.ones(System.Type,System.Int32[])">
            <summary>
                Return a new array of given shape and type, filled with ones.
            </summary>
            <param name="shapes">Shape of the new array.</param>
            <param name="dtype">The desired data-type for the array, e.g., <see cref="F:NumSharp.np.uint8"/>. Default is <see cref="F:NumSharp.np.float64"/> / <see cref="T:System.Double"/>.</param>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ones.html</remarks>
        </member>
        <member name="M:NumSharp.np.ones``1(System.Int32[])">
            <summary>
                Return a new array of given shape and type, filled with ones.
            </summary>
            <param name="shapes">Shape of the new array.</param>
            <typeparam name="T">The desired data-type for the array, e.g., <see cref="F:NumSharp.np.uint8"/>. Default is <see cref="F:NumSharp.np.float64"/> / <see cref="T:System.Double"/>.</typeparam>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ones.html</remarks>
        </member>
        <member name="M:NumSharp.np.ones(NumSharp.Shape,System.Type)">
            <summary>
                Return a new array of given shape and type, filled with ones.
            </summary>
            <param name="shape">Shape of the new array.</param>
            <param name="dtype">The desired data-type for the array, e.g., <see cref="F:NumSharp.np.uint8"/>. Default is <see cref="F:NumSharp.np.float64"/> / <see cref="T:System.Double"/>.</param>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ones.html</remarks>
        </member>
        <member name="M:NumSharp.np.ones(NumSharp.Shape)">
            <summary>
                Return a new array of given shape and type, filled with ones.
            </summary>
            <param name="shape">Shape of the new array.</param>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ones.html</remarks>
        </member>
        <member name="M:NumSharp.np.ones(NumSharp.Shape,NumSharp.NPTypeCode)">
            <summary>
                Return a new array of given shape and type, filled with ones.
            </summary>
            <param name="shape">Shape of the new array.</param>
            <param name="typeCode">The desired data-type for the array, e.g., <see cref="F:NumSharp.np.uint8"/>. Default is <see cref="F:NumSharp.np.float64"/> / <see cref="T:System.Double"/>.</param>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ones.html</remarks>
        </member>
        <member name="M:NumSharp.np.ones_like(NumSharp.NDArray,System.Type)">
            <summary>
                Return an array of ones with the same shape and type as a given array.
            </summary>
            <param name="a">Array of ones with the same shape and type as a.</param>
            <param name="dtype">Overrides the data type of the result.</param>
            <returns>Array of zeros with the same shape and type as `nd`.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ones_like.html</remarks>
        </member>
        <member name="M:NumSharp.np.stack(NumSharp.NDArray[],System.Int32)">
            <summary>
                Join a sequence of arrays along a new axis.
                The axis parameter specifies the index of the new axis in the dimensions of the result.
                For example, if axis=0 it will be the first dimension and if axis=-1 it will be the last dimension.
            </summary>
            <param name="arrays">Each array must have the same shape.</param>
            <param name="axis">The axis in the result array along which the input arrays are stacked.</param>
            <returns>The stacked array has one more dimension than the input arrays.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.stack.html</remarks>
        </member>
        <member name="M:NumSharp.np.vstack(NumSharp.NDArray[])">
            <summary>
                Stack arrays in sequence vertically (row wise).<br></br>
                This is equivalent to concatenation along the first axis after 1-D arrays of shape(N,) have been reshaped to(1, N). Rebuilds arrays divided by vsplit.
            </summary>
            <param name="tup">The arrays must have the same shape along all but the first axis. 1-D arrays must have the same length.</param>
            <returns>The array formed by stacking the given arrays, will be at least 2-D.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html</remarks>
        </member>
        <member name="M:NumSharp.np.zeros(System.Int32[])">
            <summary>
                Return a new double array of given shape, filled with zeros.
            </summary>
            <param name="shapes">Shape of the new array,</param>
            <returns>Array of zeros with the given shape, dtype.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html</remarks>
        </member>
        <member name="M:NumSharp.np.zeros``1(System.Int32[])">
            <summary>
                Return a new double array of given shape, filled with zeros.
            </summary>
            <param name="shapes">Shape of the new array,</param>
            <returns>Array of zeros with the given shape, type <typeparamref name="T"/>.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html</remarks>
        </member>
        <member name="M:NumSharp.np.zeros(NumSharp.Shape,System.Type)">
            <summary>
                Return a new double array of given shape, filled with zeros.
            </summary>
            <param name="shape">Shape of the new array,</param>
            <param name="dtype">The desired data-type for the array, e.g., <see cref="F:NumSharp.np.uint8"/>. Default is <see cref="F:NumSharp.np.float64"/> / <see cref="T:System.Double"/>.</param>
            <returns>Array of zeros with the given shape, dtype.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html</remarks>
        </member>
        <member name="M:NumSharp.np.zeros(NumSharp.Shape,NumSharp.NPTypeCode)">
            <summary>
                Return a new double array of given shape, filled with zeros.
            </summary>
            <param name="shape">Shape of the new array,</param>
            <param name="typeCode">The desired data-type for the array, e.g., <see cref="F:NumSharp.np.uint8"/>. Default is <see cref="F:NumSharp.np.float64"/> / <see cref="T:System.Double"/>.</param>
            <returns>Array of zeros with the given shape, dtype.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html</remarks>
        </member>
        <member name="M:NumSharp.np.zeros(NumSharp.Shape)">
            <summary>
                Return a new double array of given shape, filled with zeros.
            </summary>
            <param name="shape">Shape of the new array,</param>       
            <returns>Array of zeros with the given shape, dtype.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html</remarks>
        </member>
        <member name="M:NumSharp.np.zeros_like(NumSharp.NDArray,System.Type)">
             <summary>
                Return an array of zeros with the same shape and type as a given array.
             </summary>
            <param name="a">The shape and data-type of a define these same attributes of the returned array.</param>
             <param name="dtype">Overrides the data type of the result.</param>
             <returns>Array of zeros with the same shape and type as `nd`.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros_like.html</remarks>
        </member>
        <member name="M:NumSharp.np.nonzero(NumSharp.NDArray@)">
            <summary>
                Return the indices of the elements that are non-zero.
                Returns a tuple of arrays, one for each dimension of a, containing the indices of the non-zero elements in that dimension.The values in a are always tested and returned in row-major, C-style order.
                To group the indices by element, rather than dimension, use argwhere, which returns a row for each non-zero element.
            </summary>
            <param name="a">Input array.</param>
            <returns>Indices of elements that are non-zero.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.nonzero.html</remarks>
        </member>
        <member name="M:NumSharp.np.dot(NumSharp.NDArray@,NumSharp.NDArray@)">
            <summary>
                Dot product of two arrays. See remarks.
            </summary>
            <param name="a">Lhs, First argument.</param>
            <param name="b">Rhs, Second argument.</param>
            <returns>Returns the dot product of a and b. If a and b are both scalars or both 1-D arrays then a scalar is returned; otherwise an array is returned. If out is given, then it is returned.</returns>
            <remarks>
                https://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html<br></br>
                Specifically,<br></br>
                    - If both a and b are 1-D arrays, it is inner product of vectors (without complex conjugation).<br></br>
                    - If both a and b are 2-D arrays, it is matrix multiplication, but using matmul or a @ b is preferred.<br></br>
                    - If either a or b is 0-D(scalar), it is equivalent to multiply and using numpy.multiply(a, b) or a* b is preferred.<br></br>
                    - If a is an N-D array and b is a 1-D array, it is a sum product over the last axis of a and b.<br></br>
                    - If a is an N-D array and b is an M-D array(where M>=2), it is a sum product over the last axis of a and the second-to-last axis of b:<br></br>
                      dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m])
            </remarks>
        </member>
        <member name="M:NumSharp.np.linalg.norm(NumSharp.NDArray,System.Object,System.Object)">
            <summary>
            Matrix or vector norm.
            This function is able to return one of seven different matrix norms,
            or one of an infinite number of vector norms(described below), depending
            on the value of the ``ord`` parameter.
            </summary>
            <param name="x">Input array.  If `axis` is None, `x` must be 1-D or 2-D.</param>
            <param name="ord">non-zero int, "inf", "-inf" or "fro", optional
            Order of the norm(see table under ``Notes``). </param>
            <param name="axis_obj">object, optional
            If `axis` is an integer, it specifies the axis of `x` along which to
            compute the vector norms.If `axis` is a 2-tuple, it specifies the
            axes that hold 2-D matrices, and the matrix norms of these matrices
            are computed.If `axis` is None then either a vector norm (when `x`
            is 1-D) or a matrix norm(when `x` is 2-D) is returned.</param>
            <returns>
            Norm of the matrix or vector(s) as double or NDArray.
            </returns>
            <remarks>
            Notes:
            -----
            For values of ``ord &lt;= 0``, the result is, strictly speaking, not a
            mathematical 'norm', but it may still be useful for various numerical
            purposes.
            The following norms can be calculated:
            =====  ============================  ==========================
            ord norm for matrices norm for vectors
            =====  ============================  ==========================
            None Frobenius norm                2-norm
            'fro'  Frobenius norm                --
            inf max(sum(abs(x), axis= 1))      max(abs(x))
            -inf min(sum(abs(x), axis= 1))      min(abs(x))
            0      --                            sum(x != 0)
            1      max(sum(abs(x), axis= 0))      as below
            -1     min(sum(abs(x), axis= 0))      as below
            2      2-norm(largest sing. value)  as below
            -2     smallest singular value       as below
            other  --                            sum(abs(x) ** ord)**(1./ord)
            =====  ============================  ==========================
            The Frobenius norm is given by[1]_:
            :math:`||A||_F = [\\sum_{i, j}
            abs(a_{ i,j})^2]^{1/2}`
            References
            ----------
            .. [1] G.H.Golub and C.F.Van Loan, *Matrix Computations*,
            Baltimore, MD, Johns Hopkins University Press, 1985, pg. 15
            </remarks>
        </member>
        <member name="M:NumSharp.np.matmul(NumSharp.NDArray@,NumSharp.NDArray@)">
            <summary>
                Matrix product of two arrays.
            </summary>
            <param name="x1">Lhs Input array, scalars not allowed.</param>
            <param name="x2">Rhs Input array, scalars not allowed.</param>
            <returns>The matrix product of the inputs. This is a scalar only when both x1, x2 are 1-d vectors.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.matmul.html</remarks>
        </member>
        <member name="M:NumSharp.np.outer(NumSharp.NDArray@,NumSharp.NDArray@)">
            <summary>
                Compute the outer product of two vectors.
                Given two vectors, a = [a0, a1, ..., aM] and b = [b0, b1, ..., bN], the outer product[R60] is:
            </summary>
            <param name="a">First input vector. Input is flattened if not already 1-dimensional.</param>
            <param name="b">Second input vector. Input is flattened if not already 1-dimensional.</param>
            <returns>out[i, j] = a[i] * b[j]</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.outer.html</remarks>
        </member>
        <member name="M:NumSharp.np.all(NumSharp.NDArray)">
            <summary>
                Test whether all array elements along a given axis evaluate to True.
            </summary>
            <param name="a">Input array or object that can be converted to an array.</param>
            <returns>A new boolean or ndarray is returned unless out is specified, in which case a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.all.html</remarks>
        </member>
        <member name="M:NumSharp.np.all(NumSharp.NDArray,System.Int32)">
            <summary>
                Test whether all array elements along a given axis evaluate to True.
            </summary>
            <param name="nd">Input array or object that can be converted to an array.</param>
            <param name="axis">Axis or axes along which a logical OR reduction is performed. The default (axis = None) is to perform a logical OR over all the dimensions of the input array. axis may be negative, in which case it counts from the last to the first axis.</param>
            <returns>A new boolean or ndarray is returned unless out is specified, in which case a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.all.html</remarks>
        </member>
        <member name="M:NumSharp.np.allclose(NumSharp.NDArray,NumSharp.NDArray,System.Double,System.Double,System.Boolean)">
             <summary>
                 Returns True if two arrays are element-wise equal within a tolerance.
                 The tolerance values are positive, typically very small numbers.The
                 
                 relative difference (`rtol` * abs(`b`)) and the absolute difference
                 `atol` are added together to compare against the absolute difference
                 between `a` and `b`.
                 If either array contains one or more NaNs, False is returned.
                 Infs are treated as equal if they are in the same place and of the same
                 sign in both arrays.
             </summary>
             <param name="a">Input array to compare with b</param>
             <param name="b">Input array to compare with a.</param>
             <param name="rtol">The relative tolerance parameter(see Notes)</param>
             <param name="atol">The absolute tolerance parameter(see Notes)</param>
             <param name="equal_nan">Whether to compare NaN's as equal.  If True, NaN's in `a` will be
            considered equal to NaN's in `b` in the output array.</param>
        </member>
        <member name="M:NumSharp.np.any(NumSharp.NDArray)">
            <summary>
                Test whether any array element along a given axis evaluates to True.
            </summary>
            <param name="a">Input array or object that can be converted to an array.</param>
            <returns>A new boolean or ndarray is returned unless out is specified, in which case a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.any.html</remarks>
        </member>
        <member name="M:NumSharp.np.any(NumSharp.NDArray,System.Int32)">
            <summary>
                Test whether any array element along a given axis evaluates to True.
            </summary>
            <param name="nd">Input array or object that can be converted to an array.</param>
            <param name="axis">Axis or axes along which a logical OR reduction is performed. The default (axis = None) is to perform a logical OR over all the dimensions of the input array. axis may be negative, in which case it counts from the last to the first axis.</param>
            <returns>A new boolean or ndarray is returned unless out is specified, in which case a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.any.html</remarks>
        </member>
        <member name="M:NumSharp.np.array_equal(NumSharp.NDArray,NumSharp.NDArray)">
            <summary>
                True if two arrays have the same shape and elements, False otherwise.
            </summary>
            <param name="a">Input array.</param>
            <param name="b">Input array.</param>
            <returns>Returns True if the arrays are equal.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.array_equal.html</remarks>
        </member>
        <member name="F:NumSharp.np._kind_list">
            <summary>
             b -> boolean<br></br>
             u -> unsigned integer<br></br>
             i -> signed integer<br></br>
             f -> floating point<br></br>
             c -> complex<br></br>
             M -> datetime<br></br>
             m -> timedelta<br></br>
             S -> string<br></br>
             U -> Unicode string<br></br>
             V -> record<br></br>
             O -> Python object
            </summary>
        </member>
        <member name="M:NumSharp.np.find_common_type(NumSharp.NPTypeCode[],NumSharp.NPTypeCode[])">
            <summary>
                Determine common type following standard coercion rules.
            </summary>
            <param name="array_types">A list of dtypes or dtype convertible objects representing arrays. Can be null.</param>
            <param name="scalar_types">A list of dtypes or dtype convertible objects representing scalars.Can be null.</param>
            <returns>The common data type, which is the maximum of array_types ignoring scalar_types, unless the maximum of scalar_types is of a different kind (dtype.kind). If the kind is not understood, then None is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.find_common_type.html</remarks>
        </member>
        <member name="M:NumSharp.np.find_common_type(System.Type[])">
            <summary>
                Determine common type following standard coercion rules.
            </summary>
            <param name="array_types">A list of dtypes or dtype convertible objects representing arrays. Can be null.</param>
            <returns>The common data type, which is the maximum of array_types ignoring scalar_types, unless the maximum of scalar_types is of a different kind (dtype.kind). If the kind is not understood, then None is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.find_common_type.html</remarks>
        </member>
        <member name="M:NumSharp.np.find_common_type(System.Type[],System.Type[])">
            <summary>
                Determine common type following standard coercion rules.
            </summary>
            <param name="array_types">A list of dtypes or dtype convertible objects representing arrays. Can be null.</param>
            <param name="scalar_types">A list of dtypes or dtype convertible objects representing scalars.Can be null.</param>
            <returns>The common data type, which is the maximum of array_types ignoring scalar_types, unless the maximum of scalar_types is of a different kind (dtype.kind). If the kind is not understood, then None is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.find_common_type.html</remarks>
        </member>
        <member name="M:NumSharp.np.find_common_type(System.String[],System.String[])">
            <summary>
                Determine common type following standard coercion rules.
            </summary>
            <param name="array_types">A list of dtypes or dtype convertible objects representing arrays. Can be null.</param>
            <param name="scalar_types">A list of dtypes or dtype convertible objects representing scalars.Can be null.</param>
            <returns>The common data type, which is the maximum of array_types ignoring scalar_types, unless the maximum of scalar_types is of a different kind (dtype.kind). If the kind is not understood, then None is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.find_common_type.html</remarks>
        </member>
        <member name="M:NumSharp.np.find_common_type(System.Type[],NumSharp.NPTypeCode[])">
            <summary>
                Determine common type following standard coercion rules.
            </summary>
            <param name="array_types">A list of dtypes or dtype convertible objects representing arrays. Can be null.</param>
            <param name="scalar_types">A list of dtypes or dtype convertible objects representing scalars.Can be null.</param>
            <returns>The common data type, which is the maximum of array_types ignoring scalar_types, unless the maximum of scalar_types is of a different kind (dtype.kind). If the kind is not understood, then None is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.find_common_type.html</remarks>
        </member>
        <member name="M:NumSharp.np.find_common_type(NumSharp.NPTypeCode[],System.Type[])">
            <summary>
                Determine common type following standard coercion rules.
            </summary>
            <param name="array_types">A list of dtypes or dtype convertible objects representing arrays. Can be null.</param>
            <param name="scalar_types">A list of dtypes or dtype convertible objects representing scalars.Can be null.</param>
            <returns>The common data type, which is the maximum of array_types ignoring scalar_types, unless the maximum of scalar_types is of a different kind (dtype.kind). If the kind is not understood, then None is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.find_common_type.html</remarks>
        </member>
        <member name="M:NumSharp.np._FindCommonType(NumSharp.NPTypeCode[],NumSharp.NPTypeCode[])">
            <summary>
                Resolves to which type should the output be.
            </summary>
            <remarks>This function relys on <see cref="T:NumSharp.NPTypeCode"/> being ordered numerically by size.</remarks>
        </member>
        <member name="M:NumSharp.np._FindCommonType(System.Collections.Generic.List{NumSharp.NPTypeCode},System.Collections.Generic.List{NumSharp.NPTypeCode})">
            <summary>
                Resolves to which type should the output be.
            </summary>
            <remarks>This function relys on <see cref="T:NumSharp.NPTypeCode"/> being ordered numerically by size.</remarks>
        </member>
        <member name="M:NumSharp.np._FindCommonType_Scalar(NumSharp.NPTypeCode[])">
            <summary>
                Resolves to which type should the output be.
            </summary>
            <remarks>This function relys on <see cref="T:NumSharp.NPTypeCode"/> being ordered numerically by size.</remarks>
        </member>
        <member name="M:NumSharp.np._FindCommonType_Array(NumSharp.NPTypeCode[])">
            <summary>
                Resolves to which type should the output be.
            </summary>
            <remarks>This function relys on <see cref="T:NumSharp.NPTypeCode"/> being ordered numerically by size.</remarks>
        </member>
        <member name="M:NumSharp.np._FindCommonType(NumSharp.NDArray[])">
            <summary>
                Resolves to which type should the output be.
            </summary>
            <remarks>This function relys on <see cref="T:NumSharp.NPTypeCode"/> being ordered numerically by size.</remarks>
        </member>
        <member name="M:NumSharp.np.find_common_type(System.String[])">
            <summary>
                Resolves to which type should the output be.
            </summary>
        </member>
        <member name="M:NumSharp.np._FindCommonType(NumSharp.NDArray,NumSharp.NDArray)">
            <summary>
                Resolves to which type should the output be.
            </summary>
            <remarks>This function relys on <see cref="T:NumSharp.NPTypeCode"/> being ordered numerically by size.</remarks>
        </member>
        <member name="M:NumSharp.np.isclose(NumSharp.NDArray,NumSharp.NDArray,System.Double,System.Double,System.Boolean)">
             <summary>
             Returns a boolean array where two arrays are element-wise equal within a
             tolerance.
             The tolerance values are positive, typically very small numbers.The    
             relative difference (`rtol` * abs(`b`)) and the absolute difference
             `atol` are added together to compare against the absolute difference
             between `a` and `b`.
             Warning: The default `atol` is not appropriate for comparing numbers
             that are much smaller than one(see Notes).
             
             See also <seealso cref="M:NumSharp.np.allclose(NumSharp.NDArray,NumSharp.NDArray,System.Double,System.Double,System.Boolean)"/>
            
            Notes:
             For finite values, isclose uses the following equation to test whether
             two floating point values are equivalent.
             <code>absolute(`a` - `b`) less than or equal to (`atol` + `rtol` * absolute(`b`))</code>
             Unlike the built-in `math.isclose`, the above equation is not symmetric
             in `a` and `b` -- it assumes `b` is the reference value -- so that
             `isclose(a, b)` might be different from `isclose(b, a)`. Furthermore,
             the default value of atol is not zero, and is used to determine what
             small values should be considered close to zero.The default value is
             appropriate for expected values of order unity: if the expected values
             are significantly smaller than one, it can result in false positives.
             `atol` should be carefully selected for the use case at hand. A zero value
             for `atol` will result in `False` if either `a` or `b` is zero.
             </summary>
             <param name="a">Input array to compare with b</param>
             <param name="b">Input array to compare with a.</param>
             <param name="rtol">The relative tolerance parameter(see Notes)</param>
             <param name="atol">The absolute tolerance parameter(see Notes)</param>
             <param name="equal_nan">Whether to compare NaN's as equal.  If True, NaN's in `a` will be
            considered equal to NaN's in `b` in the output array.</param>
            <returns>
              Returns a boolean array of where `a` and `b` are equal within the
             given tolerance.If both `a` and `b` are scalars, returns a single
             boolean value.
            </returns>
        </member>
        <member name="M:NumSharp.np.isfinite(NumSharp.NDArray)">
            <summary>
            Test element-wise for finiteness (not infinity or not Not a Number).
            </summary>
            <param name="a"></param>
            <returns>The result is returned as a boolean array.</returns>
        </member>
        <member name="M:NumSharp.np.isnan(NumSharp.NDArray)">
            <summary>
            Test element-wise for Not a Number.
            </summary>
            <param name="a"></param>
            <returns>The result is returned as a boolean array.</returns>
        </member>
        <member name="M:NumSharp.np.isscalar(System.Object)">
            <summary>
                Returns true incase of a number, bool or string. If null, returns false.
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.isscalar.html</remarks>
        </member>
        <member name="M:NumSharp.np.logical_and(NumSharp.NDArray,NumSharp.NDArray)">
            <summary>
                Compute the truth value of x1 AND x2 element-wise.
            </summary>
            <param name="lhs">Input boolean array.</param>
            <param name="rhs">Input boolean array.</param>
            <returns>Returns True if the arrays are equal.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_and.html</remarks>
        </member>
        <member name="M:NumSharp.np.logical_or(NumSharp.NDArray,NumSharp.NDArray)">
            <summary>
                Compute the truth value of x1 OR x2 element-wise.
            </summary>
            <param name="lhs">Input boolean array.</param>
            <param name="rhs">Input boolean array.</param>
            <returns>Returns True if the arrays are equal.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_or.html</remarks>
        </member>
        <member name="M:NumSharp.np.apply_along_axis(System.Func{NumSharp.NDArray,NumSharp.NDArray},System.Int32,NumSharp.NDArray)">
            <summary>
            Apply a function to 1-D slices along the given axis.
            Execute `func1d(a, * args, ** kwargs)` where `func1d` operates on 1-D arrays
            and `a` is a 1-D slice of `arr` along `axis`.
            This is equivalent to (but faster than) the following use of `ndindex` and
               `s_`, which sets each of ``ii``, ``jj``, and ``kk`` to a tuple of indices::
                   Ni, Nk = a.shape[:axis], a.shape[axis + 1:]
                   for ii in ndindex(Ni) :
                       for kk in ndindex(Nk) :
                           f = func1d(arr[ii + s_[:,] + kk])
                           Nj = f.shape
                           for jj in ndindex(Nj) :
                               out[ii + jj + kk] = f[jj]
            Equivalently, eliminating the inner loop, this can be expressed as::
                   Ni, Nk = a.shape[:axis], a.shape[axis + 1:]
                   for ii in ndindex(Ni) :
                       for kk in ndindex(Nk) :
                           out[ii + s_[...,] + kk] = func1d(arr[ii + s_[:,] + kk])
            </summary>
            <param name="func1d">function(M,) -> (Nj...)
                  This function should accept 1-D arrays.It is applied to 1-D
                  slices of `arr` along the specified axis.</param>
            <param name="axis">integer
                  Axis along which `arr` is sliced.</param>
            <param name="a">ndarray (Ni..., M, Nk...)
                  Input array.</param>
            <returns>ndarray  (Ni..., Nj..., Nk...)
                  The output array. The shape of `out` is identical to the shape of
                   `arr`, except along the `axis` dimension.This axis is removed, and
                  replaced with new dimensions equal to the shape of the return value
                  of `func1d`. So if `func1d` returns a scalar `out` will have one
                  fewer dimensions than `arr`.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <remarks>
               See Also
               --------
               apply_over_axes : Apply a function repeatedly over multiple axes.
               Examples
               --------
               >>> def my_func(a):
               ...     \"\"\"Average first and last element of a 1-D array\"\"\"
               ...     return (a[0] + a[-1]) * 0.5
               >>> b = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
               >>> np.apply_along_axis(my_func, 0, b)
               array([4., 5., 6.])
               >>> np.apply_along_axis(my_func, 1, b)
               array([2.,  5.,  8.])
               For a function that returns a 1D array, the number of dimensions in
               `outarr` is the same as `arr`.
               >>> b = np.array([[8, 1, 7], [4, 3, 9], [5, 2, 6]])
               >>> np.apply_along_axis(sorted, 1, b)
               array([[1, 7, 8],
                      [3, 4, 9],
                      [2, 5, 6]])
               For a function that returns a higher dimensional array, those dimensions
               are inserted in place of the `axis` dimension.
               >>> b = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
               >>> np.apply_along_axis(np.diag, -1, b)
               array([[[1, 0, 0],
                       [0, 2, 0],
                       [0, 0, 3]],
                      [[4, 0, 0],
                       [0, 5, 0],
                       [0, 0, 6]],
                      [[7, 0, 0],
                       [0, 8, 0],
                       [0, 0, 9]]])
             </remarks>
        </member>
        <member name="M:NumSharp.np.asscalar``1(NumSharp.NDArray)">
            <summary>
                Convert an array of size 1 to its scalar equivalent.
            </summary>
            <param name="nd">Input NDArray of size 1.</param>
            <returns></returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.asscalar.html</remarks>
        </member>
        <member name="M:NumSharp.np.asscalar``1(System.Array)">
            <summary>
                Convert an array of size 1 to its scalar equivalent.
            </summary>
            <param name="arr">Input array of size 1.</param>
            <returns></returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.asscalar.html</remarks>
        </member>
        <member name="M:NumSharp.np.asscalar(NumSharp.NDArray)">
            <summary>
                Convert an array of size 1 to its scalar equivalent.
            </summary>
            <param name="nd">Input NDArray of size 1.</param>
            <returns></returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.asscalar.html</remarks>
        </member>
        <member name="M:NumSharp.np.asscalar(System.Array)">
            <summary>
                Convert an array of size 1 to its scalar equivalent.
            </summary>
            <param name="arr">Input array of size 1.</param>
            <returns></returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.asscalar.html</remarks>
        </member>
        <member name="M:NumSharp.np.asscalar``1(NumSharp.Backends.Unmanaged.ArraySlice{``0})">
            <summary>
                Convert an array of size 1 to its scalar equivalent.
            </summary>
            <param name="arr">Input array of size 1.</param>
            <returns></returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.asscalar.html</remarks>
        </member>
        <member name="M:NumSharp.np.asscalar``1(NumSharp.Backends.Unmanaged.IArraySlice)">
            <summary>
                Convert an array of size 1 to its scalar equivalent.
            </summary>
            <param name="arr">Input array of size 1.</param>
            <returns></returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.asscalar.html</remarks>
        </member>
        <member name="M:NumSharp.np.atleast_3d(System.Object)">
            <summary>
                View inputs as arrays with at least three dimensions.
            </summary>
            <param name="arys">One or more array-like sequences. Non-array inputs are converted to arrays. Arrays that already have three or more dimensions are preserved.</param>
            <returns>An array, or list of arrays, each with a.ndim >= 3. Copies are avoided where possible, and views with three or more dimensions are returned. For example, a 1-D array of shape (N,) becomes a view of shape (1, N, 1), and a 2-D array of shape (M, N) becomes a view of shape (M, N, 1).</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_3d.html</remarks>
        </member>
        <member name="M:NumSharp.np.atleast_3d(NumSharp.NDArray)">
            <summary>
                View inputs as arrays with at least three dimensions.
            </summary>
            <returns>An array, or list of arrays, each with a.ndim >= 3. Copies are avoided where possible, and views with three or more dimensions are returned. For example, a 1-D array of shape (N,) becomes a view of shape (1, N, 1), and a 2-D array of shape (M, N) becomes a view of shape (M, N, 1).</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_3d.html</remarks>
        </member>
        <member name="M:NumSharp.np.atleast_3d(System.Object[])">
            <summary>
                View inputs as arrays with at least three dimensions.
            </summary>
            <param name="arys">One or more array-like sequences. Non-array inputs are converted to arrays. Arrays that already have three or more dimensions are preserved.</param>
            <returns>An array, or list of arrays, each with a.ndim >= 3. Copies are avoided where possible, and views with three or more dimensions are returned. For example, a 1-D array of shape (N,) becomes a view of shape (1, N, 1), and a 2-D array of shape (M, N) becomes a view of shape (M, N, 1).</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_3d.html</remarks>
        </member>
        <member name="M:NumSharp.np.atleast_3d(NumSharp.NDArray[])">
            <summary>
                View inputs as arrays with at least three dimensions.
            </summary>
            <param name="arys">One or more array-like sequences. Non-array inputs are converted to arrays. Arrays that already have three or more dimensions are preserved.</param>
            <returns>An array, or list of arrays, each with a.ndim >= 3. Copies are avoided where possible, and views with three or more dimensions are returned. For example, a 1-D array of shape (N,) becomes a view of shape (1, N, 1), and a 2-D array of shape (M, N) becomes a view of shape (M, N, 1).</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_3d.html</remarks>
        </member>
        <member name="M:NumSharp.np.atleast_2d(System.Object)">
            <summary>
                View inputs as arrays with at least two dimensions.
            </summary>
            <param name="arys">One or more array-like sequences. Non-array inputs are converted to arrays. Arrays that already have two or more dimensions are preserved.</param>
            <returns>An array, or list of arrays, each with a.ndim >= 2. Copies are avoided where possible, and views with two or more dimensions are returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_2d.html</remarks>
        </member>
        <member name="M:NumSharp.np.atleast_2d(NumSharp.NDArray)">
            <summary>
                View inputs as arrays with at least two dimensions.
            </summary>
            <param name="arr">One or more array-like sequences. Non-array inputs are converted to arrays. Arrays that already have two or more dimensions are preserved.</param>
            <returns>An array, or list of arrays, each with a.ndim >= 2. Copies are avoided where possible, and views with two or more dimensions are returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_2d.html</remarks>
        </member>
        <member name="M:NumSharp.np.atleast_2d(System.Object[])">
            <summary>
                View inputs as arrays with at least two dimensions.
            </summary>
            <param name="arys">One or more array-like sequences. Non-array inputs are converted to arrays. Arrays that already have two or more dimensions are preserved.</param>
            <returns>An array, or list of arrays, each with a.ndim >= 2. Copies are avoided where possible, and views with two or more dimensions are returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_2d.html</remarks>
        </member>
        <member name="M:NumSharp.np.atleast_2d(NumSharp.NDArray[])">
            <summary>
                View inputs as arrays with at least two dimensions.
            </summary>
            <param name="arys">One or more array-like sequences. Non-array inputs are converted to arrays. Arrays that already have two or more dimensions are preserved.</param>
            <returns>An array, or list of arrays, each with a.ndim >= 2. Copies are avoided where possible, and views with two or more dimensions are returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_2d.html</remarks>
        </member>
        <member name="M:NumSharp.np.atleast_1d(System.Object)">
            <summary>
                Convert inputs to arrays with at least one dimension.
                Scalar inputs are converted to 1-dimensional arrays, whilst higher-dimensional inputs are preserved.
            </summary>
            <param name="arys">One or more input arrays.</param>
            <returns>An array, or list of arrays, each with a.ndim >= 1. Copies are made only if necessary.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_1d.html</remarks>
        </member>
        <member name="M:NumSharp.np.atleast_1d(NumSharp.NDArray)">
            <summary>
                Convert inputs to arrays with at least one dimension.
                Scalar inputs are converted to 1-dimensional arrays, whilst higher-dimensional inputs are preserved.
            </summary>
            <returns>An array, or list of arrays, each with a.ndim >= 1. Copies are made only if necessary.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_1d.html</remarks>
        </member>
        <member name="M:NumSharp.np.atleast_1d(System.Object[])">
            <summary>
                Convert inputs to arrays with at least one dimension.
                Scalar inputs are converted to 1-dimensional arrays, whilst higher-dimensional inputs are preserved.
            </summary>
            <param name="arys">One or more input arrays.</param>
            <returns>An array, or list of arrays, each with a.ndim >= 1. Copies are made only if necessary.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_1d.html</remarks>
        </member>
        <member name="M:NumSharp.np.atleast_1d(NumSharp.NDArray[])">
            <summary>
                Convert inputs to arrays with at least one dimension.
                Scalar inputs are converted to 1-dimensional arrays, whilst higher-dimensional inputs are preserved.
            </summary>
            <param name="arys">One or more input arrays.</param>
            <returns>An array, or list of arrays, each with a.ndim >= 1. Copies are made only if necessary.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_1d.html</remarks>
        </member>
        <member name="M:NumSharp.np.copyto(NumSharp.NDArray,NumSharp.NDArray)">
            <summary>
                Copies values from one array to another, broadcasting as necessary.
            </summary>
            <param name="dst">The array into which values are copied.</param>
            <param name="src">The array from which values are copied.</param>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.copyto.html</remarks>
        </member>
        <member name="M:NumSharp.np.moveaxis(NumSharp.NDArray@,System.Int32,System.Int32)">
            <summary>
                Move axes of an array to new positions.
                Other axes remain in their original order.
            </summary>
            <param name="a">The array whose axes should be reordered.</param>
            <param name="source">Original positions of the axes to move. These must be unique (distinct).</param>
            <param name="destination">Destination positions for each of the original axes. These must also be unique (distinct).</param>
            <returns>Array with moved axes.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.moveaxis.html</remarks>
        </member>
        <member name="M:NumSharp.np.moveaxis(NumSharp.NDArray@,System.Int32[],System.Int32)">
            <summary>
                Move axes of an array to new positions.
                Other axes remain in their original order.
            </summary>
            <param name="a">The array whose axes should be reordered.</param>
            <param name="source">Original positions of the axes to move. These must be unique (distinct).</param>
            <param name="destination">Destination positions for each of the original axes. These must also be unique (distinct).</param>
            <returns>Array with moved axes.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.moveaxis.html</remarks>
        </member>
        <member name="M:NumSharp.np.moveaxis(NumSharp.NDArray@,System.Int32,System.Int32[])">
            <summary>
                Move axes of an array to new positions.
                Other axes remain in their original order.
            </summary>
            <param name="a">The array whose axes should be reordered.</param>
            <param name="source">Original positions of the axes to move. These must be unique (distinct).</param>
            <param name="destination">Destination positions for each of the original axes. These must also be unique (distinct).</param>
            <returns>Array with moved axes.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.moveaxis.html</remarks>
        </member>
        <member name="M:NumSharp.np.moveaxis(NumSharp.NDArray@,System.Int32[],System.Int32[])">
            <summary>
                Move axes of an array to new positions.
                Other axes remain in their original order.
            </summary>
            <param name="a">The array whose axes should be reordered.</param>
            <param name="source">Original positions of the axes to move. These must be unique (distinct).</param>
            <param name="destination">Destination positions for each of the original axes. These must also be unique (distinct).</param>
            <returns>Array with moved axes.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.moveaxis.html</remarks>
        </member>
        <member name="M:NumSharp.np.ravel(NumSharp.NDArray)">
            <summary>
                Return a contiguous flattened array. A 1-D array, containing the elements of the input, is returned
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html</remarks>
            <param name="a">Input array. The elements in a are read in the order specified by order, and packed as a 1-D array.</param>
            <remarks><br></br>If this array's <see cref="T:NumSharp.Shape"/> is a sliced or broadcasted, the a copy will be made.</remarks>
        </member>
        <member name="M:NumSharp.np.repeat(NumSharp.NDArray,System.Int32)">
            <summary>
                Repeat elements of an array.
            </summary>
            <param name="a">Input array.</param>
            <param name="repeats">The number of repetitions for each element. repeats is broadcasted to fit the shape of the given axis.</param> 
            <returns></returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html</remarks>
        </member>
        <member name="M:NumSharp.np.repeat``1(``0,System.Int32)">
            <summary>
                Repeat a scalar.
            </summary>
            <param name="a">Input scalar.</param>
            <param name="repeats">The number of repetitions for each element. repeats is broadcasted to fit the shape of the given axis.</param>
            <returns></returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html</remarks>
        </member>
        <member name="M:NumSharp.np.reshape(NumSharp.NDArray,System.Int32[])">
            <summary>
                Gives a new shape to an array without changing its data.
            </summary>
            <param name="nd">Array to be reshaped.</param>
            <param name="shape">The new shape should be compatible with the original shape. </param>
            <returns>original <paramref name="nd"/> reshaped without copying.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.reshape.html</remarks>
        </member>
        <member name="M:NumSharp.np.reshape(NumSharp.NDArray,NumSharp.Shape)">
            <summary>
                Gives a new shape to an array without changing its data.
            </summary>
            <param name="nd">Array to be reshaped.</param>
            <param name="shape">The new shape should be compatible with the original shape. </param>
            <returns>original <paramref name="nd"/> reshaped without copying.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.reshape.html</remarks>
        </member>
        <member name="M:NumSharp.np.reshape(NumSharp.NDArray,NumSharp.Shape@)">
            <summary>
                Gives a new shape to an array without changing its data.
            </summary>
            <param name="nd">Array to be reshaped.</param>
            <param name="shape">The new shape should be compatible with the original shape. </param>
            <returns>original <paramref name="nd"/> reshaped without copying.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.reshape.html</remarks>
        </member>
        <member name="M:NumSharp.np.rollaxis(NumSharp.NDArray@,System.Int32,System.Int32)">
            <summary>
                Roll the specified axis backwards, until it lies in a given position. <br></br>
                This function continues to be supported for backward compatibility, but you should prefer moveaxis. The moveaxis function was added in NumPy 1.11.
            </summary>
            <param name="a">Input array.</param>
            <param name="axis">The axis to roll backwards. The positions of the other axes do not change relative to one another.</param>
            <param name="start">The axis is rolled until it lies before this position. The default, 0, results in a “complete” roll.</param>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.rollaxis.html</remarks>
        </member>
        <member name="M:NumSharp.np.squeeze(NumSharp.NDArray)">
            <summary>
                Remove single-dimensional entries from the shape of an array.
            </summary>
            <param name="a">Input data.</param>
            <returns>The input array, but with all or a subset of the dimensions of length 1 removed. This is always a itself or a view into a.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.squeeze.html</remarks>
        </member>
        <member name="M:NumSharp.np.squeeze(NumSharp.NDArray,System.Int32)">
            <summary>
                Remove single-dimensional entries from the shape of an array.
            </summary>
            <param name="a">Input data.</param>
            <param name="axis">Selects a subset of the single-dimensional entries in the shape. If an axis is selected with shape entry greater than one, an error is raised.</param>
            <returns>The input array, but with all or a subset of the dimensions of length 1 removed. This is always a itself or a view into a.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.squeeze.html</remarks>
            <exception cref="T:NumSharp.IncorrectShapeException">If axis is not None, and an axis being squeezed is not of length 1</exception>
        </member>
        <member name="M:NumSharp.np.squeeze(NumSharp.Shape)">
            <summary>
                Remove single-dimensional entries from a shape.
            </summary>
            <param name="shape">Input shape.</param>
            <returns>The input array, but with all or a subset of the dimensions of length 1 removed. This is always a itself or a view into a.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.squeeze.html</remarks>
        </member>
        <member name="M:NumSharp.np.squeeze_fast(NumSharp.NDArray,System.Int32)">
            <summary>
                Remove single-dimensional entries from the shape of an array.
            </summary>
            <param name="a">Input data.</param>
            <param name="axis">Selects a subset of the single-dimensional entries in the shape. If an axis is selected with shape entry greater than one, an error is raised.</param>
            <returns>The input array, but with all or a subset of the dimensions of length 1 removed. This is always a itself or a view into a.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.squeeze.html</remarks>
            <exception cref="T:NumSharp.IncorrectShapeException">If axis is not None, and an axis being squeezed is not of length 1</exception>
        </member>
        <member name="M:NumSharp.np.squeeze_fast(NumSharp.Shape,System.Int32)">
            <summary>
                Remove single-dimensional entries from the shape of an array.
            </summary>
            <param name="a">Input data.</param>
            <param name="axis">Selects a subset of the single-dimensional entries in the shape. If an axis is selected with shape entry greater than one, an error is raised.</param>
            <returns>The input array, but with all or a subset of the dimensions of length 1 removed. This is always a itself or a view into a.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.squeeze.html</remarks>
            <exception cref="T:NumSharp.IncorrectShapeException">If axis is not None, and an axis being squeezed is not of length 1</exception>
        </member>
        <member name="M:NumSharp.np.swapaxes(NumSharp.NDArray@,System.Int32,System.Int32)">
            <summary>
                Interchange two axes of an array.
            </summary>
            <param name="a">Input array.</param>
            <param name="axis1">First axis.</param>
            <param name="axis2">Second axis.</param>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.swapaxes.html</remarks>
        </member>
        <member name="M:NumSharp.np.transpose(NumSharp.NDArray@,System.Int32[])">
            <summary>
                Permute the dimensions of an array.
            </summary>
            <param name="a">Input array.</param>
            <param name="premute">By default, reverse the dimensions, otherwise permute the axes according to the values given.</param>
            <returns>a with its axes permuted. A view is returned whenever possible.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.transpose.html</remarks>
        </member>
        <member name="M:NumSharp.np.unique(NumSharp.NDArray@)">
            <summary>
                Find the unique elements of an array.<br></br>
                
                Returns the sorted unique elements of an array.There are three optional outputs in addition to the unique elements:<br></br>
                * the indices of the input array that give the unique values<br></br>
                * the indices of the unique array that reconstruct the input array<br></br>
                * the number of times each unique value comes up in the input array<br></br>
            </summary>
            <returns>The sorted unique values.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.unique.html</remarks>
        </member>
        <member name="M:NumSharp.np.absolute(NumSharp.NDArray@,System.Type)">
            <summary>
                Calculate the absolute value element-wise. <br></br>
                np.abs is a shorthand for this function.
            </summary>
            <param name="a">Input value.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>An ndarray containing the absolute value of each element in x.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.absolute.html</remarks>
        </member>
        <member name="M:NumSharp.np.absolute(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Calculate the absolute value element-wise. <br></br>
                np.abs is a shorthand for this function.
            </summary>
            <param name="a">Input value.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>An ndarray containing the absolute value of each element in x.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.absolute.html</remarks>
        </member>
        <member name="M:NumSharp.np.absolute(NumSharp.NDArray@)">
            <summary>
                Calculate the absolute value element-wise. <br></br>
                np.abs is a shorthand for this function.
            </summary>
            <param name="a">Input value.</param>
            <returns>An ndarray containing the absolute value of each element in x.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.absolute.html</remarks>
        </member>
        <member name="M:NumSharp.np.abs(NumSharp.NDArray@,System.Type)">
            <summary>
                Calculate the absolute value element-wise. <br></br>
                np.abs is a shorthand for this function.
            </summary>
            <param name="a">Input value.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>An ndarray containing the absolute value of each element in x.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.absolute.html</remarks>
        </member>
        <member name="M:NumSharp.np.abs(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Calculate the absolute value element-wise. <br></br>
                np.abs is a shorthand for this function.
            </summary>
            <param name="a">Input value.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>An ndarray containing the absolute value of each element in x.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.absolute.html</remarks>
        </member>
        <member name="M:NumSharp.np.abs(NumSharp.NDArray@)">
            <summary>
                Calculate the absolute value element-wise. <br></br>
                np.abs is a shorthand for this function.
            </summary>
            <param name="a">Input value.</param>
            <returns>An ndarray containing the absolute value of each element in x.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.absolute.html</remarks>
        </member>
        <member name="M:NumSharp.np.ceil(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Return the ceiling of the input, element-wise.<br></br>
                The ceil of the scalar x is the smallest integer i, such that i >= x. It is often denoted as \lceil x \rceil.
            </summary>
            <param name="x">Input data.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The ceiling of each element in x, with float dtype. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ceil.html</remarks>
        </member>
        <member name="M:NumSharp.np.ceil(NumSharp.NDArray@,System.Type)">
            <summary>
                Return the ceiling of the input, element-wise.<br></br>
                The ceil of the scalar x is the smallest integer i, such that i >= x. It is often denoted as \lceil x \rceil.
            </summary>
            <param name="x">Input data.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The ceiling of each element in x, with float dtype. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ceil.html</remarks>
        </member>
        <member name="M:NumSharp.np.clip(NumSharp.NDArray@,NumSharp.NDArray,NumSharp.NDArray,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Clip (limit) the values in an array.<br></br>
                Given an interval, values outside the interval are clipped to the interval edges. For example, if an interval of [0, 1] is specified, values smaller than 0 become 0, and values larger than 1 become 1.
            </summary>
            <param name="a">Array containing elements to clip.</param>
            <param name="a_max">Maximum value. If None, clipping is not performed on upper interval edge. Not more than one of a_min and a_max may be None.</param>
            <param name="a_min">Minimum value. If None, clipping is not performed on lower interval edge. Not more than one of a_min and a_max may be None.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>An array with the elements of a, but where values &lt; a_min are replaced with a_min, and those &gt; a_max with a_max.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.clip.html</remarks>
        </member>
        <member name="M:NumSharp.np.clip(NumSharp.NDArray@,NumSharp.NDArray,NumSharp.NDArray,System.Type)">
            <summary>
                Clip (limit) the values in an array.<br></br>
                Given an interval, values outside the interval are clipped to the interval edges. For example, if an interval of [0, 1] is specified, values smaller than 0 become 0, and values larger than 1 become 1.
            </summary>
            <param name="a">Array containing elements to clip.</param>
            <param name="a_max">Maximum value. If None, clipping is not performed on upper interval edge. Not more than one of a_min and a_max may be None.</param>
            <param name="a_min">Minimum value. If None, clipping is not performed on lower interval edge. Not more than one of a_min and a_max may be None.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>An array with the elements of a, but where values &lt; a_min are replaced with a_min, and those &gt; a_max with a_max.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.clip.html</remarks>
        </member>
        <member name="M:NumSharp.np.clip(NumSharp.NDArray@,NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray)">
            <summary>
                Clip (limit) the values in an array.<br></br>
                Given an interval, values outside the interval are clipped to the interval edges. For example, if an interval of [0, 1] is specified, values smaller than 0 become 0, and values larger than 1 become 1.
            </summary>
            <param name="a">Array containing elements to clip.</param>
            <param name="a_max">Maximum value. If None, clipping is not performed on upper interval edge. Not more than one of a_min and a_max may be None.</param>
            <param name="a_min">Minimum value. If None, clipping is not performed on lower interval edge. Not more than one of a_min and a_max may be None.</param>
            <param name="out">The results will be placed in this array. It may be the input array for in-place clipping. out must be of the right shape to hold the output. Its type is preserved.</param>
            <returns>An array with the elements of a, but where values &lt; a_min are replaced with a_min, and those &gt; a_max with a_max.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.clip.html</remarks>
        </member>
        <member name="M:NumSharp.np.cos(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Cosine element-wise.
            </summary>
            <param name="x">Input array in radians.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The sine of each element of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.cos.html</remarks>
        </member>
        <member name="M:NumSharp.np.cos(NumSharp.NDArray@,System.Type)">
            <summary>
                Cosine element-wise.
            </summary>
            <param name="x">Input array in radians.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The sine of each element of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.cos.html</remarks>
        </member>
        <member name="M:NumSharp.np.cosh(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Hyperbolic cosine, element-wise. <br></br>
                Equivalent to 1/2 * (np.exp(x) + np.exp(-x)) and np.cos(1j* x).
            </summary>
            <param name="x">Input array.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>Output array of same shape as x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.cosh.html</remarks>
        </member>
        <member name="M:NumSharp.np.cosh(NumSharp.NDArray@,System.Type)">
            <summary>
                Hyperbolic cosine, element-wise. <br></br>
                Equivalent to 1/2 * (np.exp(x) + np.exp(-x)) and np.cos(1j* x).
            </summary>
            <param name="x">Input array.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>Output array of same shape as x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.cosh.html</remarks>
        </member>
        <member name="M:NumSharp.np.arccos(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Trigonometric inverse cosine, element-wise. <br></br>
                The inverse of cos so that, if y = cos(x), then x = arccos(y).
            </summary>
            <param name="x">Input array.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The angle of the ray intersecting the unit circle at the given x-coordinate in radians [0, pi]. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.arccos.html</remarks>
        </member>
        <member name="M:NumSharp.np.arccos(NumSharp.NDArray@,System.Type)">
            <summary>
                Trigonometric inverse cosine, element-wise. <br></br>
                The inverse of cos so that, if y = cos(x), then x = arccos(y).
            </summary>
            <param name="x">Input array.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The angle of the ray intersecting the unit circle at the given x-coordinate in radians [0, pi]. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.arccos.html</remarks>
        </member>
        <member name="M:NumSharp.np.floor(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Return the floor of the input, element-wise. <br></br>
                The floor of the scalar x is the largest integer i, such that i &lt;= x. It is often denoted as \lfloor x \rfloor.
            </summary>
            <param name="x">Input array</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The floor of each element in x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.floor.html</remarks>
        </member>
        <member name="M:NumSharp.np.floor(NumSharp.NDArray@,System.Type)">
            <summary>
                Return the floor of the input, element-wise. <br></br>
                The floor of the scalar x is the largest integer i, such that i &lt;&#61; x. It is often denoted as \lfloor x \rfloor.
            </summary>
            <param name="x">Input array</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The floor of each element in x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.floor.html</remarks>
        </member>
        <member name="M:NumSharp.np.log(NumSharp.NDArray@,System.Type)">
            <summary>
                Natural logarithm, element-wise.
                The natural logarithm log is the inverse of the exponential function, so that log(exp(x)) = x.
                The natural logarithm is logarithm in base e.
            </summary>
            <param name="x">Input value.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The natural logarithm of x, element-wise. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.log.html</remarks>
        </member>
        <member name="M:NumSharp.np.log(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Natural logarithm, element-wise.
                The natural logarithm log is the inverse of the exponential function, so that log(exp(x)) = x.
                The natural logarithm is logarithm in base e.
            </summary>
            <param name="x">Input value.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The natural logarithm of x, element-wise. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.log.html</remarks>
        </member>
        <member name="M:NumSharp.np.log(NumSharp.NDArray@)">
            <summary>
                Natural logarithm, element-wise.
                The natural logarithm log is the inverse of the exponential function, so that log(exp(x)) = x.
                The natural logarithm is logarithm in base e.
            </summary>
            <param name="x">Input value.</param>
            <returns>The natural logarithm of x, element-wise. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.log.html</remarks>
        </member>
        <member name="M:NumSharp.np.log2(NumSharp.NDArray@,System.Type)">
            <summary>
                Base-2 logarithm of x.
            </summary>
            <param name="x">Input value.</param>
            <param name="outType"></param>
            <returns>Base-2 logarithm of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.log2.html</remarks>
        </member>
        <member name="M:NumSharp.np.log2(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Base-2 logarithm of x.
            </summary>
            <param name="x">Input value.</param>
            <param name="outType"></param>
            <returns>Base-2 logarithm of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.log2.html</remarks>
        </member>
        <member name="M:NumSharp.np.log2(NumSharp.NDArray@)">
            <summary>
                Base-2 logarithm of x.
            </summary>
            <param name="x">Input value.</param>
            <returns>Base-2 logarithm of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.log2.html</remarks>
        </member>
        <member name="M:NumSharp.np.log10(NumSharp.NDArray@,System.Type)">
            <summary>
                Return the base 10 logarithm of the input array, element-wise.
            </summary>
            <param name="x">Input value.</param>
            <param name="outType"></param>
            <returns>The logarithm to the base 10 of x, element-wise. NaNs are returned where x is negative. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.log10.html</remarks>
        </member>
        <member name="M:NumSharp.np.log10(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Return the base 10 logarithm of the input array, element-wise.
            </summary>
            <param name="x">Input value.</param>
            <param name="outType"></param>
            <returns>The logarithm to the base 10 of x, element-wise. NaNs are returned where x is negative. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.log10.html</remarks>
        </member>
        <member name="M:NumSharp.np.log10(NumSharp.NDArray@)">
            <summary>
                Return the base 10 logarithm of the input array, element-wise.
            </summary>
            <param name="x">Input value.</param>
            <returns>The logarithm to the base 10 of x, element-wise. NaNs are returned where x is negative. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.log10.html</remarks>
        </member>
        <member name="M:NumSharp.np.log1p(NumSharp.NDArray@,System.Type)">
            <summary>
                Return the natural logarithm of one plus the input array, element-wise.<br></br>
                Calculates log(1 + x).
            </summary>
            <param name="x">Input value.</param>
            <param name="outType"></param>
            <returns>Natural logarithm of 1 + x, element-wise. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.log1p.html</remarks>
        </member>
        <member name="M:NumSharp.np.log1p(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Return the natural logarithm of one plus the input array, element-wise.<br></br>
                Calculates log(1 + x).
            </summary>
            <param name="x">Input value.</param>
            <param name="outType"></param>
            <returns>Natural logarithm of 1 + x, element-wise. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.log1p.html</remarks>
        </member>
        <member name="M:NumSharp.np.log1p(NumSharp.NDArray@)">
            <summary>
                Return the natural logarithm of one plus the input array, element-wise.<br></br>
                Calculates log(1 + x).
            </summary>
            <param name="x">Input value.</param>
            <returns>Natural logarithm of 1 + x, element-wise. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.log1p.html</remarks>
        </member>
        <member name="M:NumSharp.np.add(NumSharp.NDArray@,NumSharp.NDArray@)">
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.add.html</remarks>
        </member>
        <member name="M:NumSharp.np.divide(NumSharp.NDArray@,NumSharp.NDArray@)">
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.divide.html</remarks>
        </member>
        <member name="M:NumSharp.np.true_divide(NumSharp.NDArray@,NumSharp.NDArray@)">
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.true_divide.html</remarks>
        </member>
        <member name="M:NumSharp.np.multiply(NumSharp.NDArray@,NumSharp.NDArray@)">
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.multiply.html</remarks>
        </member>
        <member name="M:NumSharp.np.subtract(NumSharp.NDArray@,NumSharp.NDArray@)">
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.subtract.html</remarks>
        </member>
        <member name="M:NumSharp.np.mod(NumSharp.NDArray@,NumSharp.NDArray@)">
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.mod.html</remarks>
        </member>
        <member name="M:NumSharp.np.convolve(NumSharp.NDArray,NumSharp.NDArray,System.String)">
             <summary>
             Returns the discrete, linear convolution of two one-dimensional sequences.
            
             The convolution operator is often seen in signal processing, where it models the effect of a linear time-invariant system on a signal[1]. In probability theory, the sum of two independent random variables is distributed according to the convolution of their individual distributions.
             
             If v is longer than a, the arrays are swapped before computation.
             </summary>
             <param name="a"></param>
             <param name="v"></param>
             <param name="mode"></param>
             <returns></returns>
        </member>
        <member name="M:NumSharp.np.prod(NumSharp.NDArray@,System.Nullable{System.Int32},System.Type,System.Boolean)">
            <summary>
                Return the product of array elements over a given axis.
            </summary>
            <param name="a">Input data.</param>
            <param name="axis">Axis or axes along which a product is performed. The default, axis=None, will calculate the product of all the elements in the input array. If axis is negative it counts from the last to the first axis.</param>
            <param name="dtype">The type of the returned array, as well as of the accumulator in which the elements are multiplied. The dtype of a is used by default unless a has an integer dtype of less precision than the default platform integer. In that case, if a is signed then the platform integer is used while if a is unsigned then an unsigned integer of the same precision as the platform integer is used.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.</param>
            <returns>An array shaped as a but with the specified axis removed.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.prod.html</remarks>
        </member>
        <member name="M:NumSharp.np.positive(NumSharp.NDArray@)">
            <summary>
                Numerical positive, element-wise.
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.positive.html</remarks>
        </member>
        <member name="M:NumSharp.np.negative(NumSharp.NDArray@)">
            <summary>
                Numerical negative, element-wise.
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.negative.html</remarks>
        </member>
        <member name="M:NumSharp.np.maximum(NumSharp.NDArray@,NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Element-wise maximum of array elements.
                Compare two arrays and returns a new array containing the element-wise maxima.If one of the elements being compared is a NaN, then that element is returned.If both elements are NaNs then the first is returned.The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are propagated.
            </summary>
            <param name="x1">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="x2">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="outType"></param>
            <returns>The maximum of x1 and x2, element-wise. This is a scalar if both x1 and x2 are scalars.</returns>
        </member>
        <member name="M:NumSharp.np.maximum(NumSharp.NDArray@,NumSharp.NDArray@,System.Type)">
            <summary>
                Element-wise maximum of array elements.
                Compare two arrays and returns a new array containing the element-wise maxima.If one of the elements being compared is a NaN, then that element is returned.If both elements are NaNs then the first is returned.The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are propagated.
            </summary>
            <param name="x1">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="x2">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="outType"></param>
            <returns>The maximum of x1 and x2, element-wise. This is a scalar if both x1 and x2 are scalars.</returns>
        </member>
        <member name="M:NumSharp.np.maximum(NumSharp.NDArray@,NumSharp.NDArray@,NumSharp.NDArray)">
            <summary>
                Element-wise maximum of array elements.
                Compare two arrays and returns a new array containing the element-wise maxima.If one of the elements being compared is a NaN, then that element is returned.If both elements are NaNs then the first is returned.The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are propagated.
            </summary>
            <param name="x1">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="x2">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="out">A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated array is returned. A tuple (possible only as a keyword argument) must have length equal to the number of outputs.</param>
            <returns>The maximum of x1 and x2, element-wise. This is a scalar if both x1 and x2 are scalars.</returns>
        </member>
        <member name="M:NumSharp.np.fmax(NumSharp.NDArray@,NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Element-wise maximum of array elements.
                Compare two arrays and returns a new array containing the element-wise maxima. If one of the elements being compared is a NaN, then the non-nan element is returned. If both elements are NaNs then the first is returned. The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are ignored when possible.
            </summary>
            <param name="x1">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="x2">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="outType">A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated array is returned. A tuple (possible only as a keyword argument) must have length equal to the number of outputs.</param>
            <returns>The maximum of x1 and x2, element-wise. This is a scalar if both x1 and x2 are scalars.</returns>
        </member>
        <member name="M:NumSharp.np.fmax(NumSharp.NDArray@,NumSharp.NDArray@,System.Type)">
            <summary>
                Element-wise maximum of array elements.
                Compare two arrays and returns a new array containing the element-wise maxima. If one of the elements being compared is a NaN, then the non-nan element is returned. If both elements are NaNs then the first is returned. The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are ignored when possible.
            </summary>
            <param name="x1">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="x2">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="outType">A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated array is returned. A tuple (possible only as a keyword argument) must have length equal to the number of outputs.</param>
            <returns>The maximum of x1 and x2, element-wise. This is a scalar if both x1 and x2 are scalars.</returns>
        </member>
        <member name="M:NumSharp.np.fmax(NumSharp.NDArray@,NumSharp.NDArray@,NumSharp.NDArray)">
            <summary>
                Element-wise maximum of array elements.
                Compare two arrays and returns a new array containing the element-wise maxima. If one of the elements being compared is a NaN, then the non-nan element is returned. If both elements are NaNs then the first is returned. The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are ignored when possible.
            </summary>
            <param name="x1">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="x2">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="out">A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated array is returned. A tuple (possible only as a keyword argument) must have length equal to the number of outputs.</param>
            <returns>The maximum of x1 and x2, element-wise. This is a scalar if both x1 and x2 are scalars.</returns>
        </member>
        <member name="M:NumSharp.np.minimum(NumSharp.NDArray@,NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Element-wise minimum of array elements.
                Compare two arrays and returns a new array containing the element-wise minima.If one of the elements being compared is a NaN, then that element is returned.If both elements are NaNs then the first is returned.The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are propagated.
            </summary>
            <param name="x1">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="x2">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="outType"></param>
            <returns>The maximum of x1 and x2, element-wise. This is a scalar if both x1 and x2 are scalars.</returns>
        </member>
        <member name="M:NumSharp.np.minimum(NumSharp.NDArray@,NumSharp.NDArray@,System.Type)">
            <summary>
                Element-wise minimum of array elements.
                Compare two arrays and returns a new array containing the element-wise minima.If one of the elements being compared is a NaN, then that element is returned.If both elements are NaNs then the first is returned.The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are propagated.
            </summary>
            <param name="x1">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="x2">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="outType"></param>
            <returns>The maximum of x1 and x2, element-wise. This is a scalar if both x1 and x2 are scalars.</returns>
        </member>
        <member name="M:NumSharp.np.minimum(NumSharp.NDArray@,NumSharp.NDArray@,NumSharp.NDArray)">
            <summary>
                Element-wise minimum of array elements.
                Compare two arrays and returns a new array containing the element-wise minima.If one of the elements being compared is a NaN, then that element is returned.If both elements are NaNs then the first is returned.The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are propagated.
            </summary>
            <param name="x1">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="x2">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="out">A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated array is returned. A tuple (possible only as a keyword argument) must have length equal to the number of outputs.</param>
            <returns>The maximum of x1 and x2, element-wise. This is a scalar if both x1 and x2 are scalars.</returns>
        </member>
        <member name="M:NumSharp.np.fmin(NumSharp.NDArray@,NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Element-wise maximum of array elements.
                Compare two arrays and returns a new array containing the element-wise maxima.If one of the elements being compared is a NaN, then that element is returned.If both elements are NaNs then the first is returned.The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are propagated.
            </summary>
            <param name="x1">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="x2">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="outType"></param>
            <returns>The maximum of x1 and x2, element-wise. This is a scalar if both x1 and x2 are scalars.</returns>
        </member>
        <member name="M:NumSharp.np.fmin(NumSharp.NDArray@,NumSharp.NDArray@,System.Type)">
            <summary>
                Element-wise maximum of array elements.
                Compare two arrays and returns a new array containing the element-wise maxima.If one of the elements being compared is a NaN, then that element is returned.If both elements are NaNs then the first is returned.The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are propagated.
            </summary>
            <param name="x1">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="x2">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="outType"></param>
            <returns>The maximum of x1 and x2, element-wise. This is a scalar if both x1 and x2 are scalars.</returns>
        </member>
        <member name="M:NumSharp.np.fmin(NumSharp.NDArray@,NumSharp.NDArray@,NumSharp.NDArray)">
            <summary>
                Element-wise maximum of array elements.
                Compare two arrays and returns a new array containing the element-wise maxima.If one of the elements being compared is a NaN, then that element is returned.If both elements are NaNs then the first is returned.The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are propagated.
            </summary>
            <param name="x1">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="x2">The arrays holding the elements to be compared. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="out">A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated array is returned. A tuple (possible only as a keyword argument) must have length equal to the number of outputs.</param>
            <returns>The maximum of x1 and x2, element-wise. This is a scalar if both x1 and x2 are scalars.</returns>
        </member>
        <member name="M:NumSharp.np.modf(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Return the fractional and integral parts of an array, element-wise.
                The fractional and integral parts are negative if the given number is negative.
            </summary>
            <param name="x">Input array.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>Fractional part of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.modf.html</remarks>
        </member>
        <member name="M:NumSharp.np.modf(NumSharp.NDArray@,System.Type)">
            <summary>
                Return the fractional and integral parts of an array, element-wise.
                The fractional and integral parts are negative if the given number is negative.
            </summary>
            <param name="x">Input array.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>Fractional part of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.modf.html</remarks>
        </member>
        <member name="M:NumSharp.np.power(NumSharp.NDArray@,System.ValueType@,System.Type)">
            <summary>
                First array elements raised to powers from second array, element-wise.
            </summary>
            <param name="x1">The bases.</param>
            <param name="x2">The exponents.</param>
            <param name="dtype">The dtype of the returned NDArray</param>
            <returns>The bases in x1 raised to the exponents in x2. This is a scalar NDArray if both x1 and x2 are scalars.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.power.html</remarks>
        </member>
        <member name="M:NumSharp.np.power(NumSharp.NDArray@,System.ValueType@,NumSharp.NPTypeCode)">
            <summary>
                First array elements raised to powers from second array, element-wise.
            </summary>
            <param name="x1">The bases.</param>
            <param name="x2">The exponents.</param>
            <param name="typeCode">The dtype of the returned NDArray</param>
            <returns>The bases in x1 raised to the exponents in x2. This is a scalar NDArray if both x1 and x2 are scalars.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.power.html</remarks>
        </member>
        <member name="M:NumSharp.np.power(NumSharp.NDArray@,System.ValueType@)">
            <summary>
                First array elements raised to powers from second array, element-wise.
            </summary>
            <param name="x1">The bases.</param>
            <param name="x2">The exponents.</param>
            <returns>The bases in x1 raised to the exponents in x2. This is a scalar NDArray if both x1 and x2 are scalars.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.power.html</remarks>
        </member>
        <member name="M:NumSharp.np.square(NumSharp.NDArray@)">
            <summary>
                Return the element-wise square of the input.
            </summary>
            <param name="x">Input data.</param>
            <returns>Element-wise x*x, of the same shape and dtype as x. Returns scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.square.html</remarks>
        </member>
        <member name="M:NumSharp.np.round_(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Evenly round to the given number of decimals.
            </summary>
            <param name="x">Input array</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>An array of the same type as a, containing the rounded values. Unless out was specified, a new array is created. A reference to the result is returned.
             The real and imaginary parts of complex numbers are rounded separately.The result of rounding a float is a float.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.around.html</remarks>
        </member>
        <member name="M:NumSharp.np.round_(NumSharp.NDArray@,System.Type)">
            <summary>
                Evenly round to the given number of decimals.
            </summary>
            <param name="x">Input array</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>An array of the same type as a, containing the rounded values. Unless out was specified, a new array is created. A reference to the result is returned.
             The real and imaginary parts of complex numbers are rounded separately.The result of rounding a float is a float.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.around.html</remarks>
        </member>
        <member name="M:NumSharp.np.around(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Evenly round to the given number of decimals.
            </summary>
            <param name="x">Input array</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>An array of the same type as a, containing the rounded values. Unless out was specified, a new array is created. A reference to the result is returned.
             The real and imaginary parts of complex numbers are rounded separately.The result of rounding a float is a float.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.around.html</remarks>
        </member>
        <member name="M:NumSharp.np.around(NumSharp.NDArray@,System.Type)">
            <summary>
                Evenly round to the given number of decimals.
            </summary>
            <param name="x">Input array</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>An array of the same type as a, containing the rounded values. Unless out was specified, a new array is created. A reference to the result is returned.
             The real and imaginary parts of complex numbers are rounded separately.The result of rounding a float is a float.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.around.html</remarks>
        </member>
        <member name="M:NumSharp.np.sign(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Returns an element-wise indication of the sign of a number. <br></br>
                The sign function returns -1 if x &lt; 0, 0 if x==0, 1 if x &lt; 0. nan is returned for nan inputs.
            </summary>
            <param name="x">Angle, in radians (2 \pi rad equals 360 degrees).</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The sign of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sign.html</remarks>
        </member>
        <member name="M:NumSharp.np.sign(NumSharp.NDArray@,System.Type)">
            <summary>
                Returns an element-wise indication of the sign of a number. <br></br>
                The sign function returns -1 if x &lt; 0, 0 if x==0, 1 if x &gt; 0. nan is returned for nan inputs.
            </summary>
            <param name="x">Angle, in radians (2 \pi rad equals 360 degrees).</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The sign of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sign.html</remarks>
        </member>
        <member name="M:NumSharp.np.sin(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Trigonometric sine, element-wise.
            </summary>
            <param name="x">Angle, in radians (2 \pi rad equals 360 degrees).</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The sine of each element of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sin.html</remarks>
        </member>
        <member name="M:NumSharp.np.sin(NumSharp.NDArray@,System.Type)">
            <summary>
                Trigonometric sine, element-wise.
            </summary>
            <param name="x">Angle, in radians (2 \pi rad equals 360 degrees).</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The sine of each element of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sin.html</remarks>
        </member>
        <member name="M:NumSharp.np.sinh(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Hyperbolic sine, element-wise. <br></br>
                Equivalent to 1/2 * (np.exp(x) - np.exp(-x)) or -1j * np.sin(1j*x).
            </summary>
            <param name="x">Input array.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The sine of each element of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sinh.html</remarks>
        </member>
        <member name="M:NumSharp.np.sinh(NumSharp.NDArray@,System.Type)">
            <summary>
                Hyperbolic sine, element-wise. <br></br>
                Equivalent to 1/2 * (np.exp(x) - np.exp(-x)) or -1j * np.sin(1j*x).
            </summary>
            <param name="x">Input array.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The sine of each element of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sinh.html</remarks>
        </member>
        <member name="M:NumSharp.np.arcsin(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Inverse sine, element-wise. <br></br>
                The convention is to return the angle z whose real part lies in [-pi/2, pi/2].
            </summary>
            <param name="x">Input array.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The inverse sine of each element in x, in radians and in the closed interval [-pi/2, pi/2]. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.arcsin.html</remarks>
        </member>
        <member name="M:NumSharp.np.arcsin(NumSharp.NDArray@,System.Type)">
            <summary>
                Inverse sine, element-wise. <br></br>
                The convention is to return the angle z whose real part lies in [-pi/2, pi/2].
            </summary>
            <param name="x">Input array.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The inverse sine of each element in x, in radians and in the closed interval [-pi/2, pi/2]. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.arcsin.html</remarks>
        </member>
        <member name="M:NumSharp.np.sqrt(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Return the non-negative square-root of an array, element-wise.
            </summary>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <param name="x">The values whose square-roots are required.</param>
            <returns>An array of the same shape as x, containing the positive square-root of each element in x. If any element in x is complex, a complex array is returned (and the square-roots of negative reals are calculated). If all of the elements in x are real, so is y, with negative elements returning nan. If out was provided, y is a reference to it. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sqrt.html</remarks>
        </member>
        <member name="M:NumSharp.np.sqrt(NumSharp.NDArray@,System.Type)">
            <summary>
                Return the non-negative square-root of an array, element-wise.
            </summary>
            <param name="x">The values whose square-roots are required.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>An array of the same shape as x, containing the positive square-root of each element in x. If any element in x is complex, a complex array is returned (and the square-roots of negative reals are calculated). If all of the elements in x are real, so is y, with negative elements returning nan. If out was provided, y is a reference to it. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sqrt.html</remarks>
        </member>
        <member name="M:NumSharp.np.sum(NumSharp.NDArray@)">
            <summary>
                Sum of array elements over a given axis.
            </summary>
            <param name="a">Elements to sum.</param>
            <returns>An array with the same shape as a, with the specified axis removed. If a is a 0-d array, or if axis is None, a scalar is returned. If an output array is specified, a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html</remarks>
        </member>
        <member name="M:NumSharp.np.sum(NumSharp.NDArray@,System.Int32)">
            <summary>
                Sum of array elements over a given axis.
            </summary>
            <param name="a">Elements to sum.</param>
            <param name="axis">Axis or axes along which a sum is performed. The default, axis=None, will sum all of the elements of the input array. If axis is negative it counts from the last to the first axis. </param>
            <returns>An array with the same shape as a, with the specified axis removed. If a is a 0-d array, or if axis is None, a scalar is returned. If an output array is specified, a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html</remarks>
        </member>
        <member name="M:NumSharp.np.sum(NumSharp.NDArray@,System.Boolean)">
            <summary>
                Sum of array elements over a given axis.
            </summary>
            <param name="a">Elements to sum.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array. If the default value is passed, then keepdims will not be passed through to the sum method of sub-classes of ndarray, however any non-default value will be.If the sub-class’ method does not implement keepdims any exceptions will be raised.</param>
            <returns>An array with the same shape as a, with the specified axis removed. If a is a 0-d array, or if axis is None, a scalar is returned. If an output array is specified, a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html</remarks>
        </member>
        <member name="M:NumSharp.np.sum(NumSharp.NDArray@,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Sum of array elements over a given axis.
            </summary>
            <param name="a">Elements to sum.</param>
            <param name="axis">Axis or axes along which a sum is performed. The default, axis=None, will sum all of the elements of the input array. If axis is negative it counts from the last to the first axis. </param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array. If the default value is passed, then keepdims will not be passed through to the sum method of sub-classes of ndarray, however any non-default value will be.If the sub-class’ method does not implement keepdims any exceptions will be raised.</param>
            <returns>An array with the same shape as a, with the specified axis removed. If a is a 0-d array, or if axis is None, a scalar is returned. If an output array is specified, a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html</remarks>
        </member>
        <member name="M:NumSharp.np.sum(NumSharp.NDArray@,System.Nullable{System.Int32},System.Boolean,System.Type)">
            <summary>
                Sum of array elements over a given axis.
            </summary>
            <param name="a">Elements to sum.</param>
            <param name="axis">Axis or axes along which a sum is performed. The default, axis=None, will sum all of the elements of the input array. If axis is negative it counts from the last to the first axis. </param>
            <param name="dtype">The type of the returned array and of the accumulator in which the elements are summed. The dtype of a is used by default unless a has an integer dtype of less precision than the default platform integer. In that case, if a is signed then the platform integer is used while if a is unsigned then an unsigned integer of the same precision as the platform integer is used.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array. If the default value is passed, then keepdims will not be passed through to the sum method of sub-classes of ndarray, however any non-default value will be.If the sub-class’ method does not implement keepdims any exceptions will be raised.</param>
            <returns>An array with the same shape as a, with the specified axis removed. If a is a 0-d array, or if axis is None, a scalar is returned. If an output array is specified, a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html</remarks>
        </member>
        <member name="M:NumSharp.np.sum(NumSharp.NDArray@,System.Nullable{System.Int32},System.Boolean,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Sum of array elements over a given axis.
            </summary>
            <param name="a">Elements to sum.</param>
            <param name="axis">Axis or axes along which a sum is performed. The default, axis=None, will sum all of the elements of the input array. If axis is negative it counts from the last to the first axis. </param>
            <param name="typeCode">The type of the returned array and of the accumulator in which the elements are summed. The dtype of a is used by default unless a has an integer dtype of less precision than the default platform integer. In that case, if a is signed then the platform integer is used while if a is unsigned then an unsigned integer of the same precision as the platform integer is used.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array. If the default value is passed, then keepdims will not be passed through to the sum method of sub-classes of ndarray, however any non-default value will be.If the sub-class’ method does not implement keepdims any exceptions will be raised.</param>
            <returns>An array with the same shape as a, with the specified axis removed. If a is a 0-d array, or if axis is None, a scalar is returned. If an output array is specified, a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html</remarks>
        </member>
        <member name="M:NumSharp.np.sum(NumSharp.NDArray@,System.Nullable{System.Int32},System.Type)">
            <summary>
                Sum of array elements over a given axis.
            </summary>
            <param name="a">Elements to sum.</param>
            <param name="axis">Axis or axes along which a sum is performed. The default, axis=None, will sum all of the elements of the input array. If axis is negative it counts from the last to the first axis. </param>
            <param name="dtype">The type of the returned array and of the accumulator in which the elements are summed. The dtype of a is used by default unless a has an integer dtype of less precision than the default platform integer. In that case, if a is signed then the platform integer is used while if a is unsigned then an unsigned integer of the same precision as the platform integer is used.</param>
            <returns>An array with the same shape as a, with the specified axis removed. If a is a 0-d array, or if axis is None, a scalar is returned. If an output array is specified, a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html</remarks>
        </member>
        <member name="M:NumSharp.np.sum(NumSharp.NDArray@,System.Nullable{System.Int32},System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Sum of array elements over a given axis.
            </summary>
            <param name="a">Elements to sum.</param>
            <param name="axis">Axis or axes along which a sum is performed. The default, axis=None, will sum all of the elements of the input array. If axis is negative it counts from the last to the first axis. </param>
            <param name="typeCode">The type of the returned array and of the accumulator in which the elements are summed. The dtype of a is used by default unless a has an integer dtype of less precision than the default platform integer. In that case, if a is signed then the platform integer is used while if a is unsigned then an unsigned integer of the same precision as the platform integer is used.</param>
            <returns>An array with the same shape as a, with the specified axis removed. If a is a 0-d array, or if axis is None, a scalar is returned. If an output array is specified, a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html</remarks>
        </member>
        <member name="M:NumSharp.np.sum(NumSharp.NDArray@,System.Type)">
            <summary>
                Sum of array elements over a given axis.
            </summary>
            <param name="a">Elements to sum.</param>
            <param name="dtype">The type of the returned array and of the accumulator in which the elements are summed. The dtype of a is used by default unless a has an integer dtype of less precision than the default platform integer. In that case, if a is signed then the platform integer is used while if a is unsigned then an unsigned integer of the same precision as the platform integer is used.</param>
            <returns>An array with the same shape as a, with the specified axis removed. If a is a 0-d array, or if axis is None, a scalar is returned. If an output array is specified, a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html</remarks>
        </member>
        <member name="M:NumSharp.np.sum(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Sum of array elements over a given axis.
            </summary>
            <param name="a">Elements to sum.</param>
            <param name="typeCode">The type of the returned array and of the accumulator in which the elements are summed. The dtype of a is used by default unless a has an integer dtype of less precision than the default platform integer. In that case, if a is signed then the platform integer is used while if a is unsigned then an unsigned integer of the same precision as the platform integer is used.</param>
            <returns>An array with the same shape as a, with the specified axis removed. If a is a 0-d array, or if axis is None, a scalar is returned. If an output array is specified, a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html</remarks>
        </member>
        <member name="M:NumSharp.np.tan(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Compute tangent element-wise. <br></br>
                Equivalent to np.sin(x)/np.cos(x) element-wise.
            </summary>
            <param name="x">Angle, in radians (2 \pi rad equals 360 degrees).</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The sine of each element of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.tan.html</remarks>
        </member>
        <member name="M:NumSharp.np.tan(NumSharp.NDArray@,System.Type)">
            <summary>
                Trigonometric sine, element-wise.
            </summary>
            <param name="x">Angle, in radians (2 \pi rad equals 360 degrees).</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The sine of each element of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.tan.html</remarks>
        </member>
        <member name="M:NumSharp.np.tanh(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Compute hyperbolic tangent element-wise. <br></br>
                Equivalent to np.sinh(x)/np.cosh(x) or -1j * np.tan(1j*x).
            </summary>
            <param name="x">Input array.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The sine of each element of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.tanh.html</remarks>
        </member>
        <member name="M:NumSharp.np.tanh(NumSharp.NDArray@,System.Type)">
            <summary>
                Compute hyperbolic tangent element-wise. <br></br>
                Equivalent to np.sinh(x)/np.cosh(x) or -1j * np.tan(1j*x).
            </summary>
            <param name="x">Input array.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The sine of each element of x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.tanh.html</remarks>
        </member>
        <member name="M:NumSharp.np.arctan(NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Compute trigonometric inverse tangent, element-wise. <br></br>
                The inverse of tan, so that if y = tan(x) then x = arctan(y).
            </summary>
            <param name="x">Input array.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>Return has the same shape as x. Its real part is in [-pi/2, pi/2] (arctan(+/-inf) returns +/-pi/2). This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.arctan.html</remarks>
        </member>
        <member name="M:NumSharp.np.arctan(NumSharp.NDArray@,System.Type)">
            <summary>
                Compute trigonometric inverse tangent, element-wise. <br></br>
                The inverse of tan, so that if y = tan(x) then x = arctan(y).
            </summary>
            <param name="x">Input array.</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>Return has the same shape as x. Its real part is in [-pi/2, pi/2] (arctan(+/-inf) returns +/-pi/2). This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.arctan.html</remarks>
        </member>
        <member name="M:NumSharp.np.arctan2(NumSharp.NDArray@,NumSharp.NDArray@,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Compute Element-wise arc tangent of x1/x2 choosing the quadrant correctly. <br></br>
                By IEEE convention, this function is defined for x2 = +/-0 and for either or both of x1 and x2 = +/-inf
            </summary>
            <param name="x">Input array y-coordinates.</param>
            <param name="y">x-coordinates. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The Array of angles in radians, in the range [-pi, pi]. This is a scalar if both x1 and x2 are scalars.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.arctan2.html</remarks>
        </member>
        <member name="M:NumSharp.np.arctan2(NumSharp.NDArray@,NumSharp.NDArray@,System.Type)">
            <summary>
                Compute Element-wise arc tangent of x1/x2 choosing the quadrant correctly. <br></br>
                By IEEE convention, this function is defined for x2 = +/-0 and for either or both of x1 and x2 = +/-inf
            </summary>
            <param name="x">Input array y-coordinates.</param>
            <param name="y">x-coordinates. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).</param>
            <param name="outType">The dtype the returned ndarray should be of, only non integer values are supported.</param>
            <returns>The Array of angles in radians, in the range [-pi, pi]. This is a scalar if both x1 and x2 are scalars.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.arctan2.html</remarks>
        </member>
        <member name="M:NumSharp.np.amax``1(NumSharp.NDArray)">
            <summary>
                Return the maximum of an array or maximum along an axis.
            </summary>
            <typeparam name="T">the type expected as a return, cast is performed if necessary.</typeparam>
            <returns>Maximum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html</remarks>
        </member>
        <member name="M:NumSharp.np.amax(NumSharp.NDArray,System.Nullable{System.Int32},System.Boolean,System.Type)">
            <summary>
                Return the maximum of an array or maximum along an axis.
            </summary>
            <param name="a"></param>
            <param name="axis">Axis or axes along which to operate.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.</param>
            <param name="dtype">the type expected as a return, null will remain the same dtype.</param>
            <returns>Maximum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html</remarks>
        </member>
        <member name="M:NumSharp.np.max(NumSharp.NDArray,System.Nullable{System.Int32},System.Boolean,System.Type)">
            <summary>
                Return the maximum of an array or maximum along an axis.
            </summary>
            <param name="a"></param>
            <param name="axis">Axis or axes along which to operate.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.</param>
            <param name="dtype">the type expected as a return, null will remain the same dtype.</param>
            <returns>Maximum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html</remarks>
        </member>
        <member name="M:NumSharp.np.argmax(NumSharp.NDArray,System.Int32)">
            <summary>
                Returns the indices of the maximum values along an axis.
            </summary>
            <param name="a">Input array.</param>
            <param name="axis">By default, the index is into the flattened array, otherwise along the specified axis.</param>
            <returns>Array of indices into the array. It has the same shape as a.shape with the dimension along axis removed.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmax.html</remarks>
        </member>
        <member name="M:NumSharp.np.argmax(NumSharp.NDArray)">
            <summary>
                Returns the index of the maximum value.
            </summary>
            <param name="a">Input array.</param>
            <returns>Array of indices into the array. It has the same shape as a.shape with the dimension along axis removed.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmax.html</remarks>
        </member>
        <member name="M:NumSharp.np.argmin(NumSharp.NDArray,System.Int32)">
            <summary>
                Returns the indices of the minimum values along an axis.
            </summary>
            <param name="a">Input array.</param>
            <param name="axis">By default, the index is into the flattened array, otherwise along the specified axis.</param>
            <returns>Array of indices into the array. It has the same shape as a.shape with the dimension along axis removed.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmin.html</remarks>
        </member>
        <member name="M:NumSharp.np.argmin(NumSharp.NDArray)">
            <summary>
                Returns the index of the minimum value.
            </summary>
            <param name="a">Input array.</param>
            <returns>Array of indices into the array. It has the same shape as a.shape with the dimension along axis removed.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmin.html</remarks>
        </member>
        <member name="M:NumSharp.np.argsort``1(NumSharp.NDArray,System.Int32)">
             <summary>
             Returns the indices that would sort an array.
            
             Perform an indirect sort along the given axis using the algorithm specified by the kind keyword.It returns an array of indices of the same shape as a that index data along the given axis in sorted order.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="nd"></param>
             <param name="axis"></param>
             <returns></returns>
        </member>
        <member name="M:NumSharp.np.amin``1(NumSharp.NDArray@)">
            <summary>
                Return the minimum of an array or minimum along an axis.
            </summary>
            <param name="a">Input data. </param>
            <typeparam name="T">the type expected as a return, cast is performed if necessary.</typeparam>
            <returns>Minimum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amin.html</remarks>
        </member>
        <member name="M:NumSharp.np.amin(NumSharp.NDArray@,System.Nullable{System.Int32},System.Boolean,System.Type)">
            <summary>
                Return the minimum of an array or minimum along an axis.
            </summary>
            <param name="a">Input data. </param>
            <param name="axis">Axis or axes along which to operate. </param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.</param>
            <param name="dtype">the type expected as a return, null will remain the same dtype.</param>
            <returns>Minimum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amin.html</remarks>
        </member>
        <member name="M:NumSharp.np.min(NumSharp.NDArray@,System.Nullable{System.Int32},System.Boolean,System.Type)">
            <summary>
                Return the minimum of an array or minimum along an axis.
            </summary>
            <param name="a">Input data. </param>
            <param name="axis">Axis or axes along which to operate. </param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.</param>
            <param name="dtype">the type expected as a return, null will remain the same dtype.</param>
            <returns>Minimum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amin.html</remarks>
        </member>
        <member name="M:NumSharp.np.searchsorted(NumSharp.NDArray,NumSharp.NDArray)">
             <summary>
             Find indices where elements should be inserted to maintain order.
            
             Find the indices into a sorted array a such that, if the corresponding elements in v were inserted before the indices, the order of a would be preserved.
             </summary>
             <param name="a">Input array. Must be sorted in ascending order.</param>
             <param name="v">Values to insert into a.</param>
             <returns>Array of insertion points with the same shape as v.</returns>
             <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.searchsorted.html</remarks>
        </member>
        <member name="M:NumSharp.np.binarySearchRightmost(NumSharp.NDArray,System.Double)">
            <summary>
            Find the (right-most) position of a target value within a sorted array.
            </summary>
            <param name="arr">Sorted array.</param>
            <param name="target">Target value to find position of.</param>
            <returns>Would-be index of target value within the array.</returns>
            <remarks>https://en.wikipedia.org/wiki/Binary_search_algorithm</remarks>
        </member>
        <member name="M:NumSharp.np.exp(NumSharp.NDArray@,System.Type)">
            <summary>
                Base-e exponential, element-wise.
            </summary>
            <param name="a">Input value.</param>
            <param name="dtype">The dtype of the returned NDArray</param>
            <returns>The natural logarithm of x, element-wise. This is a scalar NDArray.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.exp.html</remarks>
        </member>
        <member name="M:NumSharp.np.exp(NumSharp.NDArray@,NumSharp.NPTypeCode)">
            <summary>
                Base-e exponential, element-wise.
            </summary>
            <param name="a">Input value.</param>
            <param name="typeCode">The dtype of the returned NDArray</param>
            <returns>The natural logarithm of x, element-wise. This is a scalar NDArray.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.exp.html</remarks>
        </member>
        <member name="M:NumSharp.np.exp(NumSharp.NDArray@)">
            <summary>
                Base-e exponential, element-wise.
            </summary>
            <param name="a">Input value.</param>
            <returns>The natural logarithm of x, element-wise. This is a scalar NDArray.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.exp.html</remarks>
        </member>
        <member name="M:NumSharp.np.exp2(NumSharp.NDArray@,System.Type)">
            <summary>
                Calculate 2**p for all p in the input array.
            </summary>
            <param name="a">Input value.</param>
            <param name="dtype"></param>
            <returns>Element-wise 2 to the power x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.exp2.html</remarks>
        </member>
        <member name="M:NumSharp.np.exp2(NumSharp.NDArray@,NumSharp.NPTypeCode)">
            <summary>
                Calculate 2**p for all p in the input array.
            </summary>
            <param name="a">Input value.</param>
            <param name="typeCode"></param>
            <returns>Element-wise 2 to the power x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.exp2.html</remarks>
        </member>
        <member name="M:NumSharp.np.exp2(NumSharp.NDArray@)">
            <summary>
                Calculate 2**p for all p in the input array.
            </summary>
            <param name="a">Input value.</param>
            <returns>Element-wise 2 to the power x. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.exp2.html</remarks>
        </member>
        <member name="M:NumSharp.np.expm1(NumSharp.NDArray@,System.Type)">
            <summary>
                Calculate exp(x) - 1 for all elements in the array.
            </summary>
            <param name="a">Input value.</param>
            <param name="dtype"></param>
            <returns>Element-wise exponential minus one: out = exp(x) - 1. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.expm1.html</remarks>
        </member>
        <member name="M:NumSharp.np.expm1(NumSharp.NDArray@,NumSharp.NPTypeCode)">
            <summary>
                Calculate exp(x) - 1 for all elements in the array.
            </summary>
            <param name="a">Input value.</param>
            <param name="typeCode"></param>
            <returns>Element-wise exponential minus one: out = exp(x) - 1. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.expm1.html</remarks>
        </member>
        <member name="M:NumSharp.np.expm1(NumSharp.NDArray@)">
            <summary>
                Calculate exp(x) - 1 for all elements in the array.
            </summary>
            <param name="a">Input value.</param>
            <returns>Element-wise exponential minus one: out = exp(x) - 1. This is a scalar if x is a scalar.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.expm1.html</remarks>
        </member>
        <member name="M:NumSharp.np.mean(NumSharp.NDArray@)">
            <summary>
                Compute the arithmetic mean along the specified axis.
                Returns the average of the array elements.
                The average is taken over the flattened array by default, otherwise over the specified axis.
                float64 intermediate and return values are used for integer inputs.
            </summary>
            <param name="a">Array containing numbers whose mean is desired. If a is not an array, a conversion is attempted.</param>
            <returns> returns a new array containing the mean values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html</remarks>
        </member>
        <member name="M:NumSharp.np.mean(NumSharp.NDArray@,System.Int32)">
            <summary>
                Compute the arithmetic mean along the specified axis.
                Returns the average of the array elements.
                The average is taken over the flattened array by default, otherwise over the specified axis.
                float64 intermediate and return values are used for integer inputs.
            </summary>
            <param name="a">Array containing numbers whose mean is desired. If a is not an array, a conversion is attempted.</param>
            <param name="axis">Axis or axes along which the means are computed. The default is to compute the mean of the flattened array.</param>
            <returns> returns a new array containing the mean values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html</remarks>
        </member>
        <member name="M:NumSharp.np.mean(NumSharp.NDArray@,System.Boolean)">
            <summary>
                Compute the arithmetic mean along the specified axis.
                Returns the average of the array elements.
                The average is taken over the flattened array by default, otherwise over the specified axis.
                float64 intermediate and return values are used for integer inputs.
            </summary>
            <param name="a">Array containing numbers whose mean is desired. If a is not an array, a conversion is attempted.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
                If the default value is passed, then keepdims will not be passed through to the mean method of sub-classes of ndarray, however any non-default value will be.If the sub-class’ method does not implement keepdims any exceptions will be raised.
            </param>
            <returns> returns a new array containing the mean values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html</remarks>
        </member>
        <member name="M:NumSharp.np.mean(NumSharp.NDArray@,System.Int32,System.Type,System.Boolean)">
            <summary>
                Compute the arithmetic mean along the specified axis.
                Returns the average of the array elements.
                The average is taken over the flattened array by default, otherwise over the specified axis.
                float64 intermediate and return values are used for integer inputs.
            </summary>
            <param name="a">Array containing numbers whose mean is desired. If a is not an array, a conversion is attempted.</param>
            <param name="axis">Axis or axes along which the means are computed. The default is to compute the mean of the flattened array.</param>
            <param name="dtype">Type to use in computing the mean. For integer inputs, the default is float64; for floating point inputs, it is the same as the input dtype.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
                If the default value is passed, then keepdims will not be passed through to the mean method of sub-classes of ndarray, however any non-default value will be.If the sub-class’ method does not implement keepdims any exceptions will be raised.
            </param>
            <returns> returns a new array containing the mean values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html</remarks>
        </member>
        <member name="M:NumSharp.np.mean(NumSharp.NDArray@,System.Int32,NumSharp.NPTypeCode,System.Boolean)">
            <summary>
                Compute the arithmetic mean along the specified axis.
                Returns the average of the array elements.
                The average is taken over the flattened array by default, otherwise over the specified axis.
                float64 intermediate and return values are used for integer inputs.
            </summary>
            <param name="a">Array containing numbers whose mean is desired. If a is not an array, a conversion is attempted.</param>
            <param name="axis">Axis or axes along which the means are computed. The default is to compute the mean of the flattened array.</param>
            <param name="type">Type to use in computing the mean. For integer inputs, the default is float64; for floating point inputs, it is the same as the input dtype.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
                If the default value is passed, then keepdims will not be passed through to the mean method of sub-classes of ndarray, however any non-default value will be.If the sub-class’ method does not implement keepdims any exceptions will be raised.
            </param>
            <returns> returns a new array containing the mean values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html</remarks>
        </member>
        <member name="M:NumSharp.np.mean(NumSharp.NDArray@,System.Int32,System.Boolean)">
            <summary>
                Compute the arithmetic mean along the specified axis.
                Returns the average of the array elements.
                The average is taken over the flattened array by default, otherwise over the specified axis.
                float64 intermediate and return values are used for integer inputs.
            </summary>
            <param name="a">Array containing numbers whose mean is desired. If a is not an array, a conversion is attempted.</param>
            <param name="axis">Axis or axes along which the means are computed. The default is to compute the mean of the flattened array.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
                If the default value is passed, then keepdims will not be passed through to the mean method of sub-classes of ndarray, however any non-default value will be.If the sub-class’ method does not implement keepdims any exceptions will be raised.
            </param>
            <returns> returns a new array containing the mean values, otherwise a reference to the output array is returned.</returns>
        </member>
        <member name="M:NumSharp.np.std(NumSharp.NDArray,System.Boolean,System.Nullable{System.Int32},System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Compute the standard deviation along the specified axis.
                Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="a">Calculate the standard deviation of these values.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
            </param>
            <param name="dtype"></param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <returns> returns a new array containing the std values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html</remarks>
        </member>
        <member name="M:NumSharp.np.std(NumSharp.NDArray@,System.Nullable{System.Int32})">
            <summary>
                Compute the standard deviation along the specified axis.
                Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="a">Calculate the standard deviation of these values.</param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <returns> returns a new array containing the std values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html</remarks>
        </member>
        <member name="M:NumSharp.np.std(NumSharp.NDArray@,System.Int32,System.Nullable{System.Int32})">
            <summary>
                Compute the standard deviation along the specified axis.
                Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="a">Calculate the standard deviation of these values.</param>
            <param name="axis">Axis or axes along which the standard deviation is computed. The default is to compute the standard deviation of the flattened array.</param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <returns> returns a new array containing the std values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html</remarks>
        </member>
        <member name="M:NumSharp.np.std(NumSharp.NDArray@,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Compute the standard deviation along the specified axis.
                Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="a">Calculate the standard deviation of these values.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
            </param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <returns> returns a new array containing the std values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html</remarks>
        </member>
        <member name="M:NumSharp.np.std(NumSharp.NDArray@,System.Int32,System.Type,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Compute the standard deviation along the specified axis.
                Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="a">Calculate the standard deviation of these values.</param>
            <param name="axis">Axis or axes along which the standard deviation is computed. The default is to compute the standard deviation of the flattened array.</param>
            <param name="dtype"></param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
            </param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <returns> returns a new array containing the std values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html</remarks>
        </member>
        <member name="M:NumSharp.np.std(NumSharp.NDArray@,System.Int32,NumSharp.NPTypeCode,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Compute the standard deviation along the specified axis.
                Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="a">Calculate the standard deviation of these values.</param>
            <param name="axis">Axis or axes along which the standard deviation is computed. The default is to compute the standard deviation of the flattened array.</param>
            <param name="type"></param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
            </param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <returns> returns a new array containing the std values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html</remarks>
        </member>
        <member name="M:NumSharp.np.std(NumSharp.NDArray@,System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Compute the standard deviation along the specified axis.
                Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="a">Calculate the standard deviation of these values.</param>
            <param name="axis">Axis or axes along which the standard deviation is computed. The default is to compute the standard deviation of the flattened array.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
            </param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <returns> returns a new array containing the std values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html</remarks>
        </member>
        <member name="M:NumSharp.np.std(NumSharp.NDArray,System.Int32,System.Boolean,System.Nullable{System.Int32},System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Compute the standard deviation along the specified axis.
                Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="a">Calculate the standard deviation of these values.</param>
            <param name="axis">Axis or axes along which the standard deviation is computed. The default is to compute the standard deviation of the flattened array.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
            </param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <param name="dtype"></param>
            <returns> returns a new array containing the std values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html</remarks>
        </member>
        <member name="M:NumSharp.np.var(NumSharp.NDArray,System.Boolean,System.Nullable{System.Int32},System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Compute the variance along the specified axis.
                Returns the variance of the array elements, a measure of the spread of a distribution.
                The variance is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="a">Array containing numbers whose variance is desired. If a is not an array, a conversion is attempted.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one.
                With this option, the result will broadcast correctly against the input array.
            </param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <param name="dtype"></param>
            <returns> returns a new array containing the var values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.var.html</remarks>
        </member>
        <member name="M:NumSharp.np.var(NumSharp.NDArray@,System.Nullable{System.Int32})">
            <summary>
                Compute the variance along the specified axis.
                Returns the variance of the array elements, a measure of the spread of a distribution.
                The variance is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="a">Array containing numbers whose variance is desired. If a is not an array, a conversion is attempted.</param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <returns> returns a new array containing the var values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.var.html</remarks>
        </member>
        <member name="M:NumSharp.np.var(NumSharp.NDArray@,System.Int32,System.Nullable{System.Int32})">
            <summary>
                Compute the variance along the specified axis.
                Returns the variance of the array elements, a measure of the spread of a distribution.
                The variance is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="a">Array containing numbers whose variance is desired. If a is not an array, a conversion is attempted.</param>
            <param name="axis">Axis or axes along which the variance is computed. The default is to compute the variance of the flattened array.</param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <returns> returns a new array containing the var values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.var.html</remarks>
        </member>
        <member name="M:NumSharp.np.var(NumSharp.NDArray@,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Compute the variance along the specified axis.
                Returns the variance of the array elements, a measure of the spread of a distribution.
                The variance is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="a">Array containing numbers whose variance is desired. If a is not an array, a conversion is attempted.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one.
                With this option, the result will broadcast correctly against the input array.
            </param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <returns> returns a new array containing the var values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.var.html</remarks>
        </member>
        <member name="M:NumSharp.np.var(NumSharp.NDArray@,System.Int32,System.Type,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Compute the variance along the specified axis.
                Returns the variance of the array elements, a measure of the spread of a distribution.
                The variance is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="a">Array containing numbers whose variance is desired. If a is not an array, a conversion is attempted.</param>
            <param name="axis">Axis or axes along which the variance is computed. The default is to compute the variance of the flattened array.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one.
                With this option, the result will broadcast correctly against the input array.
            </param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <param name="dtype"></param>
            <returns> returns a new array containing the var values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.var.html</remarks>
        </member>
        <member name="M:NumSharp.np.var(NumSharp.NDArray@,System.Int32,NumSharp.NPTypeCode,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Compute the variance along the specified axis.
                Returns the variance of the array elements, a measure of the spread of a distribution.
                The variance is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="a">Array containing numbers whose variance is desired. If a is not an array, a conversion is attempted.</param>
            <param name="axis">Axis or axes along which the variance is computed. The default is to compute the variance of the flattened array.</param>
            <param name="type"></param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one.
                With this option, the result will broadcast correctly against the input array.
            </param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <returns> returns a new array containing the var values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.var.html</remarks>
        </member>
        <member name="M:NumSharp.np.var(NumSharp.NDArray@,System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Compute the variance along the specified axis.
                Returns the variance of the array elements, a measure of the spread of a distribution.
                The variance is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="a">Array containing numbers whose variance is desired. If a is not an array, a conversion is attempted.</param>
            <param name="axis">Axis or axes along which the variance is computed. The default is to compute the variance of the flattened array.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one.
                With this option, the result will broadcast correctly against the input array.
            </param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <returns> returns a new array containing the var values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.var.html</remarks>
        </member>
        <member name="M:NumSharp.np.var(NumSharp.NDArray,System.Int32,System.Boolean,System.Nullable{System.Int32},System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Compute the variance along the specified axis.
                Returns the variance of the array elements, a measure of the spread of a distribution.
                The variance is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="a">Array containing numbers whose variance is desired. If a is not an array, a conversion is attempted.</param>
            <param name="axis">Axis or axes along which the variance is computed. The default is to compute the variance of the flattened array.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one.
                With this option, the result will broadcast correctly against the input array.
            </param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <param name="dtype"></param>
            <returns> returns a new array containing the var values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.var.html</remarks>
        </member>
        <member name="T:NumSharp.NDArray">
            <summary>
                An array object represents a multidimensional, homogeneous array of fixed-size items.<br></br>
                An associated data-type object describes the format of each element in the array (its byte-order,<br></br>
                how many bytes it occupies in memory, whether it is an integer, a floating point number, or something else, etc.)
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.tofile(System.String)">
            <summary>
                Write array to a file as text or binary (default).<br></br>
                Data is always written in ‘C’ order, independent of the order of a. <br></br>The data produced by this method can be recovered using the function fromfile().
            </summary>
            <param name="fid">An open file object, or a string containing a filename.</param>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.tofile.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.CopyTo(NumSharp.Backends.Unmanaged.IMemoryBlock)">
            <summary>
                Copies the entire contents of this storage to given address.
            </summary>
            <param name="slice">The slice to copy to.</param>
        </member>
        <member name="M:NumSharp.NDArray.CopyTo(System.Void*)">
            <summary>
                Copies the entire contents of this storage to given address.
            </summary>
            <param name="address">The address to copy to.</param>
        </member>
        <member name="M:NumSharp.NDArray.CopyTo``1(``0[])">
            <summary>
                Copies the entire contents of this storage to given array.
            </summary>
            <param name="array">The array to copy to.</param>
        </member>
        <member name="M:NumSharp.NDArray.CopyTo(System.IntPtr)">
            <summary>
                Copies the entire contents of this storage to given address.
            </summary>å
        </member>
        <member name="M:NumSharp.NDArray.CopyTo``1(NumSharp.Backends.Unmanaged.IMemoryBlock{``0})">
            <summary>
                Copies the entire contents of this storage to given address .
            </summary>
            <param name="block">The slice to copy to.</param>
        </member>
        <member name="M:NumSharp.NDArray.CopyTo``1(``0*)">
            <summary>
                Copies the entire contents of this storage to given address.
            </summary>
            <param name="address">The address to copy to.</param>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(NumSharp.Backends.UnmanagedStorage)">
            <summary>
                Creates a new <see cref="T:NumSharp.NDArray"/> with this storage.
            </summary>
            <param name="storage"></param>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(NumSharp.Backends.UnmanagedStorage,NumSharp.Shape)">
            <summary>
                Creates a new <see cref="T:NumSharp.NDArray"/> with this storage.
            </summary>
            <param name="storage"></param>
            <param name="shape">The shape to set for this NDArray, does not perform checks.</param>
            <remarks>Doesn't copy. Does not perform checks for <paramref name="shape"/>.</remarks>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(NumSharp.Backends.UnmanagedStorage,NumSharp.Shape@)">
            <summary>
                Creates a new <see cref="T:NumSharp.NDArray"/> with this storage.
            </summary>
            <param name="storage"></param>
            <param name="shape">The shape to set for this NDArray, does not perform checks.</param>
            <remarks>Doesn't copy. Does not perform checks for <paramref name="shape"/>.</remarks>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(System.Type,NumSharp.TensorEngine)">
            <summary>
            Constructor for init data type
            internal storage is 1D with 1 element
            </summary>
            <param name="dtype">Data type of elements</param>
            <param name="engine">The engine of this <see cref="T:NumSharp.NDArray"/></param>
            <remarks>This constructor does not call allocation/></remarks>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(NumSharp.NPTypeCode,NumSharp.TensorEngine)">
            <summary>
            Constructor for init data type
            internal storage is 1D with 1 element
            </summary>
            <param name="typeCode">Data type of elements</param>
            <param name="engine">The engine of this <see cref="T:NumSharp.NDArray"/></param>
            <remarks>This constructor does not call allocation/></remarks>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(System.Type)">
            <summary>
            Constructor for init data type
            internal storage is 1D with 1 element
            </summary>
            <param name="dtype">Data type of elements</param>
            <remarks>This constructor does not call allocation/></remarks>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(NumSharp.NPTypeCode)">
            <summary>
            Constructor for init data type
            internal storage is 1D with 1 element
            </summary>
            <param name="typeCode">Data type of elements</param>
            <remarks>This constructor does not call allocation/></remarks>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(System.Array,NumSharp.Shape,System.Char)">
            <summary>
            Constructor which takes .NET array
            dtype and shape is determined from array
            </summary>
            <param name="values"></param>
            <param name="shape"></param>
            <param name="order"></param>
            <returns>Array with values</returns>
            <remarks>This constructor calls <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Backends.Unmanaged.IArraySlice,NumSharp.Shape,System.Boolean)"/></remarks>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(NumSharp.Backends.Unmanaged.IArraySlice,NumSharp.Shape,System.Char)">
            <summary>
            Constructor which takes .NET array
            dtype and shape is determined from array
            </summary>
            <param name="values"></param>
            <param name="shape"></param>
            <param name="order"></param>
            <returns>Array with values</returns>
            <remarks>This constructor calls <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/></remarks>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(System.Type,NumSharp.Shape)">
            <summary>
            Constructor which initialize elements with 0
            type and shape are given.
            </summary>
            <param name="dtype">internal data type</param>
            <param name="shape">Shape of NDArray</param>
            <remarks>This constructor calls <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/></remarks>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(System.Type,System.Int32)">
            <summary>
                Constructor which initialize elements with length of <paramref name="size"/>
            </summary>
            <param name="dtype">Internal data type</param>
            <param name="size">The size as a single dimension shape</param>
            <remarks>This constructor calls <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/></remarks>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(System.Type,System.Int32,System.Boolean)">
            <summary>
                Constructor which initialize elements with length of <paramref name="size"/>
            </summary>
            <param name="dtype">Internal data type</param>
            <param name="size">The size as a single dimension shape</param>
            <param name="fillZeros">Should set the values of the new allocation to default(dtype)? otherwise - old memory noise</param>
            <remarks>This constructor calls <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/></remarks>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(NumSharp.NPTypeCode,NumSharp.Shape)">
            <summary>
            Constructor which initialize elements with 0
            type and shape are given.
            </summary>
            <param name="dtype">internal data type</param>
            <param name="shape">Shape of NDArray</param>
            <remarks>This constructor calls <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/></remarks>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(NumSharp.NPTypeCode,System.Int32)">
            <summary>
                Constructor which initialize elements with length of <paramref name="size"/>
            </summary>
            <param name="dtype">Internal data type</param>
            <param name="size">The size as a single dimension shape</param>
            <remarks>This constructor calls <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/></remarks>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(NumSharp.NPTypeCode,System.Int32,System.Boolean)">
            <summary>
                Constructor which initialize elements with length of <paramref name="size"/>
            </summary>
            <param name="dtype">Internal data type</param>
            <param name="size">The size as a single dimension shape</param>
            <param name="fillZeros">Should set the values of the new allocation to default(dtype)? otherwise - old memory noise</param>
            <remarks>This constructor calls <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/></remarks>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(System.Type,NumSharp.Shape,System.Boolean)">
            <summary>
            Constructor which initialize elements with 0
            type and shape are given.
            </summary>
            <param name="dtype">internal data type</param>
            <param name="shape">Shape of NDArray</param>
            <param name="fillZeros">Should set the values of the new allocation to default(dtype)? otherwise - old memory noise</param>
            <remarks>This constructor calls <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/></remarks>
        </member>
        <member name="M:NumSharp.NDArray.#ctor(NumSharp.NPTypeCode,NumSharp.Shape,System.Boolean)">
            <summary>
            Constructor which initialize elements with 0
            type and shape are given.
            </summary>
            <param name="dtype">internal data type</param>
            <param name="shape">Shape of NDArray</param>
            <param name="fillZeros">Should set the values of the new allocation to default(dtype)? otherwise - old memory noise</param>
            <remarks>This constructor calls <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/></remarks>
        </member>
        <member name="P:NumSharp.NDArray.dtype">
            <summary>
                The dtype of this array.
            </summary>
        </member>
        <member name="P:NumSharp.NDArray.typecode">
            <summary>
                The <see cref="T:NumSharp.NPTypeCode"/> of this array.
            </summary>
        </member>
        <member name="P:NumSharp.NDArray.GetTypeCode">
            <summary>
                Gets the precomputed <see cref="T:NumSharp.NPTypeCode"/> of <see cref="P:NumSharp.NDArray.dtype"/>.
            </summary>
        </member>
        <member name="P:NumSharp.NDArray.Address">
            <summary>
                Gets the address that this NDArray starts from.
            </summary>
        </member>
        <member name="P:NumSharp.NDArray.shape">
            <summary>
                Data length of every dimension
            </summary>
        </member>
        <member name="P:NumSharp.NDArray.ndim">
            <summary>
                Dimension count
            </summary>
        </member>
        <member name="P:NumSharp.NDArray.size">
            <summary>
                Total of elements
            </summary>
        </member>
        <member name="P:NumSharp.NDArray.flat">
            <summary>
                A 1-D iterator over the array.
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.flat.html</remarks>
        </member>
        <member name="P:NumSharp.NDArray.T">
            <summary>
                The transposed array. <br></br>
                Same as self.transpose().
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.T.html</remarks>
        </member>
        <member name="P:NumSharp.NDArray.Shape">
            <summary>
                The shape representing this <see cref="T:NumSharp.NDArray"/>.
            </summary>
        </member>
        <member name="F:NumSharp.NDArray.Storage">
            <summary>
            The internal storage that stores data for this <see cref="T:NumSharp.NDArray"/>.
            </summary>
        </member>
        <member name="P:NumSharp.NDArray.TensorEngine">
            <summary>
                The tensor engine that handles this <see cref="T:NumSharp.NDArray"/>.
            </summary>
        </member>
        <member name="M:NumSharp.NDArray.Data``1">
            <summary>
            Shortcut for access internal elements
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:NumSharp.NDArray.Array">
            <summary>
                Get: Gets internal storage array by calling <see cref="F:NumSharp.Backends.UnmanagedStorage.InternalArray"/><br></br>
            </summary>
            <remarks>Setting does not replace internal storage array.</remarks>
        </member>
        <member name="M:NumSharp.NDArray.astype(System.Type,System.Boolean)">
            <summary>
                Copy of the array, cast to a specified type.
            </summary>
            <param name="dtype">The dtype to cast this array.</param>
            <param name="copy">By default, astype always returns a newly allocated array. If this is set to false, the input internal array is replaced instead of returning a new NDArray with the casted data.</param>
            <returns>An <see cref="T:NumSharp.NDArray"/> of given <paramref name="dtype"/>.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.astype.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.astype(NumSharp.NPTypeCode,System.Boolean)">
            <summary>
                Copy of the array, cast to a specified type.
            </summary>
            <param name="typeCode">The dtype to cast this array.</param>
            <param name="copy">By default, astype always returns a newly allocated array. If this is set to false, the input internal array is replaced instead of returning a new NDArray with the casted data.</param>
            <returns>An <see cref="T:NumSharp.NDArray"/> of given <paramref name="typeCode"/>.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.astype.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.System#ICloneable#Clone">
            <summary>
            Clone the whole NDArray
            internal storage is also cloned into 2nd memory area
            </summary>
            <returns>Cloned NDArray</returns>
        </member>
        <member name="M:NumSharp.NDArray.Clone">
            <summary>
            Clone the whole NDArray
            internal storage is also cloned into 2nd memory area
            </summary>
            <returns>Cloned NDArray</returns>
        </member>
        <member name="M:NumSharp.NDArray.view(System.Type)">
            <summary>
                New view of array with the same data.
            </summary>
            <param name="dtype">
                Data-type descriptor of the returned view, e.g., float32 or int16. The default, None, results in the view having the same data-type as a.
                This argument can also be specified as an ndarray sub-class, which then specifies the type of the returned object (this is equivalent to setting the type parameter).
            </param>
            <returns></returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.view.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.view``1">
            <summary>
                New view of array with the same data.
            </summary>
            <returns></returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.view.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.GetNDArrays(System.Int32)">
            <summary>
                Get all NDArray slices at that specific dimension.
            </summary>
            <param name="axis">Zero-based dimension index on which axis and forward of it to select data., e.g. dimensions=1, shape is (2,2,3,3), returned shape = 4 times of (3,3)</param>
            <remarks>Does not perform copy.</remarks>
            <example>
            <code>
                var nd = np.arange(27).reshape(3,1,3,3);<br></br>
                var ret = nd.GetNDArrays(1);<br></br>
                Assert.IsTrue(ret.All(n=>n.Shape == new Shape(3,3));<br></br>
                Assert.IsTrue(ret.Length == 3);<br></br><br></br>
                var nd = np.arange(27).reshape(3,1,3,3);<br></br>
                
                var ret = nd.GetNDArrays(0);<br></br>
                Assert.IsTrue(ret.All(n=>n.Shape == new Shape(1,3,3));<br></br>
                Assert.IsTrue(ret.Length == 3);<br></br>
            </code>
            </example>
        </member>
        <member name="M:NumSharp.NDArray.GetData``1">
            <summary>
                Gets the internal storage and converts it to <typeparamref name="T"/> if necessary.
            </summary>
            <typeparam name="T">The returned type.</typeparam>
            <returns>An array of type <typeparamref name="T"/></returns>
        </member>
        <member name="M:NumSharp.NDArray.GetData">
            <summary>
                Get reference to internal data storage
            </summary>
            <returns>reference to internal storage as System.Array</returns>
        </member>
        <member name="M:NumSharp.NDArray.GetData(System.Int32[])">
            <summary>
                Gets a NDArray at given <paramref name="indices"/>.
            </summary>
            <param name="indices">The coordinates to the wanted value</param>
            <remarks>Does not copy, returns a memory slice - this is similar to this[int[]]</remarks>
        </member>
        <member name="M:NumSharp.NDArray.GetBoolean(System.Int32[])">
            <summary>
                Retrieves value of type <see cref="T:System.Boolean"/>.
            </summary>
            <param name="indices">The shape's indices to get.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">When <see cref="T:NumSharp.DType"/> is not <see cref="T:System.Boolean"/></exception>
        </member>
        <member name="M:NumSharp.NDArray.GetByte(System.Int32[])">
            <summary>
                Retrieves value of type <see cref="T:System.Byte"/>.
            </summary>
            <param name="indices">The shape's indices to get.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">When <see cref="T:NumSharp.DType"/> is not <see cref="T:System.Byte"/></exception>
        </member>
        <member name="M:NumSharp.NDArray.GetDouble(System.Int32[])">
            <summary>
                Retrieves value of type <see cref="T:System.Double"/>.
            </summary>
            <param name="indices">The shape's indices to get.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">When <see cref="T:NumSharp.DType"/> is not <see cref="T:System.Double"/></exception>
        </member>
        <member name="M:NumSharp.NDArray.GetInt32(System.Int32[])">
            <summary>
                Retrieves value of type <see cref="T:System.Int32"/>.
            </summary>
            <param name="indices">The shape's indices to get.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">When <see cref="T:NumSharp.DType"/> is not <see cref="T:System.Int32"/></exception>
        </member>
        <member name="M:NumSharp.NDArray.GetInt64(System.Int32[])">
            <summary>
                Retrieves value of type <see cref="T:System.Int64"/>.
            </summary>
            <param name="indices">The shape's indices to get.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">When <see cref="T:NumSharp.DType"/> is not <see cref="T:System.Int64"/></exception>
        </member>
        <member name="M:NumSharp.NDArray.GetSingle(System.Int32[])">
            <summary>
                Retrieves value of type <see cref="T:System.Single"/>.
            </summary>
            <param name="indices">The shape's indices to get.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">When <see cref="T:NumSharp.DType"/> is not <see cref="T:System.Single"/></exception>
        </member>
        <member name="M:NumSharp.NDArray.GetValue(System.Int32[])">
            <summary>
                Retrieves value of unspecified type (will figure using <see cref="T:NumSharp.DType"/>).
            </summary>
            <param name="indices">The shape's indices to get.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">When <see cref="T:NumSharp.DType"/> is not <see cref="T:System.Object"/></exception>
        </member>
        <member name="M:NumSharp.NDArray.GetValue``1(System.Int32[])">
            <summary>
                Retrieves value of unspecified type (will figure using <see cref="T:NumSharp.DType"/>).
            </summary>
            <param name="indices">The shape's indices to get.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">When <see cref="T:NumSharp.DType"/> is not <see cref="T:System.Object"/></exception>
        </member>
        <member name="M:NumSharp.NDArray.GetAtIndex(System.Int32)">
            <summary>
                Retrieves value of 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.GetAtIndex``1(System.Int32)">
            <summary>
                Retrieves value of 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.SetData(NumSharp.Backends.Unmanaged.IArraySlice,System.Int32[])">
            <summary>
                Set a <see cref="T:NumSharp.Backends.Unmanaged.IArraySlice"/> at given <see cref="T:NumSharp.IIndex"/>.
            </summary>
            <param name="value">The value to set</param>
            <param name="indices">The </param>
            <remarks>
                Does not change internal storage data type.<br></br>
                If <paramref name="value"/> does not match <see cref="T:NumSharp.DType"/>, <paramref name="value"/> will be converted.
            </remarks>
        </member>
        <member name="M:NumSharp.NDArray.SetData(NumSharp.NDArray,System.Int32[])">
            <summary>
                Set a <see cref="T:NumSharp.NDArray"/> at given <see cref="T:NumSharp.IIndex"/>.
            </summary>
            <param name="value">The value to set</param>
            <param name="indices">The </param>
            <remarks>
                Does not change internal storage data type.<br></br>
                If <paramref name="value"/> does not match <see cref="T:NumSharp.DType"/>, <paramref name="value"/> will be converted.
            </remarks>
        </member>
        <member name="M:NumSharp.NDArray.SetData(System.Object,System.Int32[])">
            <summary>
                 Set a <see cref="T:NumSharp.NDArray"/>, <see cref="T:NumSharp.Backends.Unmanaged.IArraySlice"/>, <see cref="P:NumSharp.NDArray.Array"/> or a scalar value at given <see cref="T:NumSharp.IIndex"/>.
            </summary>
            <param name="value">The value to set</param>
            <param name="indices">The </param>
            <remarks>
                Does not change internal storage data type.<br></br>
                If <paramref name="value"/> does not match <see cref="T:NumSharp.DType"/>, <paramref name="value"/> will be converted.
            </remarks>
        </member>
        <member name="M:NumSharp.NDArray.SetValue(System.ValueType,System.Int32[])">
            <summary>
                Set a single value at given <see cref="T:NumSharp.IIndex"/>.
            </summary>
            <param name="value">The value to set</param>
            <param name="indices">The </param>
            <remarks>
                Does not change internal storage data type.<br></br>
                If <paramref name="value"/> does not match <see cref="T:NumSharp.DType"/>, <paramref name="value"/> will be converted.
            </remarks>
        </member>
        <member name="M:NumSharp.NDArray.SetValue(System.Object,System.Int32[])">
            <summary>
                Set a single value at given <see cref="T:NumSharp.IIndex"/>.
            </summary>
            <param name="value">The value to set</param>
            <param name="indices">The </param>
            <remarks>
                Does not change internal storage data type.<br></br>
                If <paramref name="value"/> does not match <see cref="T:NumSharp.DType"/>, <paramref name="value"/> will be converted.
            </remarks>
        </member>
        <member name="M:NumSharp.NDArray.SetValue``1(``0,System.Int32[])">
            <summary>
                Set a single value at given <see cref="T:NumSharp.IIndex"/>.
            </summary>
            <param name="value">The value to set</param>
            <param name="indices">The </param>
            <remarks>
                Does not change internal storage data type.<br></br>
                If <paramref name="value"/> does not match <see cref="T:NumSharp.DType"/>, <paramref name="value"/> will be converted.
            </remarks>
        </member>
        <member name="M:NumSharp.NDArray.ReplaceData(System.Array,System.Type)">
            <summary>
                Sets <see cref="P:NumSharp.NDArray.Array"/> as the internal data storage and changes the internal storage data type to <see cref="P:NumSharp.NDArray.dtype"/> and casts <see cref="P:NumSharp.NDArray.Array"/> if necessary.
            </summary>
            <param name="values">The values to set as internal data soruce</param>
            <param name="dtype">The type to change this storage to and the type to cast <see cref="P:NumSharp.NDArray.Array"/> if necessary.</param>
            <remarks>Does not copy values unless cast is necessary.</remarks>
        </member>
        <member name="M:NumSharp.NDArray.ReplaceData(System.Array)">
            <summary>
                Sets <see cref="P:NumSharp.NDArray.Array"/> as the internal data storage and changes the internal storage data type to <see cref="P:NumSharp.NDArray.Array"/> type.
            </summary>
            <param name="values"></param>
            <remarks>Does not copy values.</remarks>
        </member>
        <member name="M:NumSharp.NDArray.ReplaceData(NumSharp.NDArray)">
            <summary>
                Sets <see cref="T:NumSharp.NDArray"/> as the internal data storage and changes the internal storage data type to <see cref="T:NumSharp.NDArray"/> type.
            </summary>
            <param name="nd"></param>
            <remarks>Does not copy values and does change shape and dtype.</remarks>
        </member>
        <member name="M:NumSharp.NDArray.ReplaceData(System.Array,NumSharp.NPTypeCode)">
            <summary>
                Set an Array to internal storage, cast it to new dtype and if necessary change dtype  
            </summary>
            <param name="values"></param>
            <param name="typeCode"></param>
            <remarks>Does not copy values unless cast is necessary and doesn't change shape.</remarks>
        </member>
        <member name="M:NumSharp.NDArray.ReplaceData(NumSharp.Backends.Unmanaged.IArraySlice,System.Type)">
            <summary>
                Sets <see cref="T:NumSharp.Backends.Unmanaged.IArraySlice"/> as the internal data source and changes the internal storage data type to <see cref="T:NumSharp.Backends.Unmanaged.IArraySlice"/> type.
            </summary>
            <param name="values"></param>
            <param name="dtype"></param>
            <remarks>Does not copy values and doesn't change shape.</remarks>
        </member>
        <member name="M:NumSharp.NDArray.ReplaceData(NumSharp.Backends.Unmanaged.IArraySlice)">
            <summary>
                Sets <see cref="T:NumSharp.Backends.Unmanaged.IArraySlice"/> as the internal data source and changes the internal storage data type to <see cref="T:NumSharp.Backends.Unmanaged.IArraySlice"/> type.
            </summary>
            <param name="values"></param>
            <remarks>Does not copy values and doesn't change shape.</remarks>
        </member>
        <member name="M:NumSharp.NDArray.SetAtIndex(System.Object,System.Int32)">
            <summary>
                Retrieves value at given linear (offset) <paramref name="index"/>.
            </summary>
            <param name="obj"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.SetAtIndex``1(``0,System.Int32)">
            <summary>
                Retrieves value of 
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.SetBoolean(System.Boolean,System.Int32[])">
            <summary>
                Sets a bool at specific coordinates.
            </summary>
            <param name="value">The values to assign</param>
            <param name="indices">The coordinates to set <paramref name="value"/> at.</param>
        </member>
        <member name="M:NumSharp.NDArray.SetByte(System.Byte,System.Int32[])">
            <summary>
                Sets a byte at specific coordinates.
            </summary>
            <param name="value">The values to assign</param>
            <param name="indices">The coordinates to set <paramref name="value"/> at.</param>
        </member>
        <member name="M:NumSharp.NDArray.SetInt32(System.Int32,System.Int32[])">
            <summary>
                Sets a int at specific coordinates.
            </summary>
            <param name="value">The values to assign</param>
            <param name="indices">The coordinates to set <paramref name="value"/> at.</param>
        </member>
        <member name="M:NumSharp.NDArray.SetInt64(System.Int64,System.Int32[])">
            <summary>
                Sets a long at specific coordinates.
            </summary>
            <param name="value">The values to assign</param>
            <param name="indices">The coordinates to set <paramref name="value"/> at.</param>
        </member>
        <member name="M:NumSharp.NDArray.SetSingle(System.Single,System.Int32[])">
            <summary>
                Sets a float at specific coordinates.
            </summary>
            <param name="value">The values to assign</param>
            <param name="indices">The coordinates to set <paramref name="value"/> at.</param>
        </member>
        <member name="M:NumSharp.NDArray.SetDouble(System.Double,System.Int32[])">
            <summary>
                Sets a double at specific coordinates.
            </summary>
            <param name="value">The values to assign</param>
            <param name="indices">The coordinates to set <paramref name="value"/> at.</param>
        </member>
        <member name="M:NumSharp.NDArray.NDArrayDebuggerProxy.#ctor(NumSharp.NDArray)">
            <summary>Initializes a new instance of the <see cref="T:System.Object"></see> class.</summary>
        </member>
        <member name="M:NumSharp.NDArray.NDArrayDebuggerProxy.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:NumSharp.NDArray.FromString(System.String)">
            <summary>
                Converts a string to a vector ndarray of bytes.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.AsString(NumSharp.NDArray)">
            <summary>
                Converts the entire <see cref="T:NumSharp.NDArray"/> to a string.
            </summary>
            <remarks>Performs a copy due to String .net-framework limitations.</remarks>
        </member>
        <member name="M:NumSharp.NDArray.AsStringArray(NumSharp.NDArray)">
            <summary>
            Convert to String[] from NDArray
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.GetString(System.Int32[])">
            <summary>
                Get a string out of a vector of chars.
            </summary>
            <param name="indices"></param>
            <returns></returns>
            <remarks>Performs a copy due to String .net-framework limitations.</remarks>
        </member>
        <member name="M:NumSharp.NDArray.GetStringAt(System.Int32)">
            <summary>
                Get a string out of a vector of chars.
            </summary>
            <remarks>Performs a copy due to String .net-framework limitations.</remarks>
        </member>
        <member name="P:NumSharp.NDArray.Unsafe">
            <summary>
                Provides an interface for unsafe methods in NDArray.
            </summary>
        </member>
        <member name="M:NumSharp.NDArray._Unsafe.GetPinnableReference">
            <exception cref="T:System.InvalidOperationException">When this NDArray is a slice.</exception>
        </member>
        <member name="P:NumSharp.NDArray._Unsafe.Address">
            <summary>
                Returns the memory address to the start of this block of memory.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">When this NDArray is a slice.</exception>
        </member>
        <member name="P:NumSharp.NDArray._Unsafe.Array">
            <summary>
                Get: Gets internal storage array by calling <see cref="F:NumSharp.Backends.UnmanagedStorage.InternalArray"/><br></br>
                Set: Replace internal storage by calling <see cref="M:NumSharp.Backends.UnmanagedStorage.ReplaceData(System.Array)"/>
            </summary>
            <remarks>Setting does not replace internal storage array.</remarks>
        </member>
        <member name="P:NumSharp.NDArray._Unsafe.Storage">
            <summary>
                Provides access to the internal <see cref="T:NumSharp.Backends.UnmanagedStorage"/>.
            </summary>
        </member>
        <member name="P:NumSharp.NDArray._Unsafe.Shape">
            <summary>
                Provides access to the internal <see cref="P:NumSharp.NDArray._Unsafe.Shape"/>.
            </summary>
        </member>
        <member name="M:NumSharp.NDArray._Unsafe.AsSpan``1">
            A Span representing this slice.
            <remarks>Does not perform copy.</remarks>
        </member>
        <member name="P:NumSharp.NDArray._Unsafe.ItemLength">
            <summary>
                The size of a single item stored in <see cref="P:NumSharp.NDArray._Unsafe.Address"/>.
            </summary>
            <remarks>Equivalent to <see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.ItemLength"/> extension.</remarks>
        </member>
        <member name="P:NumSharp.NDArray._Unsafe.BytesLength">
            <summary>
                How many bytes are stored in this memory block.
            </summary>
            <remarks>Calculated by <see cref="P:NumSharp.NDArray._Unsafe.Count"/>*<see cref="P:NumSharp.NDArray._Unsafe.ItemLength"/></remarks>
        </member>
        <member name="P:NumSharp.NDArray._Unsafe.Count">
            <summary>
                How many items are stored in <see cref="P:NumSharp.NDArray._Unsafe.Address"/>.
            </summary>
            <remarks>Not to confuse with <see cref="P:NumSharp.NDArray._Unsafe.BytesLength"/></remarks>
        </member>
        <member name="M:NumSharp.NDArray._Unsafe.Fill(System.Object)">
            <summary>
                Fills all indexes with <paramref name="value"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NumSharp.NDArray._Unsafe.GetPinnableReference``1">
            <summary>
                Gets pinnable reference of the first item in the memory block storage.
            </summary>
        </member>
        <member name="P:NumSharp.NDArray._Unsafe.Pin">
            <summary>
                Provides the ability to return a pin to the memory address of NDArray.
            </summary>
            <remarks>Possible only when the ndarray is not sliced.</remarks>
        </member>
        <member name="M:NumSharp.NDArray._Unsafe._Pinning.GetPin``1">
            <exception cref="T:System.InvalidOperationException">When this NDArray is a slice.</exception>
        </member>
        <member name="P:NumSharp.NDArray._Unsafe._Pinning.Boolean">
            <exception cref="T:System.InvalidOperationException">When this NDArray is a slice.</exception>
        </member>
        <member name="P:NumSharp.NDArray._Unsafe._Pinning.Byte">
            <exception cref="T:System.InvalidOperationException">When this NDArray is a slice.</exception>
        </member>
        <member name="P:NumSharp.NDArray._Unsafe._Pinning.Int32">
            <exception cref="T:System.InvalidOperationException">When this NDArray is a slice.</exception>
        </member>
        <member name="P:NumSharp.NDArray._Unsafe._Pinning.Int64">
            <exception cref="T:System.InvalidOperationException">When this NDArray is a slice.</exception>
        </member>
        <member name="P:NumSharp.NDArray._Unsafe._Pinning.Single">
            <exception cref="T:System.InvalidOperationException">When this NDArray is a slice.</exception>
        </member>
        <member name="P:NumSharp.NDArray._Unsafe._Pinning.Double">
            <exception cref="T:System.InvalidOperationException">When this NDArray is a slice.</exception>
        </member>
        <member name="M:NumSharp.NDArray.FromJaggedArray``1(System.Array)">
            <summary>
            low performance due to loop element-wise
            </summary>
            <param name="dotNetArray"></param>
        </member>
        <member name="M:NumSharp.NDArray.FromMultiDimArray``1(System.Array,System.Boolean)">
            <summary>
                Creates an NDArray out of given array of type <typeparamref name="T"/>
            </summary>
            <param name="ndarray"></param>
            <param name="copy">true for making </param>
        </member>
        <member name="M:NumSharp.NDArray.copy(System.Char)">
            <summary>
                Return a copy of the array.
            </summary>
            <param name="order"></param>
            <returns></returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.copy.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.dstack(NumSharp.NDArray[])">
            <summary>
                Stack arrays in sequence depth wise (along third axis).
                This is equivalent to concatenation along the third axis after 2-D arrays of shape(M, N) have been reshaped to(M, N,1) and 1-D arrays of shape(N,) have been reshaped to(1, N,1).
                Rebuilds arrays divided by dsplit. 
                This function makes most sense for arrays with up to 3 dimensions.For instance, for pixel-data with a height(first axis), width(second axis), and r/g/b channels(third axis). The functions concatenate, stack and block provide more general stacking and concatenation operations.
            </summary>
            <param name="tup">The arrays must have the same shape along all but the third axis. 1-D or 2-D arrays must have the same shape.</param>
            <returns>The array formed by stacking the given arrays, will be at least 3-D.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.dstack.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.flatten(System.Char)">
            <summary>
                Return a copy of the array collapsed into one dimension.
            </summary>
            <param name="order"></param>
            <returns>A copy of the input array, flattened to one dimension.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.flatten.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.hstack(NumSharp.NDArray[])">
            <summary>
                Stack arrays in sequence horizontally (column wise).
                This is equivalent to concatenation along the second axis, except for 1-D arrays where it concatenates along the first axis.Rebuilds arrays divided by hsplit.
                This function makes most sense for arrays with up to 3 dimensions.For instance, for pixel-data with a height(first axis), width(second axis), and r/g/b channels(third axis). The functions concatenate, stack and block provide more general stacking and concatenation operations.
            </summary>
            <param name="tup">The arrays must have the same shape along all but the second axis, except 1-D arrays which can be any length.</param>
            <returns>The array formed by stacking the given arrays.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.hstack.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.MakeGeneric``1">
            <summary>
                Creates an alias without reallocating data.
            </summary>
            <typeparam name="T">The type of the generic</typeparam>
            <returns>This NDArray as a generic version.</returns>
            <exception cref="T:System.InvalidOperationException">When <typeparamref name="T"/> != <see cref="P:NumSharp.NDArray.dtype"/></exception>
        </member>
        <member name="M:NumSharp.NDArray.AsGeneric``1">
            <summary>
                Tries to cast to <see cref="T:NumSharp.Generic.NDArray`1"/>, otherwise creates an alias without reallocating data.
            </summary>
            <typeparam name="T">The type of the generic</typeparam>
            <returns>This NDArray as a generic version.</returns>
            <exception cref="T:System.InvalidOperationException">When <typeparamref name="T"/> != <see cref="P:NumSharp.NDArray.dtype"/></exception>
        </member>
        <member name="M:NumSharp.NDArray.AsOrMakeGeneric``1">
            <summary>
                Tries to cast to <see cref="T:NumSharp.Generic.NDArray`1"/>, otherwise calls <see cref="M:NumSharp.NDArray.astype(NumSharp.NPTypeCode,System.Boolean)"/>.
            </summary>
            <typeparam name="T">The type of the generic</typeparam>
            <returns>This NDArray as a generic version.</returns>
            <exception cref="T:System.InvalidOperationException">When <typeparamref name="T"/> != <see cref="P:NumSharp.NDArray.dtype"/></exception>
        </member>
        <member name="M:NumSharp.NDArray.mgrid(NumSharp.NDArray)">
            <summary>
                nd_grid instance which returns a dense multi-dimensional “meshgrid”.
                An instance of numpy.lib.index_tricks.nd_grid which returns an dense (or fleshed out) mesh-grid when indexed, so that each returned argument has the same shape.
                The dimensions and number of the output arrays are equal to the number of indexing dimensions.If the step length is not a complex number, then the stop is not inclusive.
            </summary>
            <param name="rhs"></param>
            <returns>mesh-grid `ndarrays` all of the same dimensions</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.mgrid.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.reshape(NumSharp.Shape)">
            <summary>
                Gives a new shape to an array without changing its data.
            </summary>
            <param name="newShape">The new shape should be compatible with the original shape. If an integer, then the result will be a 1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array and remaining dimensions.</param>
            <returns>This will be a new view object if possible; otherwise, it will be a copy. Note there is no guarantee of the memory layout (C- or Fortran- contiguous) of the returned array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.reshape(NumSharp.Shape@)">
            <summary>
                Gives a new shape to an array without changing its data.
            </summary>
            <param name="newShape">The new shape should be compatible with the original shape. If an integer, then the result will be a 1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array and remaining dimensions.</param>
            <returns>This will be a new view object if possible; otherwise, it will be a copy. Note there is no guarantee of the memory layout (C- or Fortran- contiguous) of the returned array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.reshape(System.Int32[])">
            <summary>
                Gives a new shape to an array without changing its data.
            </summary>
            <param name="shape">The new shape should be compatible with the original shape. If an integer, then the result will be a 
            1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array 
            and remaining dimensions.</param>
            <returns>This will be a new view object if possible; otherwise, it will be a copy. Note there is no guarantee of the 
            memory layout (C- or Fortran- contiguous) of the returned array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.reshape_unsafe(NumSharp.Shape)">
            <summary>
                Gives a new shape to an array without changing its data.
            </summary>
            <param name="newshape">The new shape should be compatible with the original shape. If an integer, then the result will be a 1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array and remaining dimensions.</param>
            <returns>This will be a new view object if possible; otherwise, it will be a copy. Note there is no guarantee of the memory layout (C- or Fortran- contiguous) of the returned array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.reshape_unsafe(NumSharp.Shape@)">
            <summary>
                Gives a new shape to an array without changing its data.
            </summary>
            <param name="newshape">The new shape should be compatible with the original shape. If an integer, then the result will be a 1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array and remaining dimensions.</param>
            <returns>This will be a new view object if possible; otherwise, it will be a copy. Note there is no guarantee of the memory layout (C- or Fortran- contiguous) of the returned array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.reshape_unsafe(System.Int32[])">
            <summary>
                Gives a new shape to an array without changing its data.
            </summary>
            <param name="shape">The new shape should be compatible with the original shape. If an integer, then the result will be a 
            1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array 
            and remaining dimensions.</param>
            <returns>This will be a new view object if possible; otherwise, it will be a copy. Note there is no guarantee of the 
            memory layout (C- or Fortran- contiguous) of the returned array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.Scalar(System.Object,System.Type)">
            <summary>
                Creates a scalar <see cref="T:NumSharp.NDArray"/> of <see cref="T:System.Type"/>.
            </summary>
            <param name="value">The value of the scalar</param>
            <param name="dtype">The type of the scalar.</param>
            <returns></returns>
            <remarks>In case when <paramref name="value"/> is not <paramref name="dtype"/>, <see cref="M:NumSharp.Utilities.Converts.ChangeType(System.Object,NumSharp.NPTypeCode)"/> will be called.</remarks>
        </member>
        <member name="M:NumSharp.NDArray.Scalar(System.Object)">
            <summary>
                Creates a scalar <see cref="T:NumSharp.NDArray"/> of <paramref name="value"/>.
            </summary>
            <param name="value">The value of the scalar</param>
            <returns></returns>
            <remarks>In case when <paramref crefname="value"/> is not <see cref="P:NumSharp.NDArray.dtype"/>, <see cref="M:NumSharp.Utilities.Converts.ChangeType(System.Object,NumSharp.NPTypeCode)"/> will be called.</remarks>
        </member>
        <member name="M:NumSharp.NDArray.Scalar(System.ValueType)">
            <summary>
                Creates a scalar <see cref="T:NumSharp.NDArray"/> of <paramref name="value"/> .
            </summary>
            <param name="value">The value of the scalar</param>
            <returns></returns>
            <remarks>In case when <paramref name="value"/> is not <see cref="T:System.ValueType"/>, <see cref="M:NumSharp.Utilities.Converts.ChangeType(System.Object,NumSharp.NPTypeCode)"/> will be called.</remarks>
        </member>
        <member name="M:NumSharp.NDArray.Scalar``1(``0)">
            <summary>
                Creates a scalar <see cref="T:NumSharp.NDArray"/> of <paramref name="value"/>.
            </summary>
            <param name="value">The value of the scalar</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.Scalar``1(System.Object)">
            <summary>
                Creates a scalar <see cref="T:NumSharp.NDArray"/> of <paramref name="value"/> and <see cref="P:NumSharp.NDArray.dtype"/>.
            </summary>
            <param name="value">The value of the scalar, attempt to convert will be performed</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.Scalar(System.Object,NumSharp.NPTypeCode)">
            <summary>
                Creates a scalar <see cref="T:NumSharp.NDArray"/> of <paramref name="value"/> and <see cref="P:NumSharp.NDArray.dtype"/>.
            </summary>
            <param name="value">The value of the scalar</param>
            <param name="typeCode">The type code of the scalar.</param>
            <returns></returns>
            <remarks>In case when <paramref name="value"/> is not <see cref="P:NumSharp.NDArray.dtype"/>, <see cref="M:NumSharp.Utilities.Converts.ChangeType(System.Object,NumSharp.NPTypeCode)"/> will be called.</remarks>
        </member>
        <member name="M:NumSharp.NDArray.vstack(NumSharp.NDArray[])">
            <summary>
                Stack arrays in sequence vertically (row wise).<br></br>
                This is equivalent to concatenation along the first axis after 1-D arrays of shape(N,) have been reshaped to(1, N). Rebuilds arrays divided by vsplit.
            </summary>
            <param name="tup">The arrays must have the same shape along all but the first axis. 1-D arrays must have the same length.</param>
            <returns>https://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html</returns>
        </member>
        <member name="M:NumSharp.NDArray.Normalize">
            <summary>
            Normalizes all entries into the range between 0 and 1
            
            Note: this is not a numpy function.
            </summary>
        </member>
        <member name="M:NumSharp.NDArray.dot(NumSharp.NDArray@)">
            <summary>
                Dot product of two arrays. See remarks.
            </summary>
            <param name="b">Rhs, Second argument.</param>
            <returns>Returns the dot product of a and b. If a and b are both scalars or both 1-D arrays then a scalar is returned; otherwise an array is returned. If out is given, then it is returned.</returns>
            <remarks>
                https://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html<br></br>
                Specifically,<br></br>
                    - If both a and b are 1-D arrays, it is inner product of vectors (without complex conjugation).<br></br>
                    - If both a and b are 2-D arrays, it is matrix multiplication, but using matmul or a @ b is preferred.<br></br>
                    - If either a or b is 0-D(scalar), it is equivalent to multiply and using numpy.multiply(a, b) or a* b is preferred.<br></br>
                    - If a is an N-D array and b is a 1-D array, it is a sum product over the last axis of a and b.<br></br>
                    - If a is an N-D array and b is an M-D array(where M>=2), it is a sum product over the last axis of a and the second-to-last axis of b:<br></br>
                      dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m])
            </remarks>
        </member>
        <member name="M:NumSharp.NDArray.lstqr(NumSharp.NDArray,System.Double)">
            <summary>
            Least Square method
            
            Determines NDArray X which reduces least square error of Linear System A * X = B.
            This NDArray is equal to A.
            </summary>
            <param name="nDArrayB">Result NDArray B</param>
            <param name="rcon"></param>
            <returns>NArray X</returns>
        </member>
        <member name="M:NumSharp.NDArray.flatten(System.Boolean)">
            <summary>
                Return a copy of the array collapsed into one dimension.
            </summary>
            <param name="clone">Should the data be cloned, true by default.</param>
            <returns>A copy of the input array, flattened to one dimension.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.flatten.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.itemset(NumSharp.Shape@,System.ValueType)">
            <summary>
                Insert scalar into an array (scalar is cast to array’s dtype, if possible)
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.itemset.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.itemset(NumSharp.Shape,System.ValueType)">
            <summary>
                Insert scalar into an array (scalar is cast to array’s dtype, if possible)
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.itemset.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.itemset(System.Int32[],System.ValueType)">
            <summary>
                Insert scalar into an array (scalar is cast to array’s dtype, if possible)
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.itemset.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.itemset``1(System.Int32[],``0)">
            <summary>
                Insert scalar into an array (scalar is cast to array’s dtype, if possible)
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.itemset.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.ravel">
            <summary>
                Return a contiguous flattened array. A 1-D array, containing the elements of the input, is returned
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html</remarks>
            <remarks><br></br>If this array's <see cref="P:NumSharp.NDArray.Shape"/> is a slice, the a copy will be made.</remarks>
        </member>
        <member name="M:NumSharp.NDArray.roll(System.Int32,System.Int32)">
            <summary>
            Roll array elements along a given axis.
            
            Elements that roll beyond the last position are re-introduced at the first.
            </summary>
        </member>
        <member name="M:NumSharp.NDArray.swapaxes(System.Int32,System.Int32)">
            <summary>
                Interchange two axes of an array.
            </summary>
            <param name="axis1">First axis.</param>
            <param name="axis2">Second axis.</param>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.swapaxes.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.transpose(System.Int32[])">
            <summary>
                Permute the dimensions of an array.
            </summary>
            <param name="premute">By default, reverse the dimensions, otherwise permute the axes according to the values given.</param>
            <returns>a with its axes permuted. A view is returned whenever possible.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.transpose.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.unique">
            <summary>
                Find the unique elements of an array.<br></br>
                
                Returns the sorted unique elements of an array.There are three optional outputs in addition to the unique elements:<br></br>
                * the indices of the input array that give the unique values<br></br>
                * the indices of the unique array that reconstruct the input array<br></br>
                * the number of times each unique value comes up in the input array<br></br>
            </summary>
            <returns>The sorted unique values.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.unique.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.unique``1">
            <summary>
                Find the unique elements of an array.<br></br>
                
                Returns the sorted unique elements of an array.There are three optional outputs in addition to the unique elements:<br></br>
                * the indices of the input array that give the unique values<br></br>
                * the indices of the unique array that reconstruct the input array<br></br>
                * the number of times each unique value comes up in the input array<br></br>
            </summary>
            <returns></returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.unique.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.convolve(NumSharp.NDArray,System.String)">
             <summary>
             Returns the discrete, linear convolution of two one-dimensional sequences.
            
             The convolution operator is often seen in signal processing, where it models the effect of a linear time-invariant system on a signal[1]. In probability theory, the sum of two independent random variables is distributed according to the convolution of their individual distributions.
             
             If v is longer than a, the arrays are swapped before computation.
             </summary>
             <param name="rhs"></param>
             <param name="mode"></param>
             <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.cumsum(System.Nullable{System.Int32},System.Type)">
            <summary>
                Return the cumulative sum of the elements along a given axis.
            </summary>
            <param name="axis">Axis along which the cumulative sum is computed. The default (-1) is to compute the cumsum over the flattened array.</param>
            <param name="dtype">Type of the returned array and of the accumulator in which the elements are summed. If dtype is not specified, it defaults to the dtype of a, unless a has an integer dtype with a precision less than that of the default platform integer. In that case, the default platform integer is used.</param>
            <returns>A new array holding the result is returned unless out is specified, in which case a reference to out is returned. The result has the same size as a, and the same shape as a if axis is not None or a is a 1-d array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.cumsum.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.negate">
            <summary>
            Negates all values by performing: -x
            </summary>
        </member>
        <member name="M:NumSharp.NDArray.negative">
            <summary>
            Negates all positive values.
            </summary>
        </member>
        <member name="M:NumSharp.NDArray.positive">
            <summary>
            Positives all negative values.
            </summary>
        </member>
        <member name="M:NumSharp.NDArray.prod(System.Nullable{System.Int32},System.Type,System.Boolean)">
            <summary>
                Return the product of array elements over a given axis.
            </summary>
            <param name="axis">Axis or axes along which a product is performed. The default, axis=None, will calculate the product of all the elements in the input array. If axis is negative it counts from the last to the first axis.</param>
            <param name="dtype">The type of the returned array, as well as of the accumulator in which the elements are multiplied. The dtype of a is used by default unless a has an integer dtype of less precision than the default platform integer. In that case, if a is signed then the platform integer is used while if a is unsigned then an unsigned integer of the same precision as the platform integer is used.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.</param>
            <returns>An array shaped as a but with the specified axis removed.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.prod.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.sum(System.Int32,System.Boolean,System.Type)">
            <summary>
                Sum of array elements over a given axis.
            </summary>
            <param name="axis">Axis or axes along which a sum is performed. The default, axis=None, will sum all of the elements of the input array. If axis is negative it counts from the last to the first axis.</param>
            <param name="dtype">The type of the returned array and of the accumulator in which the elements are summed. The dtype of a is used by default unless a has an integer dtype of less precision than the default platform integer. In that case, if a is signed then the platform integer is used while if a is unsigned then an unsigned integer of the same precision as the platform integer is used.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array. If the default value is passed, then keepdims will not be passed through to the sum method of sub-classes of ndarray, however any non-default value will be.If the sub-class’ method does not implement keepdims any exceptions will be raised.</param>
            <returns>An array with the same shape as a, with the specified axis removed. If a is a 0-d array, or if axis is None, a scalar is returned. If an output array is specified, a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.sum.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.sum(System.Int32,System.Boolean,System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Sum of array elements over a given axis.
            </summary>
            <param name="axis">Axis or axes along which a sum is performed. The default, axis=None, will sum all of the elements of the input array. If axis is negative it counts from the last to the first axis.</param>
            <param name="typeCode">The type of the returned array and of the accumulator in which the elements are summed. The dtype of a is used by default unless a has an integer dtype of less precision than the default platform integer. In that case, if a is signed then the platform integer is used while if a is unsigned then an unsigned integer of the same precision as the platform integer is used.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array. If the default value is passed, then keepdims will not be passed through to the sum method of sub-classes of ndarray, however any non-default value will be.If the sub-class’ method does not implement keepdims any exceptions will be raised.</param>
            <returns>An array with the same shape as a, with the specified axis removed. If a is a 0-d array, or if axis is None, a scalar is returned. If an output array is specified, a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.sum.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.sum(System.Int32)">
            <summary>
                Sum of array elements over a given axis.
            </summary>
            <param name="axis">Axis or axes along which a sum is performed. The default, axis=None, will sum all of the elements of the input array. If axis is negative it counts from the last to the first axis.</param>
            <returns>An array with the same shape as a, with the specified axis removed. If a is a 0-d array, or if axis is None, a scalar is returned. If an output array is specified, a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.sum.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.sum">
            <summary>
                Sum of array elements into a scalar.
            </summary>
            <returns>An array with the same shape as a, with the specified axis removed. If a is a 0-d array, or if axis is None, a scalar is returned. If an output array is specified, a reference to out is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.sum.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.Equals(System.Object)">
            <summary>
            Determines if NDArray data is same
            </summary>
            <param name="obj">NDArray to compare</param>
            <returns>if reference is same</returns>
        </member>
        <member name="M:NumSharp.NDArray.equal(NumSharp.NDArray)">
            NumPy signature: numpy.equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = &lt;ufunc 'equal'&gt;
            <summary>
            Compare two NDArrays element wise
            </summary>
            <param name="np2">NDArray to compare with</param>
            <returns>NDArray with result of each element compare</returns>
        </member>
        <member name="M:NumSharp.NDArray.array_equal(NumSharp.NDArray)">
            <summary>
                True if two arrays have the same shape and elements, False otherwise.
            </summary>
            <param name="rhs">Input array.</param>
            <returns>Returns True if the arrays are equal.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.array_equal.html</remarks>
        </member>
        <member name="P:NumSharp.NDArray.Item(System.Int32*,System.Int32)">
            <summary>
                Used to perform selection based on given indices.
            </summary>
            <param name="dims">The pointer to the dimensions</param>
            <param name="ndims">The count of ints in <paramref name="dims"/></param>
        </member>
        <member name="P:NumSharp.NDArray.Item(NumSharp.Generic.NDArray{System.Int32}[])">
            <summary>
                Used to perform selection based on a selection indices.
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy-1.17.0/user/basics.indexing.html</remarks>
            <exception cref="T:System.IndexOutOfRangeException">When one of the indices exceeds limits.</exception>
            <exception cref="T:System.ArgumentException">indices must be of Int type (byte, u/short, u/int, u/long).</exception>
        </member>
        <member name="P:NumSharp.NDArray.Item(System.String)">
            <summary>
                Slice the array with Python slice notation like this: ":, 2:7:1, ..., np.newaxis"
            </summary>
            <param name="slice">A string containing slice notations for every dimension, delimited by comma</param>
            <returns>A sliced view</returns>
        </member>
        <member name="P:NumSharp.NDArray.Item(NumSharp.Slice[])">
            <summary>
                Slice the array with Python slice notation like this: ":, 2:7:1, ..., np.newaxis"
            </summary>
            <param name="slice">A string containing slice notations for every dimension, delimited by comma</param>
            <returns>A sliced view</returns>
        </member>
        <member name="P:NumSharp.NDArray.Item(System.Object[])">
            <summary>
            Perform slicing, index extraction, masking and indexing all at the same time with mixed index objects
            </summary>
            <param name="indicesObjects"></param>
            <returns></returns>
        </member>
        <member name="P:NumSharp.NDArray.Item(NumSharp.Generic.NDArray{System.Boolean})">
            <summary>
                Used to perform selection based on a boolean mask.
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy-1.17.0/user/basics.indexing.html</remarks>
            <exception cref="T:System.IndexOutOfRangeException">When one of the indices exceeds limits.</exception>
            <exception cref="T:System.ArgumentException">indices must be of Int type (byte, u/short, u/int, u/long).</exception>
        </member>
        <member name="M:NumSharp.NDArray.GetIndicesFromSlice(NumSharp.Shape,NumSharp.Slice,System.Int32)">
            <summary>
                Converts a slice to indices for the special case where slices are mixed with NDArrays in this[...]
            </summary>
            <param name="shape"></param>
            <param name="slice"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.GetIndicesFromSlice(System.Int32[],NumSharp.Slice,System.Int32)">
            <summary>
                Converts a slice to indices for the special case where slices are mixed with NDArrays in this[...]
            </summary>
            <param name="shape"></param>
            <param name="slice"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.PrepareIndexGetters(NumSharp.Shape,NumSharp.NDArray[])">
            <summary>
                Generates index getter function based on given <paramref name="indices"/>.
            </summary>
            <param name="srcShape">The shape to get indice from</param>
            <param name="indices">The indices trying to index.</param>
        </member>
        <member name="M:NumSharp.NDArray.GetIndices(NumSharp.NDArray,NumSharp.NDArray[])">
            <summary>
                Used to perform selection based on indices, equivalent to nd[NDArray[]].
            </summary>
            <param name="indices"></param>
            <param name="out">Alternative output array in which to place the result. It must have the same shape as the expected output and be of dtype <see cref="T:System.Int32"/>.</param>
            <remarks>https://docs.scipy.org/doc/numpy-1.17.0/user/basics.indexing.html</remarks>
            <exception cref="T:System.IndexOutOfRangeException">When one of the indices exceeds limits.</exception>
            <exception cref="T:System.ArgumentException">indices must be of Int type (byte, u/short, u/int, u/long).</exception>
        </member>
        <member name="M:NumSharp.NDArray.FetchIndicesND``1(NumSharp.Generic.NDArray{``0},NumSharp.Generic.NDArray{System.Int32},NumSharp.NDArray[],System.Int32,System.Int32[],System.Int32[],NumSharp.NDArray)">
            <summary>
                Accepts collapsed 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="src"></param>
            <param name="offsets"></param>
            <param name="indices"></param>
            <param name="ndsCount"></param>
            <param name="out"></param>
            <param name="subShape"></param>
            <param name="retShape"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.FetchIndicesNDNonLinear``1(NumSharp.Generic.NDArray{``0},NumSharp.NDArray[],System.Int32,System.Int32[],System.Int32[],NumSharp.NDArray)">
            <summary>
                Accepts collapsed 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="retShape"></param>
            <param name="out"></param>
            <param name="subShape"></param>
            <param name="ndsCount"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.SetIndices(NumSharp.NDArray,NumSharp.NDArray[])">
            <summary>
                Used to perform set a selection based on indices, equivalent to nd[NDArray[]] = values.
            </summary>
            <param name="values">The values to set via .</param>
            <param name="indices"></param>
            <remarks>https://docs.scipy.org/doc/numpy-1.17.0/user/basics.indexing.html</remarks>
            <exception cref="T:System.IndexOutOfRangeException">When one of the indices exceeds limits.</exception>
            <exception cref="T:System.ArgumentException">indices must be of Int type (byte, u/short, u/int, u/long).</exception>
        </member>
        <member name="M:NumSharp.NDArray.SetIndicesND``1(NumSharp.Generic.NDArray{``0},NumSharp.Generic.NDArray{System.Int32},NumSharp.NDArray[],System.Int32,System.Int32[],System.Int32[],NumSharp.Generic.NDArray{``0})">
            <summary>
                Accepts collapsed 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dst"></param>
            <param name="dstOffsets"></param>
            <param name="retShape"></param>
            <param name="ndsCount"></param>
            <param name="subShape"></param>
            <param name="dstIndices"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.SetIndicesNDNonLinear``1(NumSharp.Generic.NDArray{``0},NumSharp.NDArray[],System.Int32,System.Int32[],System.Int32[],NumSharp.Generic.NDArray{``0})">
            <summary>
                Accepts collapsed 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="indices"></param>
            <param name="ndsCount"></param>
            <param name="retShape"></param>
            <param name="subShape"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.argsort``1(System.Int32)">
             <summary>
             Returns the indices that would sort an array.
            
             Perform an indirect sort along the given axis using the algorithm specified by the kind keyword.It returns an array of indices of the same shape as a that index data along the given axis in sorted order.
             </summary>
        </member>
        <member name="M:NumSharp.NDArray.Appendor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Appends the given value to the sequences
            </summary>
            <param name="value"></param>
            <param name="axis"></param>
            <param name="sequences"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.AccessorCreator(System.Int32[],System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Creates the indices with which we need to access to the array
            If shape is 3x2x3 and we are soritng w.r.t axis = 2
            Return value is[0,0], [0,1], [1,0], [1,1], [2,0], [2,1]
            </summary>
            <param name="originalIndices"></param>
            <param name="previousStep"></param>
            <param name="currentStep"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NDArray.Sort``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sorts the given data. This method should implement quick sort etc...
            </summary>
            <typeparam name="T">Type of parameters</typeparam>
            <param name="accessIndex">Indexes to access the data</param>
            <returns>Sorted Data</returns>
        </member>
        <member name="P:NumSharp.NDArray.SortedData.DataAccessor">
            <summary>
            Indexes to access this sorted data. Example: If Array being sorted is shape of 3x2x3
            DataAccessor is of the form AxBxC
            </summary>
        </member>
        <member name="P:NumSharp.NDArray.SortedData.Index">
            <summary>
            Index of Sorted Element.
            </summary>
        </member>
        <member name="M:NumSharp.NDArray.SortedData.#ctor(System.Int32[],System.Int32)">
            <summary>
            Data Class Which Represents a Single Sorted Data
            </summary>
        </member>
        <member name="M:NumSharp.NDArray.amax``1">
            <summary>
                Return the maximum of an array or maximum along an axis.
            </summary>
            <typeparam name="T">The expected return type, cast will be performed if necessary.</typeparam>
            <returns>Maximum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.amax(System.Int32,System.Boolean,System.Type)">
            <summary>
                Return the maximum of an array or maximum along an axis.
            </summary>
            <param name="axis">Axis or axes along which to operate.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.</param>
            <param name="dtype">the type expected as a return, null will remain the same dtype.</param>
            <returns>Maximum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.amax(System.Type)">
            <summary>
                Return the maximum of an array or maximum along an axis.
            </summary>
            <param name="dtype">the type expected as a return, null will remain the same dtype.</param>
            <returns>Maximum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.max``1">
            <summary>
                Return the maximum of an array or maximum along an axis.
            </summary>
            <typeparam name="T">The expected return type, cast will be performed if necessary.</typeparam>
            <returns>Maximum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.max(System.Int32,System.Boolean,System.Type)">
            <summary>
                Return the maximum of an array or maximum along an axis.
            </summary>
            <param name="axis">Axis or axes along which to operate.</param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.</param>
            <param name="dtype">the type expected as a return, null will remain the same dtype.</param>
            <returns>Maximum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.max(System.Type)">
            <summary>
                Return the maximum of an array or maximum along an axis.
            </summary>
            <param name="dtype">the type expected as a return, null will remain the same dtype.</param>
            <returns>Maximum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.amin``1">
            <summary>
                Return the minimum of an array or minimum along an axis.
            </summary>
            <typeparam name="T">The expected return type, cast will be performed if necessary.</typeparam>
            <returns>Minimum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amin.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.amin(System.Int32,System.Boolean,System.Type)">
            <summary>
                Return the minimum of an array or minimum along an axis.
            </summary>
            <param name="axis">Axis or axes along which to operate. </param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.</param>
            <param name="dtype">the type expected as a return, null will remain the same dtype.</param>
            <returns>Minimum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amin.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.amin(System.Type)">
            <summary>
                Return the minimum of an array or minimum along an axis.
            </summary>
            <param name="dtype">the type expected as a return, null will remain the same dtype.</param>
            <returns>Minimum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amin.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.min``1">
            <summary>
                Return the minimum of an array or minimum along an axis.
            </summary>
            <typeparam name="T">The expected return type, cast will be performed if necessary.</typeparam>
            <returns>Minimum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amin.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.min(System.Int32,System.Boolean,System.Type)">
            <summary>
                Return the minimum of an array or minimum along an axis.
            </summary>
            <param name="axis">Axis or axes along which to operate. </param>
            <param name="keepdims">If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.</param>
            <param name="dtype">the type expected as a return, null will remain the same dtype.</param>
            <returns>Minimum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amin.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.min(System.Type)">
            <summary>
                Return the minimum of an array or minimum along an axis.
            </summary>
            <param name="dtype">the type expected as a return, null will remain the same dtype.</param>
            <returns>Minimum of a. If axis is None, the result is a scalar value. If axis is given, the result is an array of dimension a.ndim - 1.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.amin.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.argmax">
            <summary>
                Returns the indices of the maximum values along an axis.
            </summary>
            <returns>The index of the maximal value in the array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmax.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.argmax(System.Int32)">
            <summary>
                Returns the indices of the maximum values along an axis.
            </summary>
            <returns>Array of indices into the array. It has the same shape as a.shape with the dimension along axis removed.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmax.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.argmin">
            <summary>
                Returns the indices of the minimum values along an axis.
            </summary>
            <returns>The index of the minimum value in the array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmin.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.argmin(System.Int32)">
            <summary>
                Returns the indices of the minimum values along an axis.
            </summary>
            <returns>Array of indices into the array. It has the same shape as a.shape with the dimension along axis removed.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmin.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.mean">
            <summary>
                Compute the arithmetic mean along the specified axis.
                Returns the average of the array elements.
                The average is taken over the flattened array by default, otherwise over the specified axis.
                float64 intermediate and return values are used for integer inputs.
            </summary>
            <returns> returns a new array containing the mean values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.mean(System.Int32)">
            <summary>
                Compute the arithmetic mean along the specified axis.
                Returns the average of the array elements.
                The average is taken over the flattened array by default, otherwise over the specified axis.
                float64 intermediate and return values are used for integer inputs.
            </summary>
            <param name="axis">Axis or axes along which the means are computed. The default is to compute the mean of the flattened array.</param>
            <returns> returns a new array containing the mean values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.mean(System.Int32,System.Type,System.Boolean)">
            <summary>
                Compute the arithmetic mean along the specified axis.
                Returns the average of the array elements.
                The average is taken over the flattened array by default, otherwise over the specified axis.
                float64 intermediate and return values are used for integer inputs.
            </summary>
            <param name="axis">Axis or axes along which the means are computed. The default is to compute the mean of the flattened array.</param>
            <param name="type">Type to use in computing the mean. For integer inputs, the default is float64; for floating point inputs, it is the same as the input dtype.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
                If the default value is passed, then keepdims will not be passed through to the mean method of sub-classes of ndarray, however any non-default value will be.If the sub-class’ method does not implement keepdims any exceptions will be raised.
            </param>
            <returns> returns a new array containing the mean values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.mean(System.Int32,NumSharp.NPTypeCode,System.Boolean)">
            <summary>
                Compute the arithmetic mean along the specified axis.
                Returns the average of the array elements.
                The average is taken over the flattened array by default, otherwise over the specified axis.
                float64 intermediate and return values are used for integer inputs.
            </summary>
            <param name="axis">Axis or axes along which the means are computed. The default is to compute the mean of the flattened array.</param>
            <param name="type">Type to use in computing the mean. For integer inputs, the default is float64; for floating point inputs, it is the same as the input dtype.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
                If the default value is passed, then keepdims will not be passed through to the mean method of sub-classes of ndarray, however any non-default value will be.If the sub-class’ method does not implement keepdims any exceptions will be raised.
            </param>
            <returns> returns a new array containing the mean values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.mean(System.Int32,System.Boolean)">
            <summary>
                Compute the arithmetic mean along the specified axis.
                Returns the average of the array elements.
                The average is taken over the flattened array by default, otherwise over the specified axis.
                float64 intermediate and return values are used for integer inputs.
            </summary>
            <param name="axis">Axis or axes along which the means are computed. The default is to compute the mean of the flattened array.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
                If the default value is passed, then keepdims will not be passed through to the mean method of sub-classes of ndarray, however any non-default value will be.If the sub-class’ method does not implement keepdims any exceptions will be raised.
            </param>
            <returns> returns a new array containing the mean values, otherwise a reference to the output array is returned.</returns>
        </member>
        <member name="M:NumSharp.NDArray.std(System.Boolean,System.Nullable{System.Int32},System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Compute the standard deviation along the specified axis.
                Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
            </param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <param name="dtype"></param>
            <returns> returns a new array containing the std values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.std(System.Int32,System.Boolean,System.Nullable{System.Int32},System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Compute the standard deviation along the specified axis.
                Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="axis">Axis or axes along which the standard deviation is computed. The default is to compute the standard deviation of the flattened array.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
            </param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <param name="dtype"></param>
            <returns> returns a new array containing the std values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.var(System.Boolean,System.Nullable{System.Int32},System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Compute the standard deviation along the specified axis.
                Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
            </param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <param name="dtype"></param>
            <returns> returns a new array containing the std values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html</remarks>
        </member>
        <member name="M:NumSharp.NDArray.var(System.Int32,System.Boolean,System.Nullable{System.Int32},System.Nullable{NumSharp.NPTypeCode})">
            <summary>
                Compute the standard deviation along the specified axis.
                Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.
            </summary>
            <param name="axis">Axis or axes along which the standard deviation is computed. The default is to compute the standard deviation of the flattened array.</param>
            <param name="keepdims">
                If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.
            </param>
            <param name="ddof">Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.</param>
            <param name="dtype"></param>
            <returns> returns a new array containing the std values, otherwise a reference to the output array is returned.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html</remarks>
        </member>
        <member name="T:NumSharp.Backends.DefaultEngine">
            <summary>
                Default Tensor Engine implemented in pure micro-optimized C#.
            </summary>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.ResolveReturnShape(NumSharp.Shape,NumSharp.Shape)">
            <remarks>Based on https://docs.scipy.org/doc/numpy-1.16.1/user/basics.broadcasting.html </remarks>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.ResolveReturnShape(NumSharp.Shape[])">
            <remarks>Based on https://docs.scipy.org/doc/numpy-1.16.1/user/basics.broadcasting.html </remarks>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.ResolveReturnShape(NumSharp.NDArray[])">
            <remarks>Based on https://docs.scipy.org/doc/numpy-1.16.1/user/basics.broadcasting.html </remarks>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.Broadcast(NumSharp.Shape[])">
            <remarks>Based on https://docs.scipy.org/doc/numpy-1.16.1/user/basics.broadcasting.html </remarks>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.Broadcast(NumSharp.Shape,NumSharp.Shape)">
            <remarks>Based on https://docs.scipy.org/doc/numpy-1.16.1/user/basics.broadcasting.html </remarks>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.Broadcast(NumSharp.NDArray[])">
            <remarks>Based on https://docs.scipy.org/doc/numpy-1.16.1/user/basics.broadcasting.html </remarks>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.AreBroadcastable(NumSharp.Shape[])">
            <remarks>Based on https://docs.scipy.org/doc/numpy-1.16.1/user/basics.broadcasting.html </remarks>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.AreBroadcastable(System.Int32[][])">
            <remarks>Based on https://docs.scipy.org/doc/numpy-1.16.1/user/basics.broadcasting.html </remarks>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.AreBroadcastable(NumSharp.NDArray[])">
            <remarks>Based on https://docs.scipy.org/doc/numpy-1.16.1/user/basics.broadcasting.html </remarks>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.normalize_axis_tuple(System.Int32[],System.Object,System.Boolean)">
            <summary>
                Normalizes an axis argument into a tuple of non-negative integer axes.
                This handles shorthands such as ``1`` and converts them to ``(1,)``,
                as well as performing the handling of negative indices covered by
                `normalize_axis_index`.
                By default, this forbids axes from being specified multiple times.
                    Used internally by multi-axis-checking logic.
            </summary>
            <param name="axis">The un-normalized index or indices of the axis.</param>
            <param name="argname">A prefix to put before the error message, typically the name of the argument.</param>
            <param name="allow_duplicate">If False, the default, disallow an axis from being specified twice.</param>
            <returns>The normalized axis index, such that `0 &lt;= normalized_axis &lt; ndim`</returns>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.normalize_axis_tuple(System.Int32,System.Object,System.Boolean)">
            <summary>
                Normalizes an axis argument into a tuple of non-negative integer axes.
                This handles shorthands such as ``1`` and converts them to ``(1,)``,
                as well as performing the handling of negative indices covered by
                `normalize_axis_index`.
                By default, this forbids axes from being specified multiple times.
                    Used internally by multi-axis-checking logic.
            </summary>
            <param name="axis">The un-normalized index or indices of the axis.</param>
            <param name="argname">A prefix to put before the error message, typically the name of the argument.</param>
            <param name="allow_duplicate">If False, the default, disallow an axis from being specified twice.</param>
            <returns>The normalized axis index, such that `0 &lt;&#61; normalized_axis &lt; ndim`</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NumSharp.Backends.DefaultEngine.normalize_axis_index(System.Int32,System.Int32)" -->
        <member name="F:NumSharp.Backends.DefaultEngine.ParallelAbove">
            <summary>
                The threshold atwhich after n-items in an array, computation will use Parallel.For
            </summary>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.NonZero(NumSharp.NDArray@)">
            <summary>
            Test whether all array elements evaluate to True.
            </summary>
            <param name="nd"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.All(NumSharp.NDArray)">
            <summary>
            Test whether all array elements evaluate to True.
            </summary>
            <param name="nd"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.All(NumSharp.NDArray,System.Int32)">
            <summary>
            Test whether all array elements along a given axis evaluate to True.
            </summary>
            <param name="nd"></param>
            <param name="axis"></param>
            <returns>Returns an array of bools</returns>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.AllClose(NumSharp.NDArray,NumSharp.NDArray,System.Double,System.Double,System.Boolean)">
             <summary>
             Returns True if two arrays are element-wise equal within a tolerance.
             The tolerance values are positive, typically very small numbers.The
             
             relative difference (`rtol` * abs(`b`)) and the absolute difference
             `atol` are added together to compare against the absolute difference
             between `a` and `b`.
             If either array contains one or more NaNs, False is returned.
             Infs are treated as equal if they are in the same place and of the same
             sign in both arrays.
             </summary>
             <param name="a"></param>
             <param name="b">Input array to compare with a.</param>
             <param name="rtol">The relative tolerance parameter(see Notes)</param>
             <param name="atol">The absolute tolerance parameter(see Notes)</param>
             <param name="equal_nan">Whether to compare NaN's as equal.  If True, NaN's in `a` will be
            considered equal to NaN's in `b` in the output array.</param>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.IsClose(NumSharp.NDArray,NumSharp.NDArray,System.Double,System.Double,System.Boolean)">
             <summary>
             Returns a boolean array where two arrays are element-wise equal within a
             tolerance.
             The tolerance values are positive, typically very small numbers.The    
             relative difference (`rtol` * abs(`b`)) and the absolute difference
             `atol` are added together to compare against the absolute difference
             between `a` and `b`.
             Warning: The default `atol` is not appropriate for comparing numbers
             that are much smaller than one(see Notes).
             
             See also <seealso cref="M:NumSharp.np.allclose(NumSharp.NDArray,NumSharp.NDArray,System.Double,System.Double,System.Boolean)"/>
            
            Notes:
             For finite values, isclose uses the following equation to test whether
             two floating point values are equivalent.
             <code>absolute(`a` - `b`) less than or equal to (`atol` + `rtol` * absolute(`b`))</code>
             Unlike the built-in `math.isclose`, the above equation is not symmetric
             in `a` and `b` -- it assumes `b` is the reference value -- so that
             `isclose(a, b)` might be different from `isclose(b, a)`. Furthermore,
             the default value of atol is not zero, and is used to determine what
             small values should be considered close to zero.The default value is
             appropriate for expected values of order unity: if the expected values
             are significantly smaller than one, it can result in false positives.
             `atol` should be carefully selected for the use case at hand. A zero value
             for `atol` will result in `False` if either `a` or `b` is zero.
             </summary>
             <param name="a">Input array to compare with b</param>
             <param name="b">Input array to compare with a.</param>
             <param name="rtol">The relative tolerance parameter(see Notes)</param>
             <param name="atol">The absolute tolerance parameter(see Notes)</param>
             <param name="equal_nan">Whether to compare NaN's as equal.  If True, NaN's in `a` will be
            considered equal to NaN's in `b` in the output array.</param>
            <returns>
              Returns a boolean array of where `a` and `b` are equal within the
             given tolerance.If both `a` and `b` are scalars, returns a single
             boolean value.
            </returns>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.IsFinite(NumSharp.NDArray)">
            <summary>
            Test element-wise for finiteness (not infinity or not Not a Number).
            </summary>
            <param name="a"></param>
            <returns>The result is returned as a boolean array.</returns>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.IsNan(NumSharp.NDArray)">
            <summary>
            Test element-wise for Not a Number.
            </summary>
            <returns>The result is returned as a boolean array.</returns>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.Dot(NumSharp.NDArray@,NumSharp.NDArray@)">
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html</remarks>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.MultiplyMatrix(NumSharp.NDArray,NumSharp.NDArray,NumSharp.NDArray)">
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.multiply.html</remarks>
        </member>
        <member name="M:NumSharp.Backends.DefaultEngine.MatMul(NumSharp.NDArray,NumSharp.NDArray)">
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.matmul.html</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice.Scalar(System.Object)">
            <summary>
                Wrap a <paramref name="val"/> inside <see cref="T:NumSharp.Backends.Unmanaged.ArraySlice`1"/>.
            </summary>
            <param name="val">The value to wrap into an arrayslice.</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice.Scalar(System.Object,NumSharp.NPTypeCode)">
            <summary>
                Wrap a <paramref name="val" /> inside <see cref="T:NumSharp.Backends.Unmanaged.ArraySlice`1"/>.
            </summary>
            <param name="val">The value to wrap into an arrayslice.</param>
            <param name="typeCode">The type expected to be returned</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice.Scalar``1(``0)">
            <summary>
                Wrap a <paramref name="val"/> inside <see cref="T:NumSharp.Backends.Unmanaged.ArraySlice`1"/>.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice.Allocate``1(System.Int32,``0)">
            <summary>
                Allocate an array filled filled with <paramref name="fill"/>.
            </summary>
            <param name="count">How many items this array will have (aka Count).</param>
            <param name="fill">The item to fill the newly allocated memory with.</param>
            <returns>A newly allocated array.</returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice.Allocate``1(System.Int32,System.Boolean)">
            <summary>
                Allocate an array filled with default value of <typeparamref name="T"/>.
            </summary>
            <param name="count">How many items this array will have (aka Count).</param>
            <param name="fillDefault">Should the newly allocated memory be filled with the default of <typeparamref name="T"/></param>
            <returns>A newly allocated array.</returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice.Allocate``1(System.Int32)">
            <summary>
                Allocate an array filled with noisy memory.
            </summary>
            <param name="count">How many items this array will have (aka Count).</param>
            <returns>A newly allocated array.</returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice.Wrap``1(``0*,System.Int32)">
            <summary>
                Wrap around a <paramref name="address"/> with given <paramref name="count"/> without claiming ownership of the address.
            </summary>
            <param name="address">The address at which the memory block starts</param>
            <param name="count">The count of items of type <typeparamref name="T"/> (not bytes count)</param>
            <returns>A wrapped memory block as <see cref="T:NumSharp.Backends.Unmanaged.ArraySlice`1"/></returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice.Wrap``1(System.Void*,System.Int32)">
            <summary>
                Wrap around a <paramref name="address"/> with given <paramref name="count"/> without claiming ownership of the address.
            </summary>
            <param name="address">The address at which the memory block starts</param>
            <param name="count">The count of items of type <typeparamref name="T"/> (not bytes count)</param>
            <returns>A wrapped memory block as <see cref="T:NumSharp.Backends.Unmanaged.ArraySlice`1"/></returns>
        </member>
        <member name="T:NumSharp.Backends.Unmanaged.ArraySlice`1">
            <summary>
                <see cref="T:NumSharp.Backends.Unmanaged.ArraySlice`1"/> is similar to <see cref="T:System.Span`1"/> but it can be moved around without having to follow `ref struct` rules.
            </summary>
            <typeparam name="T">The type that the <see cref="F:NumSharp.Backends.Unmanaged.ArraySlice`1.MemoryBlock"/> implements.</typeparam>
        </member>
        <member name="F:NumSharp.Backends.Unmanaged.ArraySlice`1.MemoryBlock">
            <summary>
                The memory block this <see cref="T:NumSharp.Backends.Unmanaged.ArraySlice`1"/> is stored in.
            </summary>
            <remarks>If <see cref="F:NumSharp.Backends.Unmanaged.ArraySlice`1.IsSlice"/> is false then this slice represents the entire MemoryBlock.</remarks>
        </member>
        <member name="F:NumSharp.Backends.Unmanaged.ArraySlice`1.IsSlice">
            <summary>
                Is this <see cref="T:NumSharp.Backends.Unmanaged.ArraySlice`1"/> a smaller part/slice of an unmanaged allocation?
            </summary>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.#ctor(NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock{`0},`0*,System.Int32)">
            <summary>
                Creates a sliced <see cref="T:NumSharp.Backends.Unmanaged.ArraySlice`1"/>.
            </summary>
            <param name="memoryBlock"></param>
            <param name="address"></param>
            <param name="count">The number of <typeparamref name="T"/> this slice should contain - relative to the <paramref name="memoryBlock"/></param>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.#ctor(NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock{`0},`0*,System.Int64)">
            <summary>
                Creates a sliced <see cref="T:NumSharp.Backends.Unmanaged.ArraySlice`1"/>.
            </summary>
            <param name="memoryBlock"></param>
            <param name="address"></param>
            <param name="count">The number of <typeparamref name="T"/> this slice should contain - relative to the <paramref name="memoryBlock"/></param>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.ArraySlice`1.NumSharp#Backends#Unmanaged#IArraySlice#Item(System.Int32)">
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.ArraySlice`1.Item(System.Int32)">
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.Fill(`0)">
            <param name="value"></param>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.Slice(System.Int32)">
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.Slice(System.Int32,System.Int32)">
            <param name="start"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.CopyTo(System.Span{`0})">
            <param name="destination"></param>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.CopyTo(System.IntPtr)">
            <summary>
                Copies the entire array to address.
            </summary>
            <param name="dst">The address to copy to</param>
            <remarks>The destiniton has to be atleast the size of this array, otherwise memory corruption is likely to occur.</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.CopyTo(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                Copies the entire array to address.
            </summary>
            <param name="dst">The address to copy to</param>
            <param name="sourceCount"></param>
            <param name="sourceOffset"></param>
            <remarks>The destiniton has to be atleast the size of this array, otherwise memory corruption is likely to occur.</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.CopyTo(System.Span{`0},System.Int32)">
            <param name="destination"></param>
            <param name="sourceOffset">offset of source via count (not bytes)</param>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.CopyTo(System.Span{`0},System.Int32,System.Int32)">
            <param name="destination"></param>
            <param name="sourceOffset">offset of source via count (not bytes)</param>
            <param name="sourceLength">How many items to copy</param>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.NumSharp#Backends#Unmanaged#IArraySlice#AsSpan``1">
            A Span representing this slice.
            <remarks>Does not perform copy.</remarks>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.ArraySlice`1.NumSharp#Backends#Unmanaged#IMemoryBlock{T}#Address">
            <summary>
                The start address of this memory block.
            </summary>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.NumSharp#Backends#Unmanaged#IArraySlice#Fill(System.Object)">
            <summary>
                Fills all indexes with <paramref name="value"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.NumSharp#Backends#Unmanaged#IArraySlice#Slice(System.Int32)">
            <summary>
                Perform a slicing on this <see cref="T:NumSharp.Backends.Unmanaged.IMemoryBlock"/> without copying data.
            </summary>
            <param name="start">The index to start from</param>
            <remarks>Creates a slice without copying.</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.NumSharp#Backends#Unmanaged#IArraySlice#Slice(System.Int32,System.Int32)">
            <summary>
                Perform a slicing on this <see cref="T:NumSharp.Backends.Unmanaged.IMemoryBlock"/> without copying data.
            </summary>
            <param name="start">The index to start from</param>
            <param name="count">The number of items to slice (not bytes)</param>
            <remarks>Creates a slice without copying.</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.NumSharp#Backends#Unmanaged#IArraySlice#CopyTo``1(System.Span{``0})">
            <param name="destination"></param>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.NumSharp#Backends#Unmanaged#IArraySlice#GetPinnableReference``1">
            <summary>
                Gets pinnable reference of the first item in the memory block storage.
            </summary>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.ArraySlice`1.NumSharp#Backends#Unmanaged#IMemoryBlock#Address">
            <summary>
                The start address of this memory block.
            </summary>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.ArraySlice`1.NumSharp#Backends#Unmanaged#IMemoryBlock#Count">
            <summary>
                How many items are stored in <see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.Address"/>?
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.ArraySlice`1.NumSharp#Backends#Unmanaged#IMemoryBlock#BytesLength">
            <summary>
                The items with length of <see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.TypeCode"/> are present in <see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.Address"/>.
            </summary>
            <remarks>Calculated by <see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.Count"/>*<see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.ItemLength"/></remarks>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.ArraySlice`1.NumSharp#Backends#Unmanaged#IMemoryBlock#TypeCode">
            <summary>
                The <see cref="T:NumSharp.NPTypeCode"/> of the type stored inside this memory block.
            </summary>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.NumSharp#Backends#Unmanaged#IArraySlice#ToArray">
            <summary>
                Copies this <see cref="T:NumSharp.Backends.Unmanaged.IArraySlice"/> contents into a new array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.DangerousFree">
            <summary>
                Performs dispose on the internal unmanaged memory block.<br></br>
            </summary>
            <remarks>
                Dangerous because this <see cref="T:NumSharp.Backends.Unmanaged.ArraySlice"/> might be a <see cref="F:NumSharp.Backends.Unmanaged.ArraySlice`1.IsSlice"/> therefore there might be other slices that point to current <see cref="F:NumSharp.Backends.Unmanaged.ArraySlice`1.MemoryBlock"/>.<br></br>
                So releasing the <see cref="F:NumSharp.Backends.Unmanaged.ArraySlice`1.MemoryBlock"/> might cause memory corruption elsewhere.<br></br>
                It is best to leave MemoryBlock to GC.
            </remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.ToArray">
            <summary>
            Copies the contents of this span into a new array.  This heap
            allocates, so should generally be avoided, however it is sometimes
            necessary to bridge the gap with APIs written in terms of arrays.
            </summary>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.Allocate(System.Int32,`0)">
            <summary>
                Allocate an array filled filled with <paramref name="fill"/>.
            </summary>
            <param name="count">How many items this array will have (aka Count).</param>
            <param name="fill">The item to fill the newly allocated memory with.</param>
            <returns>A newly allocated array.</returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.Allocate(System.Int32,System.Boolean)">
            <summary>
                Allocate an array filled with default value of <typeparamref name="T"/>.
            </summary>
            <param name="count">How many items this array will have (aka Count).</param>
            <param name="fillDefault">Should the newly allocated memory be filled with the default of <typeparamref name="T"/></param>
            <returns>A newly allocated array.</returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.Allocate(System.Int32)">
            <summary>
                Allocate an array filled with noisy memory.
            </summary>
            <param name="count">How many items this array will have (aka Count).</param>
            <returns>A newly allocated array.</returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.ArraySlice`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.IArraySlice.AsSpan``1">
            A Span representing this slice.
            <remarks>Does not perform copy.</remarks>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.IArraySlice.Item(System.Int32)">
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.IArraySlice.Fill(System.Object)">
            <summary>
                Fills all indexes with <paramref name="value"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.IArraySlice.Slice(System.Int32)">
            <summary>
                Perform a slicing on this <see cref="T:NumSharp.Backends.Unmanaged.IMemoryBlock"/> without copying data.
            </summary>
            <param name="start">The index to start from</param>
            <remarks>Creates a slice without copying.</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.IArraySlice.Slice(System.Int32,System.Int32)">
            <summary>
                Perform a slicing on this <see cref="T:NumSharp.Backends.Unmanaged.IMemoryBlock"/> without copying data.
            </summary>
            <param name="start">The index to start from</param>
            <param name="count">The number of items to slice (not bytes)</param>
            <remarks>Creates a slice without copying.</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.IArraySlice.CopyTo``1(System.Span{``0})">
            <param name="destination"></param>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.IArraySlice.GetPinnableReference``1">
            <summary>
                Gets pinnable reference of the first item in the memory block storage.
            </summary>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.IArraySlice.DangerousFree">
            <summary>
                Performs dispose on the internal unmanaged memory block.<br></br>
            </summary>
            <remarks>
                Dangerous because this <see cref="T:NumSharp.Backends.Unmanaged.IArraySlice"/> might be a <see cref="P:NumSharp.Shape.IsSliced"/> therefore there might be other slices that point to current <see cref="P:NumSharp.Backends.Unmanaged.IArraySlice.MemoryBlock"/>.<br></br>
                So releasing the <see cref="P:NumSharp.Backends.Unmanaged.IArraySlice.MemoryBlock"/> might cause memory corruption elsewhere.<br></br>
                It is best to leave MemoryBlock to GC.
            </remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.IArraySlice.ToArray">
            <summary>
                Copies this <see cref="T:NumSharp.Backends.Unmanaged.IArraySlice"/> contents into a new array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.IMemoryBlock.ItemLength">
            <summary>
                The size of a single item stored in <see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.Address"/>.
            </summary>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.IMemoryBlock.Address">
            <summary>
                The start address of this memory block.
            </summary>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.IMemoryBlock.Count">
            <summary>
                How many items are stored in <see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.Address"/>.
            </summary>
            <remarks>Not to confuse with <see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.BytesLength"/></remarks>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.IMemoryBlock.BytesLength">
            <summary>
                How many bytes are stored in this memory block.
            </summary>
            <remarks>Calculated by <see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.Count"/>*<see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.ItemLength"/></remarks>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.IMemoryBlock.TypeCode">
            <summary>
                The <see cref="T:NumSharp.NPTypeCode"/> of the type stored inside this memory block.
            </summary>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.IMemoryBlock`1.Address">
            <summary>
                The start address of this memory block.
            </summary>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedHelper.CopyTo(NumSharp.Backends.Unmanaged.IMemoryBlock,NumSharp.Backends.Unmanaged.IMemoryBlock)">
            <summary>
                Copies the entire contents of this storage to given address (using <see cref="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)"/>).
            </summary>
            <param name="src"></param>
            <param name="dst">The block to copy to.</param>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedHelper.CopyTo(NumSharp.Backends.Unmanaged.IMemoryBlock,NumSharp.Backends.Unmanaged.IMemoryBlock,System.Int32)">
            <summary>
                Copies the entire contents of this storage to given address (using <see cref="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)"/>).
            </summary>
            <param name="src"></param>
            <param name="dst">The block to copy to.</param>
            <param name="countOffsetDesitinion"></param>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedHelper.CopyTo(NumSharp.Backends.Unmanaged.IMemoryBlock,System.Void*,System.Int32)">
            <summary>
                Copies the entire contents of this storage to given address (using <see cref="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)"/>).
            </summary>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedHelper.CopyTo(NumSharp.Backends.Unmanaged.IMemoryBlock,System.Void*)">
            <summary>
                Copies the entire contents of this storage to given address.
            </summary>
            <param name="src">The source of the copying</param>
            <param name="dstAddress">The address to copy to.</param>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock.CastTo(NumSharp.Backends.Unmanaged.IMemoryBlock,NumSharp.NPTypeCode)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="to">The type to cast this memory block to.</param>
            <returns></returns>
            <remarks>Returns a copy.</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock.CastTo``1(NumSharp.Backends.Unmanaged.IMemoryBlock)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
            <remarks>Returns a copy.</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock.CastTo``2(NumSharp.Backends.Unmanaged.IMemoryBlock{``0})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
            <remarks>Returns a copy.</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock.CastTo``2(NumSharp.Backends.Unmanaged.IMemoryBlock)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
            <remarks>Returns a copy.</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock.CastTo(NumSharp.Backends.Unmanaged.IMemoryBlock,NumSharp.Backends.Unmanaged.IMemoryBlock,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="out"></param>
            <param name="bytesOffset"></param>
            <param name="countOffset"></param>
            <returns></returns>
            <remarks>Returns a copy.</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="count">The length in objects of <typeparamref name="T"/> and not in bytes.</param>
            <remarks>Does claim ownership since allocation is publicly.</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.#ctor(`0*,System.Int64)">
            <summary>
                Construct as a wrapper around pointer and given length without claiming ownership.
            </summary>
            <param name="ptr"></param>
            <param name="count">The length in objects of <typeparamref name="T"/> and not in bytes.</param>
            <remarks>Does claim ownership.</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.#ctor(`0*,System.Int64,System.Action)">
            <summary>
                Construct with externally allocated memory and a custom <paramref name="dispose"/> function.
            </summary>
            <param name="start"></param>
            <param name="count">The length in objects of <typeparamref name="T"/> and not in bytes.</param>
            <param name="dispose"></param>
            <remarks>Does claim ownership.</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.#ctor(System.Runtime.InteropServices.GCHandle,System.Int64)">
            <summary>
                Construct with externally allocated memory settings this memory block as owner.
            </summary>
            <param name="handle"></param>
            <param name="count">The length in objects of <typeparamref name="T"/> and not in bytes.</param>
            <remarks>Does claim ownership.</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.#ctor(System.Runtime.InteropServices.GCHandle,System.Int64,System.Action)">
            <summary>
                Construct with externally allocated memory and a custom <paramref name="dispose"/> function.
            </summary>
            <param name="handle"></param>
            <param name="count">The length in objects of <typeparamref name="T"/> and not in bytes.</param>
            <param name="dispose"></param>
            <remarks>Does claim ownership.</remarks>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.#ctor(System.Int64,`0)">
            <summary>
            
            </summary>
            <param name="count">The length in objects of <typeparamref name="T"/> and not in bytes.</param>
            <param name="fill"></param>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.Copy(System.Void*,System.Int32)">
            <summary>
                
            </summary>
            <param name="address">The address of the first <typeparamref name="T"/></param>
            <param name="count">How many <typeparamref name="T"/> to copy, not how many bytes.</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.Copy(System.IntPtr,System.Int32)">
            <summary>
                
            </summary>
            <param name="address"></param>
            <param name="count">How many <typeparamref name="T"/> to copy, not how many bytes.</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.Copy(`0*,System.Int32)">
            <summary>
                
            </summary>
            <param name="address">The address of the first <typeparamref name="T"/></param>
            <param name="count">How many <typeparamref name="T"/> to copy, not how many bytes.</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.Fill(`0)">
            <summary>
                Fills the contents of this span with the given value.
            </summary>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.Fill(`0,System.Int64,System.Int64)">
            <summary>
                Fills the contents of this span with the given value.
            </summary>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is <see langword="null" />. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex" /> is less than zero. </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array" /> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.Clone">
            <summary>
                Performs a copy to this memory block.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.NumSharp#Backends#Unmanaged#IMemoryBlock#ItemLength">
            <summary>
                The size of a single item stored in <see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.Address"/>.
            </summary>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.NumSharp#Backends#Unmanaged#IMemoryBlock{T}#Address">
            <summary>
                The start address of this memory block.
            </summary>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.NumSharp#Backends#Unmanaged#IMemoryBlock#Address">
            <summary>
                The start address of this memory block.
            </summary>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.NumSharp#Backends#Unmanaged#IMemoryBlock#Count">
            <summary>
                How many items are stored in <see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.Address"/>?
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.NumSharp#Backends#Unmanaged#IMemoryBlock#BytesLength">
            <summary>
                The items with length of <see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.TypeCode"/> are present in <see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.Address"/>.
            </summary>
            <remarks>Calculated by <see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.Count"/>*<see cref="P:NumSharp.Backends.Unmanaged.IMemoryBlock.ItemLength"/></remarks>
        </member>
        <member name="P:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.NumSharp#Backends#Unmanaged#IMemoryBlock#TypeCode">
            <summary>
                The <see cref="T:NumSharp.NPTypeCode"/> of the type stored inside this memory block.
            </summary>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.System#ICloneable#Clone">
            <summary>Creates a new object that is a copy of the current instance.</summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.Equals(NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock{`0})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <param name="obj">The object to compare with the current instance. </param>
            <returns>
            <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.op_Equality(NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock{`0},NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock{`0})">
            <summary>Returns a value that indicates whether the values of two <see cref="T:NumSharp.Backends.Unmanaged.UnmanagedArray`1" /> objects are equal.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.op_Inequality(NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock{`0},NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock{`0})">
            <summary>Returns a value that indicates whether two <see cref="T:NumSharp.Backends.Unmanaged.UnmanagedArray`1" /> objects have different values.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.Disposer.#ctor(System.IntPtr)">
            <summary>
                Construct a AllocationType.AllocHGlobal
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.Disposer.#ctor(System.Runtime.InteropServices.GCHandle)">
            <summary>
                Construct a AllocationType.GCHandle
            </summary>
            <param name="gcHandle"></param>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.Disposer.#ctor(System.Action)">
            <summary>
                Construct a AllocationType.External
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.Disposer.#ctor">
            <summary>
                Construct a AllocationType.Wrap
            </summary>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.Disposer.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:NumSharp.Backends.Unmanaged.UnmanagedMemoryBlock`1.Disposer.Finalize">
            <summary>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
        </member>
        <member name="T:NumSharp.Backends.Unmanaged.Reference`1">
            <summary>
                Holds a reference to any value.
            </summary>
        </member>
        <member name="T:NumSharp.Backends.UnmanagedStorage">
            <summary>
                Serves as a typed storage for an array.
            </summary>
            <remarks>
                Responsible for :<br></br>
                 - store data type, elements, Shape<br></br>
                 - offers methods for accessing elements depending on shape<br></br>
                 - offers methods for casting elements<br></br>
                 - offers methods for change tensor order<br></br>
                 - GetData always return reference object to the true storage<br></br>
                 - GetData{T} and SetData{T} change dtype and cast storage<br></br>
                 - CloneData always create a clone of storage and return this as reference object<br></br>
                 - CloneData{T} clone storage and cast this clone <br></br>
            </remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Alias">
            <summary>
                Creates an alias to this UnmanagedStorage.
            </summary>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Alias(NumSharp.Shape)">
            <summary>
                Creates an alias to this UnmanagedStorage with a specific shape.
            </summary>
            <remarks>Doesn't check if Shape matches the internal storage.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Alias(NumSharp.Shape@)">
            <summary>
                Creates an alias to this UnmanagedStorage with a specific shape.
            </summary>
            <remarks>Doesn't check if Shape matches the internal storage.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Cast``1">
            <summary>
                Return a casted <see cref="T:NumSharp.Backends.UnmanagedStorage"/> to a specific dtype.
            </summary>
            <typeparam name="T">The dtype to convert to</typeparam>
            <returns>A copy of this <see cref="T:NumSharp.Backends.UnmanagedStorage"/> casted to a specific dtype.</returns>
            <remarks>Always copies, If dtype==typeof(T) then a <see cref="M:NumSharp.Backends.UnmanagedStorage.Clone"/> is returned.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Cast(NumSharp.NPTypeCode)">
            <summary>
                Return a casted <see cref="T:NumSharp.Backends.UnmanagedStorage"/> to a specific dtype.
            </summary>
            <param name="typeCode">The dtype to convert to</param>
            <returns>A copy of this <see cref="T:NumSharp.Backends.UnmanagedStorage"/> casted to a specific dtype.</returns>
            <remarks>Always copies, If dtype==typeof(T) then a <see cref="M:NumSharp.Backends.UnmanagedStorage.Clone"/> is returned.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Cast(System.Type)">
            <summary>
                Return a casted <see cref="T:NumSharp.Backends.UnmanagedStorage"/> to a specific dtype.
            </summary>
            <param name="dtype">The dtype to convert to</param>
            <returns>A copy of this <see cref="T:NumSharp.Backends.UnmanagedStorage"/> casted to a specific dtype.</returns>
            <remarks>Always copies, If dtype==typeof(T) then a <see cref="M:NumSharp.Backends.UnmanagedStorage.Clone"/> is returned.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.CastIfNecessary``1">
            <summary>
                Return a casted <see cref="T:NumSharp.Backends.UnmanagedStorage"/> to a specific dtype only if necessary.
            </summary>
            <typeparam name="T">The dtype to convert to</typeparam>
            <returns>A copy of this <see cref="T:NumSharp.Backends.UnmanagedStorage"/> casted to a specific dtype.</returns>
            <remarks>Copies only if dtypes does not match <typeparamref name="T"/></remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.CastIfNecessary(NumSharp.NPTypeCode)">
            <summary>
                Return a casted <see cref="T:NumSharp.Backends.UnmanagedStorage"/> to a specific dtype only if necessary
            </summary>
            <param name="typeCode">The dtype to convert to</param>
            <returns>A copy of this <see cref="T:NumSharp.Backends.UnmanagedStorage"/> casted to a specific dtype.</returns>
            <remarks>Copies only if dtypes does not match <paramref name="typeCode"/></remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.CastIfNecessary(System.Type)">
            <summary>
                Return a casted <see cref="T:NumSharp.Backends.UnmanagedStorage"/> to a specific dtype.
            </summary>
            <param name="dtype">The dtype to convert to</param>
            <returns>A copy of this <see cref="T:NumSharp.Backends.UnmanagedStorage"/> casted to a specific dtype.</returns>
            <remarks>Copies only if dtypes does not match <paramref name="dtype"/></remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.CloneData">
            <summary>
                Clone internal storage and get reference to it
            </summary>
            <returns>reference to cloned storage as System.Array</returns>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.CloneData``1">
            <summary>
                Get all elements from cloned storage as <see cref="T:NumSharp.Backends.Unmanaged.ArraySlice`1"/> and cast if necessary.
            </summary>
            <typeparam name="T">cloned storgae dtype</typeparam>
            <returns>reference to cloned storage and casted (if necessary) as <see cref="T:NumSharp.Backends.Unmanaged.ArraySlice`1"/></returns>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Clone">
            <summary>
                Perform a complete copy of this <see cref="T:NumSharp.Backends.UnmanagedStorage"/> and <see cref="F:NumSharp.Backends.UnmanagedStorage.InternalArray"/>.
            </summary>
            <remarks>If shape is sliced, discards any slicing properties but copies only the sliced data</remarks>
        </member>
        <member name="P:NumSharp.Backends.UnmanagedStorage.DType">
            <summary>
                The data type of internal storage array.
            </summary>
            <value>numpys equal dtype</value>
            <remarks>Has to be compliant with <see cref="T:NumSharp.NPTypeCode"/>.</remarks>
        </member>
        <member name="P:NumSharp.Backends.UnmanagedStorage.TypeCode">
            <summary>
                The <see cref="T:NumSharp.NPTypeCode"/>.
            </summary>
        </member>
        <member name="P:NumSharp.Backends.UnmanagedStorage.DTypeSize">
            <summary>
                The size in bytes of a single value of <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/>
            </summary>
            <remarks>Computed by <see cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)"/></remarks>
        </member>
        <member name="P:NumSharp.Backends.UnmanagedStorage.Shape">
            <summary>
                The shape representing the data in this storage.
            </summary>
        </member>
        <member name="P:NumSharp.Backends.UnmanagedStorage.ShapeReference">
            <summary>
                The shape representing the data in this storage.
            </summary>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.AsSpan``1">
            <summary>
                Spans <see cref="F:NumSharp.Backends.UnmanagedStorage.Address"/> &lt;-&gt; <see cref="F:NumSharp.Backends.UnmanagedStorage.Count"/>
            </summary>
            <remarks>This ignores completely slicing.</remarks>
        </member>
        <member name="P:NumSharp.Backends.UnmanagedStorage.Engine">
            <summary>
                The engine that was used to create this <see cref="T:NumSharp.Backends.UnmanagedStorage"/>.
            </summary>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.CreateBroadcastedUnsafe(NumSharp.Backends.Unmanaged.IArraySlice,NumSharp.Shape)">
            <summary>
                Wraps given <paramref name="arraySlice"/> in <see cref="T:NumSharp.Backends.UnmanagedStorage"/> with a broadcasted shape.
            </summary>
            <param name="arraySlice">The slice to wrap </param>
            <param name="shape">The shape to represent this storage, can be a broadcast.</param>
            <remarks>Named unsafe because there it does not perform a check if the shape is valid for this storage size.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.CreateBroadcastedUnsafe(NumSharp.Backends.UnmanagedStorage,NumSharp.Shape)">
            <summary>
                Wraps given <paramref name="storage"/> in <see cref="T:NumSharp.Backends.UnmanagedStorage"/> with a broadcasted shape.
            </summary>
            <param name="storage">The storage to take <see cref="F:NumSharp.Backends.UnmanagedStorage.InternalArray"/> from.</param>
            <param name="shape">The shape to represent this storage, can be a broadcast.</param>
            <remarks>Named unsafe because there it does not perform a check if the shape is valid for this storage size.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.#ctor(NumSharp.Backends.Unmanaged.IArraySlice)">
            <summary>
                Scalar constructor
            </summary>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.#ctor(System.Type)">
            <summary>
                Creates an empty storage of type <paramref name="dtype"/>.
            </summary>
            <param name="dtype">The type of this storage</param>
            <remarks>Usually <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/> is called after this constructor.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.#ctor(NumSharp.NPTypeCode)">
            <summary>
                Creates an empty storage of type <paramref name="typeCode"/>.
            </summary>
            <param name="typeCode">The type of this storage</param>
            <remarks>Usually <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/> is called after this constructor.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.#ctor(NumSharp.Backends.Unmanaged.IArraySlice,NumSharp.Shape)">
            <summary>
                Wraps given <paramref name="arraySlice"/> in <see cref="T:NumSharp.Backends.UnmanagedStorage"/>.
            </summary>
            <param name="arraySlice">The slice to wrap </param>
            <param name="shape"></param>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetInternalArray(System.Array)">
            <summary>
                Replace internal storage array with given array.
            </summary>
            <param name="array">The array to set as internal storage</param>
            <exception cref="T:System.InvalidCastException">When type of <paramref name="array"/> does not match <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/> of this storage</exception>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetInternalArray(NumSharp.Backends.Unmanaged.IArraySlice)">
            <summary>
                Replace internal storage array with given array.
            </summary>
            <param name="array">The array to set as internal storage</param>
            <exception cref="T:System.InvalidCastException">When type of <paramref name="array"/> does not match <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/> of this storage</exception>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage._ChangeTypeOfArray(System.Array,System.Type)">
            <summary>
                Changes the type of <paramref name="sourceArray"/> to <paramref name="to_dtype"/> if necessary.
            </summary>
            <param name="sourceArray">The array to change his type</param>
            <param name="to_dtype">The type to change to.</param>
            <remarks>If the return type is equal to source type, this method does not return a copy.</remarks>
            <returns>Returns <paramref name="sourceArray"/> or new array with changed type to <paramref name="to_dtype"/></returns>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage._ChangeTypeOfArray``1(NumSharp.Backends.Unmanaged.IArraySlice)">
            <summary>
                Changes the type of <paramref name="sourceArray"/> to <see cref="T:NumSharp.Backends.Unmanaged.ArraySlice`1"/> if necessary.
            </summary>
            <param name="sourceArray">The array to change his type</param>
            <remarks>If the return type is equal to source type, this method does not return a copy.</remarks>
            <returns>Returns <paramref name="sourceArray"/> or new array with changed type to <see cref="T:NumSharp.Backends.Unmanaged.ArraySlice`1"/></returns>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)">
            <summary>
                Allocates a new <see cref="T:System.Array"/> into memory.
            </summary>
            <param name="dtype">The type of the Array, if null <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/> is used.</param>
            <param name="shape">The shape of the array.</param>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type,System.Boolean)">
            <summary>
                Allocates a new <see cref="T:System.Array"/> into memory.
            </summary>
            <param name="dtype">The type of the Array, if null <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/> is used.</param>
            <param name="shape">The shape of the array.</param>
            <param name="fillZeros"></param>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,NumSharp.NPTypeCode,System.Boolean)">
            <summary>
                Allocates a new <see cref="T:System.Array"/> into memory.
            </summary>
            <param name="dtype">The type of the Array, if null <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/> is used.</param>
            <param name="shape">The shape of the array.</param>
            <param name="fillZeros"></param>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Allocate(System.Array)">
            <summary>
                Allocate <paramref name="array"/> into memory.
            </summary>
            <param name="array">The array to set as internal data storage</param>
            <remarks>Does not copy <paramref name="array"/></remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Allocate``1(NumSharp.Backends.Unmanaged.ArraySlice{``0},NumSharp.Shape,System.Boolean)">
            <summary>
                Assign this <see cref="T:NumSharp.Backends.Unmanaged.ArraySlice`1"/> as the internal array storage and assign <paramref name="shape"/> to it.
            </summary>
            <param name="values">The array to set as internal data storage</param>
            <param name="shape">The shape of the array.</param>
            <param name="copy">Should perform a copy of <paramref name="values"/></param>
            <remarks>Does not copy <paramref name="values"/></remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Backends.Unmanaged.IArraySlice,NumSharp.Shape,System.Boolean)">
            <summary>
                Allocate <paramref name="values"/> into memory.
            </summary>
            <param name="values">The array to set as internal data storage</param>
            <param name="shape">The shape of the array.</param>
            <param name="copy">Should perform a copy of <paramref name="values"/></param>
            <remarks>Does not copy <paramref name="values"/></remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Allocate(System.Array,NumSharp.Shape)">
            <summary>
                Allocate <paramref name="values"/> into memory.
            </summary>
            <param name="values">The array to set as internal data storage</param>
            <remarks>Does not copy <paramref name="values"/></remarks>
            <param name="shape">The shape of given array</param>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Allocate``1(``0[])">
            <summary>
                Allocate <paramref name="values"/> into memory.
            </summary>
            <param name="values">The array to set as internal data storage</param>
            <remarks>Does not copy <paramref name="values"/></remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.CopyTo(System.IntPtr)">
            <summary>
                Copies the entire contents of this storage to given address.
            </summary>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.CopyTo(System.Void*)">
            <summary>
                Copies the entire contents of this storage to given address.
            </summary>
            <param name="address">The address to copy to.</param>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.CopyTo(NumSharp.Backends.Unmanaged.IMemoryBlock)">
            <summary>
                Copies the entire contents of this storage to given address (using <see cref="F:NumSharp.Backends.UnmanagedStorage.Count"/>).
            </summary>
            <param name="block">The block to copy to.</param>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.CopyTo``1(NumSharp.Backends.Unmanaged.IMemoryBlock{``0})">
            <summary>
                Copies the entire contents of this storage to given address (using <see cref="F:NumSharp.Backends.UnmanagedStorage.Count"/>).
            </summary>
            <param name="block">The block to copy to.</param>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.CopyTo``1(``0*)">
            <summary>
                Copies the entire contents of this storage to given address.
            </summary>
            <param name="address">The address to copy to.</param>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.CopyTo``1(``0[])">
            <summary>
                Copies the entire contents of this storage to given array.
            </summary>
            <param name="array">The array to copy to.</param>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.GetValue(System.Int32[])">
            <summary>
                Retrieves value of unspecified type (will figure using <see cref="T:NumSharp.NPTypeCode"/>).
            </summary>
            <param name="indices">The shape's indices to get.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">When <see cref="T:System.Object"/> is not <see cref="T:NumSharp.NPTypeCode"/> is not </exception>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.GetData(System.Int32[])">
            <summary>
                Gets a subshape based on given <paramref name="indices"/>.
            </summary>
            <param name="indices"></param>
            <returns></returns>
            <remarks>Does not copy, returns a <see cref="T:NumSharp.Slice"/> or a memory slice</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.GetData(System.Int32*,System.Int32)">
            <summary>
                Gets a subshape based on given <paramref name="ndims"/>.
            </summary>
            <param name="ndims"></param>
            <param name="dims"></param>
            <returns></returns>
            <remarks>Does not copy, returns a <see cref="T:NumSharp.Slice"/> or a memory slice</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.GetData``1">
            <summary>
                Get reference to internal data storage and cast (also copies) elements to new dtype if necessary
            </summary>
            <typeparam name="T">new storage data type</typeparam>
            <returns>reference to internal (casted) storage as T[]</returns>
            <remarks>Copies if <typeparamref name="T"/> does not equal to <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/> or if Shape is sliced.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.GetValue``1(System.Int32[])">
            <summary>
                Get single value from internal storage as type T and cast dtype to T
            </summary>
            <param name="indices">indices</param>
            <typeparam name="T">new storage data type</typeparam>
            <returns>element from internal storage</returns>
            <exception cref="T:System.NullReferenceException">When <typeparamref name="T"/> does not equal to <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/></exception>
            <remarks>If you provide less indices than there are dimensions, the rest are filled with 0.</remarks> //TODO! doc this in other similar methods
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.GetData">
            <summary>
            Get reference to internal data storage
            </summary>
            <returns>reference to internal storage as System.Array</returns>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.GetBoolean(System.Int32[])">
            <summary>
                Retrieves value of type <see cref="T:System.Boolean"/> from internal storage.
            </summary>
            <param name="indices">The shape's indices to get.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">When <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/> is not <see cref="T:System.Boolean"/></exception>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.GetByte(System.Int32[])">
            <summary>
                Retrieves value of type <see cref="T:System.Byte"/> from internal storage.
            </summary>
            <param name="indices">The shape's indices to get.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">When <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/> is not <see cref="T:System.Byte"/></exception>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.GetInt32(System.Int32[])">
            <summary>
                Retrieves value of type <see cref="T:System.Int32"/> from internal storage.
            </summary>
            <param name="indices">The shape's indices to get.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">When <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/> is not <see cref="T:System.Int32"/></exception>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.GetInt64(System.Int32[])">
            <summary>
                Retrieves value of type <see cref="T:System.Int64"/> from internal storage.
            </summary>
            <param name="indices">The shape's indices to get.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">When <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/> is not <see cref="T:System.Int64"/></exception>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.GetSingle(System.Int32[])">
            <summary>
                Retrieves value of type <see cref="T:System.Single"/> from internal storage.
            </summary>
            <param name="indices">The shape's indices to get.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">When <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/> is not <see cref="T:System.Single"/></exception>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.GetDouble(System.Int32[])">
            <summary>
                Retrieves value of type <see cref="T:System.Double"/> from internal storage.
            </summary>
            <param name="indices">The shape's indices to get.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">When <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/> is not <see cref="T:System.Double"/></exception>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Reshape(System.Int32[])">
            <summary>
                Changes the shape representing this storage.
            </summary>
            <exception cref="T:NumSharp.IncorrectShapeException">If shape's size mismatches current shape size.</exception>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Reshape(System.Int32[],System.Boolean)">
            <summary>
                Changes the shape representing this storage.
            </summary>
            <exception cref="T:NumSharp.IncorrectShapeException">If shape's size mismatches current shape size.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="dimensions"/>'s size == 0</exception>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Reshape(NumSharp.Shape,System.Boolean)">
            <summary>
                Changes the shape representing this storage.
            </summary>
            <exception cref="T:NumSharp.IncorrectShapeException">If shape's size mismatches current shape size.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="newShape"/>'s size == 0</exception>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.Reshape(NumSharp.Shape@,System.Boolean)">
            <summary>
                Changes the shape representing this storage.
            </summary>
            <exception cref="T:NumSharp.IncorrectShapeException">If shape's size mismatches current shape size.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="newShape"/>'s size == 0</exception>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetShapeUnsafe(NumSharp.Shape)">
            <summary>
                Set the shape of this storage without checking if sizes match.
            </summary>
            <remarks>Used during broadcasting</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetShapeUnsafe(NumSharp.Shape@)">
            <summary>
                Set the shape of this storage without checking if sizes match.
            </summary>
            <remarks>Used during broadcasting</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetAtIndexUnsafe(System.ValueType,System.Int32)">
            <summary>
                Performs a set of index without calling <see cref="M:NumSharp.Shape.TransformOffset(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetAtIndexUnsafe``1(``0,System.Int32)">
            <summary>
                Performs a set of index without calling <see cref="M:NumSharp.Shape.TransformOffset(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetValue``1(``0,System.Int32[])">
            <summary>
                Set a single value at given <paramref name="indices"/>.
            </summary>
            <param name="value">The value to set</param>
            <param name="indices">The </param>
            <remarks>
                Does not change internal storage data type.<br></br>
                If <paramref name="value"/> does not match <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/>, <paramref name="value"/> will be converted.
            </remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetValue(System.Object,System.Int32[])">
            <summary>
                Set a single value at given <paramref name="indices"/>.
            </summary>
            <param name="value">The value to set</param>
            <param name="indices">The </param>
            <remarks>
                Does not change internal storage data type.<br></br>
                If <paramref name="value"/> does not match <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/>, <paramref name="value"/> will be converted.
            </remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetData(System.Object,System.Int32[])">
            <summary>
                Set a single value at given <paramref name="indices"/>.
            </summary>
            <param name="value">The value to set</param>
            <param name="indices">The </param>
            <remarks>
                Does not change internal storage data type.<br></br>
                If <paramref name="value"/> does not match <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/>, <paramref name="value"/> will be converted.
            </remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetData(NumSharp.NDArray,System.Int32[])">
            <summary>
                Set a <see cref="T:NumSharp.NDArray"/> at given <paramref name="indices"/>.
            </summary>
            <param name="value">The value to set</param>
            <param name="indices">The </param>
            <remarks>
                Does not change internal storage data type.<br></br>
                If <paramref name="value"/> does not match <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/>, <paramref name="value"/> will be converted.
            </remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetData(NumSharp.Backends.Unmanaged.IArraySlice,System.Int32[])">
            <summary>
                Set a <see cref="T:NumSharp.Backends.Unmanaged.IArraySlice"/> at given <paramref name="indices"/>.
            </summary>
            <param name="value">The value to set</param>
            <param name="indices">The </param>
            <remarks>
                Does not change internal storage data type.<br></br>
                If <paramref name="value"/> does not match <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/>, <paramref name="value"/> will be converted.
            </remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetBoolean(System.Boolean,System.Int32[])">
            <summary>
                Sets a bool at specific coordinates.
            </summary>
            <param name="value">The values to assign</param>
            <param name="indices">The coordinates to set <paramref name="value"/> at.</param>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetByte(System.Byte,System.Int32[])">
            <summary>
                Sets a byte at specific coordinates.
            </summary>
            <param name="value">The values to assign</param>
            <param name="indices">The coordinates to set <paramref name="value"/> at.</param>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetInt32(System.Int32,System.Int32[])">
            <summary>
                Sets a int at specific coordinates.
            </summary>
            <param name="value">The values to assign</param>
            <param name="indices">The coordinates to set <paramref name="value"/> at.</param>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetInt64(System.Int64,System.Int32[])">
            <summary>
                Sets a long at specific coordinates.
            </summary>
            <param name="value">The values to assign</param>
            <param name="indices">The coordinates to set <paramref name="value"/> at.</param>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetSingle(System.Single,System.Int32[])">
            <summary>
                Sets a float at specific coordinates.
            </summary>
            <param name="value">The values to assign</param>
            <param name="indices">The coordinates to set <paramref name="value"/> at.</param>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.SetDouble(System.Double,System.Int32[])">
            <summary>
                Sets a double at specific coordinates.
            </summary>
            <param name="value">The values to assign</param>
            <param name="indices">The coordinates to set <paramref name="value"/> at.</param>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.ReplaceData(System.Array)">
            <summary>
                Sets <paramref name="values"/> as the internal data source and changes the internal storage data type to <paramref name="values"/> type.
            </summary>
            <param name="values"></param>
            <remarks>Copies values only if <paramref name="values"/> type does not match <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/> and doesn't change shape.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.ReplaceData(NumSharp.Backends.Unmanaged.IArraySlice)">
            <summary>
                Sets <paramref name="values"/> as the internal data source and changes the internal storage data type to <paramref name="values"/> type.
            </summary>
            <param name="values"></param>
            <remarks>Does not copy values and doesn't change shape.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.ReplaceData(NumSharp.Backends.Unmanaged.IArraySlice,System.Type)">
            <summary>
                Sets <paramref name="values"/> as the internal data source and changes the internal storage data type to <paramref name="values"/> type.
            </summary>
            <param name="values"></param>
            <param name="dtype"></param>
            <remarks>Does not copy values and doesn't change shape.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.ReplaceData(System.Array,System.Type)">
            <summary>
            Set an Array to internal storage, cast it to new dtype and change dtype  
            </summary>
            <param name="values"></param>
            <param name="dtype"></param>
            <remarks>Does not copy values unless cast in necessary and doesn't change shape.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.ReplaceData(System.Array,NumSharp.NPTypeCode)">
            <summary>
                Set an Array to internal storage, cast it to new dtype and if necessary change dtype  
            </summary>
            <param name="values"></param>
            <param name="typeCode"></param>
            <remarks>Does not copy values unless cast is necessary and doesn't change shape.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.ReplaceData(NumSharp.NDArray)">
            <summary>
                Sets <paramref name="nd"/> as the internal data storage and changes the internal storage data type to <paramref name="nd"/> type.
            </summary>
            <param name="nd"></param>
            <remarks>Does not copy values and does change shape and dtype.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.ReplaceData(System.Array,NumSharp.Shape)">
            <summary>
                Sets <paramref name="values"/> as the internal data source and changes the internal storage data type to <paramref name="values"/> type.
            </summary>
            <param name="values"></param>
            <param name="shape">The shape to set in this storage. (without checking if shape matches storage)</param>
            <remarks>Copies values only if <paramref name="values"/> type does not match <see cref="P:NumSharp.Backends.UnmanagedStorage.DType"/> and doesn't change shape. Doesn't check if shape size matches.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.ReplaceData(NumSharp.Backends.Unmanaged.IArraySlice,NumSharp.Shape)">
            <summary>
                Sets <paramref name="values"/> as the internal data source and changes the internal storage data type to <paramref name="values"/> type.
            </summary>
            <param name="values"></param>
            <param name="shape">The shape to set in this storage. (without checking if shape matches storage)</param>
            <remarks>Does not copy values and doesn't change shape. Doesn't check if shape size matches.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.ReplaceData(NumSharp.Backends.Unmanaged.IArraySlice,System.Type,NumSharp.Shape)">
            <summary>
                Sets <paramref name="values"/> as the internal data source and changes the internal storage data type to <paramref name="values"/> type.
            </summary>
            <param name="values"></param>
            <param name="dtype"></param>
            <param name="shape">The shape to set in this storage. (without checking if shape matches storage)</param>
            <remarks>Does not copy values and doesn't change shape. Doesn't check if shape size matches.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.ReplaceData(System.Array,System.Type,NumSharp.Shape)">
            <summary>
            Set an Array to internal storage, cast it to new dtype and change dtype  
            </summary>
            <param name="values"></param>
            <param name="dtype"></param>
            <param name="shape">The shape to set in this storage. (without checking if shape matches storage)</param>
            <remarks>Does not copy values unless cast in necessary and doesn't change shape. Doesn't check if shape size matches.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.ReplaceData(System.Array,NumSharp.NPTypeCode,NumSharp.Shape)">
            <summary>
                Set an Array to internal storage, cast it to new dtype and if necessary change dtype  
            </summary>
            <param name="values"></param>
            <param name="typeCode"></param>
            <param name="shape">The shape to set in this storage. (without checking if shape matches storage)</param>
            <remarks>Does not copy values unless cast is necessary and doesn't change shape. Doesn't check if shape size matches.</remarks>
        </member>
        <member name="M:NumSharp.Backends.UnmanagedStorage.ReplaceData(NumSharp.NDArray,NumSharp.Shape)">
            <summary>
                Sets <paramref name="nd"/> as the internal data storage and changes the internal storage data type to <paramref name="nd"/> type.
            </summary>
            <param name="nd"></param>
            <param name="shape">The shape to set in this storage. (without checking if shape matches storage)</param>
            <remarks>Does not copy values and does change shape and dtype. Doesn't check if shape size matches.</remarks>
        </member>
        <member name="F:NumSharp.BackendType.Default">
            <summary>
                Pure micro-optimized C# implementation.
            </summary>
        </member>
        <member name="M:NumSharp.MultiIterator.Assign(NumSharp.NDArray,NumSharp.NDArray)">
            <summary>
                Assigns rhs values to lhs.
            </summary>
            <remarks>Stops at first iterator stop.</remarks>
        </member>
        <member name="M:NumSharp.MultiIterator.Assign(NumSharp.Backends.UnmanagedStorage,NumSharp.Backends.UnmanagedStorage)">
            <summary>
                Assigns rhs values to lhs.
            </summary>
            <remarks>Stops at first iterator stop.</remarks>
        </member>
        <member name="M:NumSharp.MultiIterator.AssignBroadcast``1(NumSharp.NDIterator,NumSharp.NDIterator)">
            <summary>
                Assigns rhs values to lhs.
            </summary>
            <remarks>Stops at first iterator stop.</remarks>
        </member>
        <member name="M:NumSharp.MultiIterator.GetIterators(NumSharp.Backends.UnmanagedStorage,NumSharp.Backends.UnmanagedStorage,System.Boolean)">
            <summary>
                Gets the iterators of <paramref name="lhs"/> and <paramref name="rhs"/>.
            </summary>
            <param name="broadcast"></param>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:NumSharp.MultiIterator.GetIterators``1(NumSharp.Backends.UnmanagedStorage,NumSharp.Backends.UnmanagedStorage,System.Boolean)">
            <summary>
                Assigns rhs values to lhs.
            </summary>
        </member>
        <member name="F:NumSharp.NDIterator`1.Shape">
            <summary>
                The shape this iterator iterates
            </summary>
        </member>
        <member name="F:NumSharp.NDIterator`1.BroadcastedShape">
            <summary>
                The broadcasted version of <see cref="F:NumSharp.NDIterator`1.Shape"/>.
            </summary>
            <remarks>Might be null when iterating a non-broadcasted class</remarks>
        </member>
        <member name="F:NumSharp.NDIterator`1.AutoReset">
            <summary>
                Does this iterator resets automatically when it finishes?
            </summary>
            <remarks>When this is true, <see cref="F:NumSharp.NDIterator`1.HasNext"/> always returns true.</remarks>
        </member>
        <member name="F:NumSharp.NDIterator`1.size">
            <summary>
                The size of this iterator.
            </summary>
        </member>
        <member name="F:NumSharp.NDIterator`1.MoveNext">
            <summary>
                Returns a function that when called, moves to next iteration and return the next value.
            </summary>
            <remarks>Make sure to check <see cref="F:NumSharp.NDIterator`1.HasNext"/> first.</remarks>
        </member>
        <member name="F:NumSharp.NDIterator`1.MoveNextReference">
            <summary>
                Returns a function that when called, moves to next iteration and return a reference to the next value.
            </summary>
            <remarks>Make sure to check <see cref="F:NumSharp.NDIterator`1.HasNext"/> first.</remarks>
        </member>
        <member name="F:NumSharp.NDIterator`1.HasNext">
            <summary>
                Returns a function that when called, checks if there is a next element in this iterator.
            </summary>
        </member>
        <member name="F:NumSharp.NDIterator`1.Reset">
            <summary>
                Resets internal pointer/counter.
            </summary>
        </member>
        <member name="M:NumSharp.NDIterator`1.SetMode(System.Boolean,NumSharp.Shape)">
            <summary>
                Set the mode according to given parameters
            </summary>
            <param name="autoreset">The iterator will transparently reset after it is done.</param>
            <param name="reshape">Provide a different shape to the iterator.</param>
        </member>
        <member name="M:NumSharp.NDIterator`1.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:NumSharp.NDIterator`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:NumSharp.NDIterator`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:NumSharp.NDIteratorExtensions.AsIterator``1(NumSharp.NDArray,System.Boolean)">
            <summary>
                Creates a new iterator to iterate given <paramref name="nd"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nd">The ndarray to iterate.</param>
            <param name="autoreset">Should this iterator loop forever?</param>
        </member>
        <member name="M:NumSharp.NDIteratorExtensions.AsIterator(NumSharp.NDArray,System.Boolean)">
            <summary>
                Creates a new iterator to iterate given <paramref name="nd"/>.
            </summary>
            <param name="nd">The ndarray to iterate.</param>
            <param name="autoreset">Should this iterator loop forever?</param>
        </member>
        <member name="M:NumSharp.NDIteratorExtensions.AsIterator(NumSharp.Backends.UnmanagedStorage,System.Boolean)">
            <summary>
                Creates a new iterator to iterate given <paramref name="us"/>.
            </summary>
            <param name="us">The ndarray to iterate.</param>
            <param name="autoreset">Should this iterator loop forever?</param>
        </member>
        <member name="M:NumSharp.NDIteratorExtensions.AsIterator(NumSharp.Backends.Unmanaged.IArraySlice,NumSharp.Shape)">
            <summary>
                Creates a new iterator to iterate given <paramref name="arr"/> as if it were shaped like <paramref name="shape"/>.
            </summary>
            <param name="arr">The IArraySlice to iterate.</param>
            <param name="shape"></param>
        </member>
        <member name="M:NumSharp.NDIteratorExtensions.AsIterator(NumSharp.Backends.Unmanaged.IArraySlice,NumSharp.Shape,System.Boolean)">
            <summary>
                Creates a new iterator to iterate given <paramref name="arr"/> as if it were shaped like <paramref name="shape"/>.
            </summary>
            <param name="arr">The IArraySlice to iterate.</param>
            <param name="autoreset">Should this iterator loop forever?</param>
            <param name="shape">The original shape, non-broadcasted, to represent this iterator.</param>
        </member>
        <member name="M:NumSharp.NDIteratorExtensions.AsIterator(NumSharp.Backends.Unmanaged.IArraySlice,NumSharp.Shape,NumSharp.Shape,System.Boolean)">
            <summary>
                Creates a new iterator to iterate given <paramref name="arr"/> as if it were shaped like <paramref name="shape"/>.
            </summary>
            <param name="arr">The IArraySlice to iterate.</param>
            <param name="shape">The original shape, non-broadcasted.</param>
            <param name="broadcastShape">The broadcasted shape of <paramref name="shape"/></param>
            <param name="autoReset"></param>
        </member>
        <member name="T:NumSharp.NPTypeCode">
            <summary>
                Represents all available types in numpy.
            </summary>
            <remarks>The int values of the enum are a copy of <see cref="T:System.TypeCode"/> excluding types not available in numpy.</remarks>
        </member>
        <member name="F:NumSharp.NPTypeCode.Empty">
            <summary>A null reference.</summary>
        </member>
        <member name="F:NumSharp.NPTypeCode.Boolean">
            <summary>A simple type representing Boolean values of true or false.</summary>
        </member>
        <member name="F:NumSharp.NPTypeCode.Char">
            <summary>An integral type representing unsigned 16-bit integers with values between 0 and 65535. The set of possible values for the <see cref="F:System.TypeCode.Char"></see> type corresponds to the Unicode character set.</summary>
        </member>
        <member name="F:NumSharp.NPTypeCode.Byte">
            <summary>An integral type representing unsigned 8-bit integers with values between 0 and 255.</summary>
        </member>
        <member name="F:NumSharp.NPTypeCode.Int16">
            <summary>An integral type representing signed 16-bit integers with values between -32768 and 32767.</summary>
        </member>
        <member name="F:NumSharp.NPTypeCode.UInt16">
            <summary>An integral type representing unsigned 16-bit integers with values between 0 and 65535.</summary>
        </member>
        <member name="F:NumSharp.NPTypeCode.Int32">
            <summary>An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647.</summary>
        </member>
        <member name="F:NumSharp.NPTypeCode.UInt32">
            <summary>An integral type representing unsigned 32-bit integers with values between 0 and 4294967295.</summary>
        </member>
        <member name="F:NumSharp.NPTypeCode.Int64">
            <summary>An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807.</summary>
        </member>
        <member name="F:NumSharp.NPTypeCode.UInt64">
            <summary>An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615.</summary>
        </member>
        <member name="F:NumSharp.NPTypeCode.Single">
            <summary>A floating point type representing values ranging from approximately 1.5 x 10 -45 to 3.4 x 10 38 with a precision of 7 digits.</summary>
        </member>
        <member name="F:NumSharp.NPTypeCode.Double">
            <summary>A floating point type representing values ranging from approximately 5.0 x 10 -324 to 1.7 x 10 308 with a precision of 15-16 digits.</summary>
        </member>
        <member name="F:NumSharp.NPTypeCode.Decimal">
            <summary>A simple type representing values ranging from 1.0 x 10 -28 to approximately 7.9 x 10 28 with 28-29 significant digits.</summary>
        </member>
        <member name="F:NumSharp.NPTypeCode.String">
            <summary>A sealed class type representing Unicode character strings.</summary>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.IsNumerical(NumSharp.NPTypeCode)">
            <summary>
                Returns true if typecode is a number (incl. <see cref="T:System.Boolean"/>, <see cref="T:System.Char"/> and <see cref="T:System.Numerics.Complex"/>).
            </summary>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.GetTypeCode(System.Type)">
            <summary>
                Extracts <see cref="T:NumSharp.NPTypeCode"/> from given <see cref="T:System.Type"/>.
            </summary>
            <remarks>In case there was no successful cast to <see cref="T:NumSharp.NPTypeCode"/>, return will be <see cref="F:NumSharp.NPTypeCode.Empty"/></remarks>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.GetTypeCode``1">
            <summary>
                Extracts <see cref="T:NumSharp.NPTypeCode"/> from given <typeparamref name="T"/>.
            </summary>
            <remarks>In case there was no successful cast to <see cref="T:NumSharp.NPTypeCode"/>, return will be <see cref="F:NumSharp.NPTypeCode.Empty"/></remarks>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.AsType(NumSharp.NPTypeCode)">
            <summary>
                Convert <see cref="T:NumSharp.NPTypeCode"/> into its <see cref="T:System.Type"/>
            </summary>
            <param name="typeCode"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.IsValidNPType(System.Type)">
            <summary>
                Checks if given <see cref="T:System.Type"/> has a match in <see cref="T:NumSharp.NPTypeCode"/>.
            </summary>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.SizeOf(NumSharp.NPTypeCode)">
            <summary>
                Gets the size of given <paramref name="typeCode"/>
            </summary>
            <param name="typeCode"></param>
            <returns></returns>
            <remarks>The size is computed by <see cref="M:System.Runtime.InteropServices.Marshal.SizeOf``1"/></remarks>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.IsRealNumber(NumSharp.NPTypeCode)">
            <summary>
                Is <paramref name="typeCode"/> a float, double, complex or decimal?
            </summary>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.IsUnsigned(NumSharp.NPTypeCode)">
            <summary>
                Is <paramref name="typeCode"/> a uint, byte, ulong and so on.
            </summary>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.IsSigned(NumSharp.NPTypeCode)">
            <summary>
                Is <paramref name="typeCode"/> a float, double, complex or decimal?
            </summary>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.GetGroup(NumSharp.NPTypeCode)">
            <summary>
                Is <paramref name="typeCode"/> a float, double, complex or decimal?
            </summary>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.GetPriority(NumSharp.NPTypeCode)">
            <summary>
                Is <paramref name="typeCode"/> a float, double, complex or decimal?
            </summary>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.ToTypeCode(NumSharp.NPY_TYPECHAR)">
            <summary>
                Gets NumSharp's <see cref="T:NumSharp.NPTypeCode"/> equivalent of <paramref name="typeCode"/>
            </summary>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.ToTYPECHAR(NumSharp.NPTypeCode)">
            <summary>
                Gets NumSharp's <see cref="T:NumSharp.NPTypeCode"/> equivalent of <paramref name="typeCode"/>
            </summary>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.AsNumpyDtypeName(NumSharp.NPTypeCode)">
            <summary>
                Returns the equivalent numpy's name, e.g. <see cref="F:NumSharp.NPTypeCode.Int32"/> is np.int32, therefore the return is "int32".
            </summary>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.GetComputingType(NumSharp.NPTypeCode)">
            <summary>
                Gets the dtype that is used as return type in case when statistics are computed with high decimal precision like <see cref="M:NumSharp.np.sin(NumSharp.NDArray@,System.Type)"/>
            </summary>
            <returns>dtype in case when statistics are computed like <see cref="M:NumSharp.np.mean(NumSharp.NDArray@)"/></returns>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.GetAccumulatingType(NumSharp.NPTypeCode)">
            <summary>
                Gets the dtype that is used as accumulation in case when statistics are computed like <see cref="M:NumSharp.np.sum(NumSharp.NDArray@)"/>
            </summary>
            <returns>dtype in case when statistics are computed like <see cref="M:NumSharp.np.sum(NumSharp.NDArray@)"/></returns>
        </member>
        <member name="M:NumSharp.NPTypeCodeExtensions.GetDefaultValue(NumSharp.NPTypeCode)">
            <summary>
                Gets the default value of <paramref name="typeCode"/>.
            </summary>
        </member>
        <member name="M:NumSharp.TensorEngine.GetStorage(System.Type)">
            <summary>
                Get storage for given <paramref name="dtype"/>.
            </summary>
        </member>
        <member name="M:NumSharp.TensorEngine.GetStorage(NumSharp.NPTypeCode)">
            <summary>
                Get storage for given <paramref name="typeCode"/>.
            </summary>
        </member>
        <member name="T:NumSharp.Unmanaged.Memory.StackedMemoryPool">
            <summary>
                Pool of allocated buffers managed by internal garbage collection mechanism.
            </summary>
            <remarks>Used to speed up scalar allocation. Thread-safe.</remarks>
        </member>
        <member name="P:NumSharp.Unmanaged.Memory.StackedMemoryPool.TotalAllocated">
            <summary>
                How many Scalar pointers are allocated.
            </summary>
        </member>
        <member name="P:NumSharp.Unmanaged.Memory.StackedMemoryPool.Available">
            <summary>
                How many pointers are currently preallocated and available for the taking.
            </summary>
        </member>
        <member name="F:NumSharp.Unmanaged.Memory.StackedMemoryPool.GarbageCollectionDelay">
            <summary>
                After how many milliseconds should unused excess memory be deallocated. (only if allocated exceeded above 133% of firstly allocated).<br></br>
                Default: 5000ms.
            </summary>
        </member>
        <member name="M:NumSharp.Unmanaged.Memory.StackedMemoryPool.UpdateGarbageCollectionThreshold">
            <summary>
                Set the point of GC activation to the current <see cref="P:NumSharp.Unmanaged.Memory.StackedMemoryPool.TotalAllocated"/> multiplied by 1.33.
            </summary>
        </member>
        <member name="T:NumSharp.DType">
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.dtype.html#numpy.dtype</remarks>
        </member>
        <member name="M:NumSharp.DType.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:System.Object"></see> class.</summary>
        </member>
        <member name="F:NumSharp.DType.byteorder">
            <summary>
                A character indicating the byte-order of this data-type object.<br></br>
                One of:<br></br>
                
                '='	native<br></br>
                '\&lt;'	little-endian<br></br>
                '&gt;'	big-endian<br></br>
                '|'	not applicable<br></br>
            </summary>
        </member>
        <member name="F:NumSharp.DType.itemsize">
            <summary>
                The size of the dtype in bytes.
            </summary>
        </member>
        <member name="F:NumSharp.DType.name">
            <summary>
                The name of this dtype.
            </summary>
        </member>
        <member name="F:NumSharp.DType.type">
            <summary>
                The actual type this dtype represents.
            </summary>
        </member>
        <member name="F:NumSharp.DType.typecode">
            <summary>
                The NumSharp type code.
            </summary>
        </member>
        <member name="F:NumSharp.DType.TYPECHAR">
            <summary>
                A unique character code for each of the 21 different built-in types.
            </summary>
        </member>
        <member name="F:NumSharp.DType.kind">
            <summary>
                A character code (one of ‘biufcmMOSUV’) identifying the general kind of data.<br></br><br></br>
                b boolean<br></br>
                i signed integer<br></br>
                u   unsigned integer<br></br>
                f floating-point<br></br>
                c   complex floating-point<br></br>
                m   timedelta<br></br>
                M   datetime<br></br>
                O   object<br></br>
                S(byte-)string<br></br>
                U   Unicode<br></br>
                V   void<br></br>
            </summary>
        </member>
        <member name="P:NumSharp.DType.char">
            <summary>
            A unique character code for each of the 21 different built-in types.
            </summary>
        </member>
        <member name="M:NumSharp.DType.newbyteorder(System.Char)">
            <summary>
                Return a new dtype with a different byte order.
                Changes are also made in all fields and sub-arrays of the data type.
            </summary>
            <param name="new_order">
                Byte order to force; a value from the byte order specifications below.<br></br> The default value (‘S’) results in swapping the current byte order.<br></br> new_order codes can be any of:<br></br>
                ‘S’ - swap dtype from current to opposite endian<br></br>
                '='	- native order<br></br>
                '\&lt;'	- little-endian<br></br>
                '&gt;' - big-endian<br></br>
                '|'	- ignore(no change to byte order)<br></br>
                The code does a case-insensitive check on the first letter of new_order for these alternatives.<br></br>For example, any of ‘>’ or ‘B’ or ‘b’ or ‘brian’ are valid to specify big-endian.
            </param>
            <returns>New dtype object with the given change to the byte order.</returns>
        </member>
        <member name="T:NumSharp.NPY_TYPECHAR">
            <summary>
                https://docs.scipy.org/doc/numpy-1.16.1/reference/c-api.dtype.html#enumerated-types
            </summary>
        </member>
        <member name="M:NumSharp.Kwargs.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Kwargs constructor
            </summary>
            <param name="indexing"> {'xy', 'ij'}, optional Cartesian('xy', default) or matrix('ij') indexing of output.</param>
            <param name="sparse">If True a sparse grid is returned in order to conserve memory. Default is False.</param>
            <param name="copy">If False, a view into the original arrays are returned in order to conserve memory.
            Default is True.Please note that sparse= False, copy= False`` will likely return non-contiguous arrays.  
            Furthermore, more than one element of a broadcast array may refer to a single memory location.
            If you need to write to the arrays, make copies first.</param>
        </member>
        <member name="M:NumSharp.NumSharpException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Exception"></see> class.</summary>
        </member>
        <member name="M:NumSharp.NumSharpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception"></see> class with serialized data.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info">info</paramref> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0).</exception>
        </member>
        <member name="M:NumSharp.NumSharpException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception"></see> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:NumSharp.NumSharpException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:NumSharp.Extensions.LinqExtensions.Yield``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.#ctor(NumSharp.Backends.UnmanagedStorage)">
            <summary>
                Creates a new <see cref="T:NumSharp.NDArray"/> with this storage.
            </summary>
            <param name="storage"></param>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.#ctor(NumSharp.Backends.UnmanagedStorage,NumSharp.Shape)">
            <summary>
                Creates a new <see cref="T:NumSharp.NDArray"/> with this storage.
            </summary>
            <param name="storage"></param>
            <param name="shape"></param>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.#ctor(NumSharp.Backends.UnmanagedStorage,NumSharp.Shape@)">
            <summary>
                Creates a new <see cref="T:NumSharp.NDArray"/> with this storage.
            </summary>
            <param name="storage"></param>
            <param name="shape"></param>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.#ctor(NumSharp.TensorEngine)">
            <summary>
            Constructor for init data type
            internal storage is 1D with 1 element
            </summary>
            <param name="engine">The engine of this <see cref="T:NumSharp.NDArray"/></param>
            <remarks>This constructor does not call allocation/></remarks>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.#ctor">
            <summary>
            Constructor for init data type
            internal storage is 1D with 1 element
            </summary>
            <remarks>This constructor does not call allocation/></remarks>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.#ctor(System.Int32,System.Boolean)">
            <summary>
                Constructor which initialize elements with length of <paramref name="size"/>
            </summary>
            <param name="size">The size as a single dimension shape</param>
            <param name="fillZeros">Should set the values of the new allocation to default(dtype)? otherwise - old memory noise</param>
            <remarks>This constructor calls <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/></remarks>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.#ctor(System.Array,NumSharp.Shape,System.Char)">
            <summary>
            Constructor which takes .NET array
            dtype and shape is determined from array
            </summary>
            <param name="values"></param>
            <param name="shape"></param>
            <param name="order"></param>
            <returns>Array with values</returns>
            <remarks>This constructor calls <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/></remarks>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.#ctor(NumSharp.Backends.Unmanaged.IArraySlice,NumSharp.Shape,System.Char)">
            <summary>
            Constructor which takes .NET array
            dtype and shape is determined from array
            </summary>
            <param name="values"></param>
            <param name="shape"></param>
            <param name="order"></param>
            <returns>Array with values</returns>
            <remarks>This constructor calls <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/></remarks>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.#ctor(NumSharp.Shape)">
            <summary>
            Constructor which initialize elements with 0
            type and shape are given.
            </summary>
            <param name="shape">Shape of NDArray</param>
            <remarks>This constructor calls <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/></remarks>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.#ctor(System.Int32)">
            <summary>
                Constructor which initialize elements with length of <paramref name="size"/>
            </summary>
            <param name="size">The size as a single dimension shape</param>
            <remarks>This constructor calls <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/></remarks>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.#ctor(NumSharp.Shape,System.Boolean)">
            <summary>
            Constructor which initialize elements with 0
            type and shape are given.
            </summary>
            <param name="shape">Shape of NDArray</param>
            <param name="fillZeros">Should set the values of the new allocation to default(dtype)? otherwise - old memory noise</param>
            <remarks>This constructor calls <see cref="M:NumSharp.Backends.UnmanagedStorage.Allocate(NumSharp.Shape,System.Type)"/></remarks>
        </member>
        <member name="P:NumSharp.Generic.NDArray`1.Array">
            <summary>
            Array access to storage data - overridden on purpose
            </summary>
            <value></value>
        </member>
        <member name="P:NumSharp.Generic.NDArray`1.Address">
            <summary>
                Gets the address that this NDArray starts from.
            </summary>
        </member>
        <member name="P:NumSharp.Generic.NDArray`1.Item(System.String)">
            <summary>
            slicing of generic - overridden on purpose
            </summary>
            <value></value>
        </member>
        <member name="P:NumSharp.Generic.NDArray`1.Item(NumSharp.Slice[])">
            <summary>
            slicing of generic - overridden on purpose
            </summary>
            <value></value>
        </member>
        <member name="P:NumSharp.Generic.NDArray`1.flat">
            <summary>
                A 1-D iterator over the array.
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.flat.html</remarks>
        </member>
        <member name="P:NumSharp.Generic.NDArray`1.T">
            <summary>
                The transposed array. <br></br>
                Same as self.transpose().
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.T.html</remarks>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.reshape(NumSharp.Shape)">
            <summary>
                Gives a new shape to an array without changing its data.
            </summary>
            <param name="newShape">The new shape should be compatible with the original shape. If an integer, then the result will be a 1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array and remaining dimensions.</param>
            <returns>This will be a new view object if possible; otherwise, it will be a copy. Note there is no guarantee of the memory layout (C- or Fortran- contiguous) of the returned array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html</remarks>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.reshape(NumSharp.Shape@)">
            <summary>
                Gives a new shape to an array without changing its data.
            </summary>
            <param name="newShape">The new shape should be compatible with the original shape. If an integer, then the result will be a 1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array and remaining dimensions.</param>
            <returns>This will be a new view object if possible; otherwise, it will be a copy. Note there is no guarantee of the memory layout (C- or Fortran- contiguous) of the returned array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html</remarks>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.reshape(System.Int32[])">
            <summary>
                Gives a new shape to an array without changing its data.
            </summary>
            <param name="shape">The new shape should be compatible with the original shape. If an integer, then the result will be a 
            1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array 
            and remaining dimensions.</param>
            <returns>This will be a new view object if possible; otherwise, it will be a copy. Note there is no guarantee of the 
            memory layout (C- or Fortran- contiguous) of the returned array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html</remarks>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.reshape_unsafe(NumSharp.Shape)">
            <summary>
                Gives a new shape to an array without changing its data.
            </summary>
            <param name="newshape">The new shape should be compatible with the original shape. If an integer, then the result will be a 1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array and remaining dimensions.</param>
            <returns>This will be a new view object if possible; otherwise, it will be a copy. Note there is no guarantee of the memory layout (C- or Fortran- contiguous) of the returned array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html</remarks>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.reshape_unsafe(NumSharp.Shape@)">
            <summary>
                Gives a new shape to an array without changing its data.
            </summary>
            <param name="newShape">The new shape should be compatible with the original shape. If an integer, then the result will be a 1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array and remaining dimensions.</param>
            <returns>This will be a new view object if possible; otherwise, it will be a copy. Note there is no guarantee of the memory layout (C- or Fortran- contiguous) of the returned array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html</remarks>
        </member>
        <member name="M:NumSharp.Generic.NDArray`1.reshape_unsafe(System.Int32[])">
            <summary>
                Gives a new shape to an array without changing its data.
            </summary>
            <param name="shape">The new shape should be compatible with the original shape. If an integer, then the result will be a 
            1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array 
            and remaining dimensions.</param>
            <returns>This will be a new view object if possible; otherwise, it will be a copy. Note there is no guarantee of the 
            memory layout (C- or Fortran- contiguous) of the returned array.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html</remarks>
        </member>
        <member name="T:NumSharp.NativeRandomState">
            <summary>
                Represents the stored state of <see cref="T:NumSharp.Randomizer"/>.
            </summary>
        </member>
        <member name="T:NumSharp.NumPyRandom">
            <summary>
                A class that serves as numpy.random.RandomState in python.
            </summary>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.1/reference/routines.random.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.bernoulli(System.Double,NumSharp.Shape)">
            <summary>
                Draw samples from a bernoulli distribution.
            </summary>
            <param name="p">Parameter of the distribution, >= 0 and &lt;=1.</param>
            <param name="shape">Output Shape</param>
            <returns>Drawn samples from the parameterized bernoulli distribution.</returns>
        </member>
        <member name="M:NumSharp.NumPyRandom.bernoulli(System.Double,System.Int32[])">
            <summary>
                Draw samples from a bernoulli distribution.
            </summary>
            <param name="p">Parameter of the distribution, >= 0 and &lt;=1.</param>
            <param name="dims">Output Shape</param>
            <returns>Drawn samples from the parameterized bernoulli distribution.</returns>
        </member>
        <member name="M:NumSharp.NumPyRandom.beta(System.Double,System.Double,NumSharp.Shape)">
            <summary>
            Draw samples from a Beta distribution.
            The Beta distribution is a special case of the Dirichlet distribution, and is related to the Gamma distribution.It has the probability distribution function
            </summary>
            <param name="alpha">Alpha value</param>
            <param name="betaValue">Beta value</param>
            <param name="shape">Output Shape</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NumPyRandom.beta(System.Double,System.Double,System.Int32[])">
            <summary>
            Draw samples from a Beta distribution.
            The Beta distribution is a special case of the Dirichlet distribution, and is related to the Gamma distribution.It has the probability distribution function
            </summary>
            <param name="alpha">Alpha value</param>
            <param name="betaValue">Beta value</param>
            <param name="dims">Output Shape</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NumPyRandom.binomial(System.Int32,System.Double,NumSharp.Shape)">
            <summary>
                Draw samples from a binomial distribution.
                Samples are drawn from a binomial distribution with specified parameters, n trials and p probability of success where n an integer >= 0 and p is in the interval[0, 1]. (n may be input as a float, but it is truncated to an integer in use)
            </summary>
            <param name="n">Parameter of the distribution, >= 0. Floats are also accepted, but they will be truncated to integers.</param>
            <param name="p">Parameter of the distribution, >= 0 and &lt;=1.</param>
            <param name="shape">Output Shape</param>
            <returns>Drawn samples from the parameterized binomial distribution, where each sample is equal to the number of successes over the n trials.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.random.binomial.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.binomial(System.Int32,System.Double,System.Int32[])">
            <summary>
                Draw samples from a binomial distribution.
                Samples are drawn from a binomial distribution with specified parameters, n trials and p probability of success where n an integer >= 0 and p is in the interval[0, 1]. (n may be input as a float, but it is truncated to an integer in use)
            </summary>
            <param name="n">Parameter of the distribution, >= 0. Floats are also accepted, but they will be truncated to integers.</param>
            <param name="p">Parameter of the distribution, >= 0 and &lt;=1.</param>
            <param name="dims">Output Shape</param>
            <returns>Drawn samples from the parameterized binomial distribution, where each sample is equal to the number of successes over the n trials.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.random.binomial.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.chisquare(System.Double,NumSharp.Shape)">
            <summary>
                Draw samples from a chi-square distribution.
                When df independent random variables, each with standard normal distributions(mean 0, variance 1), are squared and summed, 
                the resulting distribution is chi-square(see Notes). This distribution is often used in hypothesis testing.
            </summary>
            <param name="df">Number of degrees of freedom, should be > 0.</param>
            <param name="shape">Output Shape</param>
            <returns>Drawn samples from the parameterized chi-square distribution.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.random.chisquare.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.chisquare(System.Double,System.Int32[])">
            <summary>
                Draw samples from a chi-square distribution.
                When df independent random variables, each with standard normal distributions(mean 0, variance 1), are squared and summed, 
                the resulting distribution is chi-square(see Notes). This distribution is often used in hypothesis testing.
            </summary>
            <param name="df">Number of degrees of freedom, should be > 0.</param>
            <param name="dims">Output Shape</param>
            <returns>Drawn samples from the parameterized chi-square distribution.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.random.chisquare.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.choice(NumSharp.NDArray,NumSharp.Shape,System.Boolean,System.Double[])">
            <summary>
                Generates a random sample from a given 1-D array
            </summary>
            <param name="arr">If an ndarray, a random sample is generated from its elements. If an int, the random sample is generated as if a were np.arange(a)</param>
            <param name="shape">Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned.</param>
            <param name="replace">Whether the sample is with or without replacement</param>
            <param name="probabilities">The probabilities associated with each entry in a. If not given the sample assumes a uniform distribution over all entries in a.</param>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.choice.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.choice(System.Int32,NumSharp.Shape,System.Boolean,System.Double[])">
            <summary>
                Generates a random sample from a given 1-D array
            </summary>
            <param name="a">If an ndarray, a random sample is generated from its elements. If an int, the random sample is generated as if a were np.arange(a)</param>
            <param name="shape">Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned.</param>
            <param name="replace">Whether the sample is with or without replacement</param>
            <param name="probabilities">The probabilities associated with each entry in a. If not given the sample assumes a uniform distribution over all entries in a.</param>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.choice.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.RandomState">
            <summary>
                Returns a new instance of <see cref="T:NumSharp.NumPyRandom"/>.
            </summary>
        </member>
        <member name="M:NumSharp.NumPyRandom.RandomState(System.Int32)">
            <summary>
                Returns a new instance of <see cref="T:NumSharp.NumPyRandom"/>.
            </summary>
        </member>
        <member name="M:NumSharp.NumPyRandom.RandomState(NumSharp.NativeRandomState)">
            <summary>
                Returns a new instance of <see cref="T:NumSharp.NumPyRandom"/>.
            </summary>
        </member>
        <member name="M:NumSharp.NumPyRandom.seed(System.Int32)">
            <summary>
                Seeds the generator.
                It can be called again to re-seed the generator.
            </summary>
        </member>
        <member name="M:NumSharp.NumPyRandom.set_state(NumSharp.NativeRandomState)">
            <summary>
                Set the internal state of the generator from a <see cref="T:NumSharp.NumPyRandom"/>.
                for use if one has reason to manually (re-)set the internal state of the pseudo-random number generating algorithm.
            </summary>
            <param name="nativeRandomState">The state to restore onto this <see cref="T:NumSharp.NumPyRandom"/></param>
        </member>
        <member name="M:NumSharp.NumPyRandom.get_state">
            <summary>
                Return a <see cref="T:NumSharp.NumPyRandom"/> representing the internal state of the generator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NumPyRandom.exponential(System.Double,NumSharp.Shape)">
            <summary>
                Draw samples from an exponential distribution.
                The exponential distribution is a continuous analogue of the geometric distribution. It describes many common situations, such as the size of raindrops measured over many rainstorms 
            </summary>
            <param name="scale">The scale parameter, \beta = 1/\lambda.</param>
            <param name="shape">Output Shape</param>
            <returns>Drawn samples from the parameterized exponential distribution.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.random.exponential.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.exponential(System.Double,System.Int32[])">
            <summary>
                Draw samples from an exponential distribution.
                The exponential distribution is a continuous analogue of the geometric distribution. It describes many common situations, such as the size of raindrops measured over many rainstorms 
            </summary>
            <param name="scale">The scale parameter, \beta = 1/\lambda.</param>
            <param name="dims">Output Shape</param>
            <returns>Drawn samples from the parameterized exponential distribution.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.random.exponential.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.gamma(System.Double,System.Double,NumSharp.Shape)">
            <summary>
            Draw samples from a Gamma distribution.
            Samples are drawn from a Gamma distribution with specified parameters, shape (sometimes designated “k”) and scale(sometimes designated “theta”), 
            where both parameters are > 0.
            </summary>
            <param name="shapeV">The shape of the gamma distribution. Should be greater than zero.</param>
            <param name="scale">The scale of the gamma distribution. Should be greater than zero. Default is equal to 1.</param>
            <param name="shape">Output shape.</param>
            <returns>Drawn samples from the parameterized gamma distribution.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.random.gamma.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.gamma(System.Double,System.Double,System.Int32[])">
            <summary>
            Draw samples from a Gamma distribution.
            Samples are drawn from a Gamma distribution with specified parameters, shape (sometimes designated “k”) and scale(sometimes designated “theta”), 
            where both parameters are > 0.
            </summary>
            <param name="shape">The shape of the gamma distribution. Should be greater than zero.</param>
            <param name="scale">The scale of the gamma distribution. Should be greater than zero. Default is equal to 1.</param>
            <param name="dims">Output shape.</param>
            <returns>Drawn samples from the parameterized gamma distribution.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.random.gamma.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.geometric(System.Double,NumSharp.Shape)">
            <summary>
                Draw samples from the geometric distribution.
                Bernoulli trials are experiments with one of two outcomes: success or failure(an example of such an experiment is flipping a coin). 
                The geometric distribution models the number of trials that must be run in order to achieve success.It is therefore supported on the positive integers, k = 1, 2, ....
            </summary>
            <param name="p">The probability of success of an individual trial.</param>
            <param name="shape">Output Shape</param>
            <returns>Drawn samples from the parameterized geometric distribution.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.random.geometric.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.geometric(System.Double,System.Int32[])">
            <summary>
                Draw samples from the geometric distribution.
                Bernoulli trials are experiments with one of two outcomes: success or failure(an example of such an experiment is flipping a coin). 
                The geometric distribution models the number of trials that must be run in order to achieve success.It is therefore supported on the positive integers, k = 1, 2, ....
            </summary>
            <param name="p">The probability of success of an individual trial.</param>
            <param name="dims">Output Shape</param>
            <returns>Drawn samples from the parameterized geometric distribution.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.random.geometric.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.lognormal(System.Double,System.Double,NumSharp.Shape)">
            <summary>
                Draw samples from a log-normal distribution.
                Draw samples from a log-normal distribution with specified mean, standard deviation, and array shape.
                Note that the mean and standard deviation are not the values for the distribution itself, but of the underlying normal distribution it is derived from.
            </summary>
            <param name="mean">Mean value of the underlying normal distribution. Default is 0.</param>
            <param name="sigma">Standard deviation of the underlying normal distribution. Should be greater than zero. Default is 1.</param>
            <param name="shape">Output Shape</param>
            <returns>Drawn samples from the parameterized bernoulli distribution.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.random.lognormal.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.lognormal(System.Double,System.Double,System.Int32[])">
            <summary>
                Draw samples from a log-normal distribution.
                Draw samples from a log-normal distribution with specified mean, standard deviation, and array shape.
                Note that the mean and standard deviation are not the values for the distribution itself, but of the underlying normal distribution it is derived from.
            </summary>
            <param name="mean">Mean value of the underlying normal distribution. Default is 0.</param>
            <param name="sigma">Standard deviation of the underlying normal distribution. Should be greater than zero. Default is 1.</param>
            <param name="dims">Output Shape</param>
            <returns>Drawn samples from the parameterized bernoulli distribution.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.random.lognormal.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.permutation(System.Int32)">
            <summary>
                Randomly permute a sequence, or return a permuted range.
            </summary>
            <param name="x">If x is an integer, randomly permute np.arange(x).</param>
            <returns>Permuted sequence or array range.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.permutation.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.permutation(NumSharp.NDArray)">
            <summary>
                Randomly permute a sequence, or return a permuted range.
            </summary>
            <param name="x">If x is an integer, randomly permute np.arange(x).</param>
            <returns>Permuted sequence or array range.</returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.permutation.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.poisson(System.Double,NumSharp.Shape)">
            <summary>
                Draw samples from a Poisson distribution. The Poisson distribution is the limit of the binomial distribution for large N.
            </summary>
            <param name="lam">Expectation of interval, should be >= 0. A sequence of expectation intervals must be broadcastable over the requested size.</param>
            <param name="shape">Output Shape</param>
            <returns>Drawn samples from the parameterized binomial distribution, where each sample is equal to the number of successes over the n trials.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.random.poisson.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.poisson(System.Double,System.Int32[])">
            <summary>
                Draw samples from a Poisson distribution. The Poisson distribution is the limit of the binomial distribution for large N.
            </summary>
            <param name="lam">Expectation of interval, should be >= 0. A sequence of expectation intervals must be broadcastable over the requested size.</param>
            <param name="dims">Output Shape</param>
            <returns>Drawn samples from the parameterized binomial distribution, where each sample is equal to the number of successes over the n trials.</returns>
            <remarks>https://docs.scipy.org/doc/numpy-1.16.0/reference/generated/numpy.random.poisson.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.rand(System.Int32[])">
            <summary>
                Random values in a given shape.
                Create an array of the given shape and populate it with random samples from a uniform distribution over [0, 1).
            </summary>
        </member>
        <member name="M:NumSharp.NumPyRandom.rand(NumSharp.Shape)">
            <summary>
                Random values in a given shape.
                Create an array of the given shape and populate it with random samples from a uniform distribution over [0, 1).
            </summary>
        </member>
        <member name="M:NumSharp.NumPyRandom.random_sample(System.Int32[])">
            <summary>
                Return random floats in the half-open interval [0.0, 1.0).
                Results are from the “continuous uniform” distribution over the stated interval. To sample Unif[a, b), b > a multiply the output of random_sample by (b-a) and add a:
            </summary>
            <param name="size">The samples</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NumPyRandom.random_sample(NumSharp.Shape)">
            <summary>
                Return random floats in the half-open interval [0.0, 1.0).
                Results are from the “continuous uniform” distribution over the stated interval. To sample Unif[a, b), b > a multiply the output of random_sample by (b-a) and add a:
            </summary>
            <param name="shape">The shape to randomize</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NumPyRandom.randint(System.Int64,System.Int64,NumSharp.Shape,System.Type)">
            <summary>
                Return random integers from the “discrete uniform” distribution of the specified dtype in the “half-open” interval [low, high). If high is None (the default), then results are from [0, low).
            </summary>
            <param name="low">Lowest (signed) integer to be drawn from the distribution (unless high=-1, in which case this parameter is one above the highest such integer).</param>
            <param name="high">If provided, one above the largest (signed) integer to be drawn from the distribution (see above for behavior if high=-1).</param>
            <param name="size">The shape of the array.</param>
            <param name="dtype">Desired dtype of the result. All dtypes are determined by their name, i.e., ‘int64’, ‘int’, etc, so byteorder is not available and a specific precision may have different C types depending on the platform. The default value is ‘np.int’.</param>
            <returns></returns>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.randint.html</remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.randn(System.Int32[])">
            <summary>
            Return a sample (or samples) from the “standard normal” distribution.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NumPyRandom.randn``1">
            <summary>
            Scalar value
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NumPyRandom.normal(System.Double,System.Double,System.Int32[])">
            <summary>
            Draw random samples from a normal (Gaussian) distribution.
            </summary>
            <param name="loc">Mean of the distribution</param>
            <param name="scale">Standard deviation of the distribution</param>
            <param name="dims"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NumPyRandom.stardard_normal(System.Int32[])">
            <summary>
            Draw samples from a standard Normal distribution (mean=0, stdev=1).
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.NumPyRandom.shuffle(NumSharp.NDArray,System.Int32)">
            <summary>
                Modify a sequence in-place by shuffling its contents.
            </summary>
            <param name="x">The array or list to be shuffled.</param>
            <param name="passes">How many times to pass all items in a complexity of O(n*passes)</param>
            <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.shuffle.html <br></br>Does not copy <paramref name="x"/></remarks>
        </member>
        <member name="M:NumSharp.NumPyRandom.uniform(System.Double,System.Double,NumSharp.Shape)">
            <summary>
                Draw samples from a uniform distribution.
                Samples are uniformly distributed over the half-open interval [low, high) (includes low, but excludes high). In other words, any value within the given interval is equally likely to be drawn by uniform.
            </summary>
            <param name="low">Lower boundary of the output interval. All values generated will be greater than or equal to low. The default value is 0.</param>
            <param name="high">Upper boundary of the output interval. All values generated will be less than high. The default value is 1.0.</param>
            <param name="shape">Output shape. If the given shape is, e.g., m, n, k, then m * n * k samples are drawn. If size is None (default), a single value is returned if low and high are both scalars. </param>
            <returns>NDArray with values of type <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:NumSharp.NumPyRandom.uniform(System.Double,System.Double,System.Int32[])">
            <summary>
                Draw samples from a uniform distribution.
                Samples are uniformly distributed over the half-open interval [low, high) (includes low, but excludes high). In other words, any value within the given interval is equally likely to be drawn by uniform.
            </summary>
            <param name="low">Lower boundary of the output interval. All values generated will be greater than or equal to low. The default value is 0.</param>
            <param name="high">Upper boundary of the output interval. All values generated will be less than high. The default value is 1.0.</param>
            <param name="size">Output shape. If the given shape is, e.g., m, n, k, then m * n * k samples are drawn. If size is None (default), a single value is returned if low and high are both scalars. </param>
            <returns>NDArray with values of type <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:NumSharp.NumPyRandom.uniform(NumSharp.NDArray,NumSharp.NDArray,System.Type)">
            <summary>
                Draw samples from a uniform distribution.
                Samples are uniformly distributed over the half-open interval [low, high) (includes low, but excludes high). In other words, any value within the given interval is equally likely to be drawn by uniform.
            </summary>
            <param name="low">Lower boundary of the output interval. All values generated will be greater than or equal to low. The default value is 0.</param>
            <param name="high">Upper boundary of the output interval. All values generated will be less than high. The default value is 1.0.</param>
            <param name="dType">The type of the output <see cref="T:NumSharp.NDArray"/></param>
            <returns></returns>
        </member>
        <member name="T:NumSharp.Randomizer">
            <summary>
                Represents a pseudo-random number generator, which is a device that produces a sequence of numbers that meet certain statistical requirements for randomness.<br></br>
                Equivalent of <see cref="T:System.Random"/> but with a <see cref="T:System.SerializableAttribute"/>.
            </summary>
            <remarks>Copied and modified from https://referencesource.microsoft.com/#mscorlib/system/random.cs</remarks>
        </member>
        <member name="M:NumSharp.Randomizer.#ctor">
            <summary>Initializes a new instance of the <see cref="T:NumSharp.Randomizer" /> class, using a time-dependent default seed value.</summary>
        </member>
        <member name="M:NumSharp.Randomizer.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Random" /> class, using the specified seed value.</summary>
            <param name="Seed">A number used to calculate a starting value for the pseudo-random number sequence. If a negative number is specified, the absolute value of the number is used.</param>
        </member>
        <member name="M:NumSharp.Randomizer.Sample">
            <summary>Returns a random floating-point number between 0.0 and 1.0.</summary>
            <returns>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:NumSharp.Randomizer.InternalSampleLong">
            <summary>
                Returns a value between 0 and <see cref="T:System.Int64"/>.<see cref="F:System.Int64.MaxValue"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Randomizer.Next">
            <summary>Returns a non-negative random integer.</summary>
            <returns>A 32-bit signed integer that is greater than or equal to 0 and less than <see cref="F:System.Int32.MaxValue" />.</returns>
        </member>
        <member name="M:NumSharp.Randomizer.Next(System.Int32,System.Int32)">
            <summary>Returns a random integer that is within a specified range.</summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />.</param>
            <returns>A 32-bit signed integer greater than or equal to <paramref name="minValue" /> and less than <paramref name="maxValue" />; that is, the range of return values includes <paramref name="minValue" /> but not <paramref name="maxValue" />. If <paramref name="minValue" /> equals <paramref name="maxValue" />, <paramref name="minValue" /> is returned.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue" /> is greater than <paramref name="maxValue" />.</exception>
        </member>
        <member name="M:NumSharp.Randomizer.NextLong(System.Int64)">
            <summary>Returns a non-negative random integer that is less than the specified maximum.</summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. <paramref name="maxValue" /> must be greater than or equal to 0.</param>
            <returns>A 32-bit signed integer that is greater than or equal to 0, and less than <paramref name="maxValue" />; that is, the range of return values ordinarily includes 0 but not <paramref name="maxValue" />. However, if <paramref name="maxValue" /> equals 0, <paramref name="maxValue" /> is returned.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue" /> is less than 0.</exception>
        </member>
        <member name="M:NumSharp.Randomizer.NextLong">
            <summary>Returns a non-negative random integer that is less than the specified maximum.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:NumSharp.Randomizer.NextLong(System.Int64,System.Int64)">
            <summary>Returns a random integer that is within a specified range.</summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />.</param>
            <returns>A 32-bit signed integer greater than or equal to <paramref name="minValue" /> and less than <paramref name="maxValue" />; that is, the range of return values includes <paramref name="minValue" /> but not <paramref name="maxValue" />. If <paramref name="minValue" /> equals <paramref name="maxValue" />, <paramref name="minValue" /> is returned.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue" /> is greater than <paramref name="maxValue" />.</exception>
        </member>
        <member name="M:NumSharp.Randomizer.Next(System.Int32)">
            <summary>Returns a non-negative random integer that is less than the specified maximum.</summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. <paramref name="maxValue" /> must be greater than or equal to 0.</param>
            <returns>A 32-bit signed integer that is greater than or equal to 0, and less than <paramref name="maxValue" />; that is, the range of return values ordinarily includes 0 but not <paramref name="maxValue" />. However, if <paramref name="maxValue" /> equals 0, <paramref name="maxValue" /> is returned.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue" /> is less than 0.</exception>
        </member>
        <member name="M:NumSharp.Randomizer.NextDouble">
            <summary>Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.</summary>
            <returns>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:NumSharp.Randomizer.NextBytes(System.Byte[])">
            <summary>Fills the elements of a specified array of bytes with random numbers.</summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:NumSharp.Randomizer.System#ICloneable#Clone">
            <summary>Creates a new object that is a copy of the current instance.</summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:NumSharp.Randomizer.Clone">
            <summary>Creates a new object that is a copy of the current instance.</summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:NumSharp.IIndex">
            <summary>
                Represents a class that can be served as an index, e.g. ndarray[new Slice(...)]
            </summary>
        </member>
        <member name="T:NumSharp.Utilities.ArrayConvert">
            <summary>
                Presents all possible combinations of array conversion of types supported by numpy.
            </summary>
            <remarks>Implementation is based on Array.ConvertAll from corefx source at https://github.com/dotnet/corefx/blob/b2097cbdcb26f7f317252334ddcce101a20b7f3d/src/Common/src/CoreLib/System/Array.cs#L586</remarks>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.Clone(System.Array)">
            <summary>
                Creates a clone of given <paramref name="sourceArray"/>.
            </summary>
            <param name="sourceArray">The array to clone</param>
            <remarks>If possible, for performance reasons use generic version of this method.</remarks>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.Clone``1(``0[])">
            <summary>
                Creates a clone of given <paramref name="sourceArray"/>.
            </summary>
            <param name="sourceArray">The array to clone</param>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.Clone``1(``0[0:,0:])">
            <summary>
                Creates a clone of given <paramref name="sourceArray"/> using <see cref="M:System.Array.CopyTo(System.Array,System.Int32)"/>.
            </summary>
            <param name="sourceArray">The array to clone</param>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.Clone``1(``0[0:,0:,0:])">
            <summary>
                Creates a clone of given <paramref name="sourceArray"/> using <see cref="M:System.Array.CopyTo(System.Array,System.Int32)"/>.
            </summary>
            <param name="sourceArray">The array to clone</param>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.Clone``1(``0[0:,0:,0:,0:])">
            <summary>
                Creates a clone of given <paramref name="sourceArray"/> using <see cref="M:System.Array.CopyTo(System.Array,System.Int32)"/>.
            </summary>
            <param name="sourceArray">The array to clone</param>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.To(System.Array,System.Type)">
            <summary>
                Converts <paramref name="sourceArray"/> to an array of type <see cref="T:System.Array"/>.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <param name="returnType">The type to convert the data to</param>
            <returns></returns>
            <remarks>If <paramref name="sourceArray"/>'s element type equals to <see cref="T:System.Array"/> then a copy is returned</remarks>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.To(System.Array,NumSharp.NPTypeCode)">
            <summary>
                Converts  <paramref name="sourceArray"/> to an array of type <see cref="T:NumSharp.NPTypeCode"/>.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <param name="typeCode">The type to convert the data to</param>
            <returns></returns>
            <remarks>If <paramref name="sourceArray"/>'s element type equals to <see cref="T:NumSharp.NPTypeCode"/> then a copy is returned</remarks>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.To``1(System.Array)">
            <summary>
                Converts <paramref name="sourceArray"/> to an array of type T.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToBoolean(System.Boolean[])">
            <summary>
                Converts <see cref="T:System.Boolean"/> array to a <see cref="T:System.Boolean"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Boolean</returns>
            <remarks>Based on benchmark ArrayCopying</remarks>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToByte(System.Byte[])">
            <summary>
                Converts <see cref="T:System.Byte"/> array to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Byte</returns>
            <remarks>Based on benchmark ArrayCopying</remarks>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToInt32(System.Int32[])">
            <summary>
                Converts <see cref="T:System.Int32"/> array to a <see cref="T:System.Int32"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Int32</returns>
            <remarks>Based on benchmark ArrayCopying</remarks>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToInt64(System.Int64[])">
            <summary>
                Converts <see cref="T:System.Int64"/> array to a <see cref="T:System.Int64"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Int64</returns>
            <remarks>Based on benchmark ArrayCopying</remarks>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToSingle(System.Single[])">
            <summary>
                Converts <see cref="T:System.Single"/> array to a <see cref="T:System.Single"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Single</returns>
            <remarks>Based on benchmark ArrayCopying</remarks>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToDouble(System.Double[])">
            <summary>
                Converts <see cref="T:System.Double"/> array to a <see cref="T:System.Double"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Double</returns>
            <remarks>Based on benchmark ArrayCopying</remarks>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToString(System.String[])">
            <summary>
                Converts <see cref="T:System.String"/> array to a <see cref="T:System.String"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type String</returns>
            <remarks>Based on benchmark ArrayCopying</remarks>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToByte(System.Boolean[])">
            <summary>
                Converts <see cref="T:System.Boolean"/> array to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToInt32(System.Boolean[])">
            <summary>
                Converts <see cref="T:System.Boolean"/> array to a <see cref="T:System.Int32"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToInt64(System.Boolean[])">
            <summary>
                Converts <see cref="T:System.Boolean"/> array to a <see cref="T:System.Int64"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToSingle(System.Boolean[])">
            <summary>
                Converts <see cref="T:System.Boolean"/> array to a <see cref="T:System.Single"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToDouble(System.Boolean[])">
            <summary>
                Converts <see cref="T:System.Boolean"/> array to a <see cref="T:System.Double"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToString(System.Boolean[])">
            <summary>
                Converts <see cref="T:System.Boolean"/> array to a <see cref="T:System.String"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type String</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToBoolean(System.Byte[])">
            <summary>
                Converts <see cref="T:System.Byte"/> array to a <see cref="T:System.Boolean"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToInt32(System.Byte[])">
            <summary>
                Converts <see cref="T:System.Byte"/> array to a <see cref="T:System.Int32"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToInt64(System.Byte[])">
            <summary>
                Converts <see cref="T:System.Byte"/> array to a <see cref="T:System.Int64"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToSingle(System.Byte[])">
            <summary>
                Converts <see cref="T:System.Byte"/> array to a <see cref="T:System.Single"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToDouble(System.Byte[])">
            <summary>
                Converts <see cref="T:System.Byte"/> array to a <see cref="T:System.Double"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToString(System.Byte[])">
            <summary>
                Converts <see cref="T:System.Byte"/> array to a <see cref="T:System.String"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type String</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToBoolean(System.Int32[])">
            <summary>
                Converts <see cref="T:System.Int32"/> array to a <see cref="T:System.Boolean"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToByte(System.Int32[])">
            <summary>
                Converts <see cref="T:System.Int32"/> array to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToInt64(System.Int32[])">
            <summary>
                Converts <see cref="T:System.Int32"/> array to a <see cref="T:System.Int64"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToSingle(System.Int32[])">
            <summary>
                Converts <see cref="T:System.Int32"/> array to a <see cref="T:System.Single"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToDouble(System.Int32[])">
            <summary>
                Converts <see cref="T:System.Int32"/> array to a <see cref="T:System.Double"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToString(System.Int32[])">
            <summary>
                Converts <see cref="T:System.Int32"/> array to a <see cref="T:System.String"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type String</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToBoolean(System.Int64[])">
            <summary>
                Converts <see cref="T:System.Int64"/> array to a <see cref="T:System.Boolean"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToByte(System.Int64[])">
            <summary>
                Converts <see cref="T:System.Int64"/> array to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToInt32(System.Int64[])">
            <summary>
                Converts <see cref="T:System.Int64"/> array to a <see cref="T:System.Int32"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToSingle(System.Int64[])">
            <summary>
                Converts <see cref="T:System.Int64"/> array to a <see cref="T:System.Single"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToDouble(System.Int64[])">
            <summary>
                Converts <see cref="T:System.Int64"/> array to a <see cref="T:System.Double"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToString(System.Int64[])">
            <summary>
                Converts <see cref="T:System.Int64"/> array to a <see cref="T:System.String"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type String</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToBoolean(System.Single[])">
            <summary>
                Converts <see cref="T:System.Single"/> array to a <see cref="T:System.Boolean"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToByte(System.Single[])">
            <summary>
                Converts <see cref="T:System.Single"/> array to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToInt32(System.Single[])">
            <summary>
                Converts <see cref="T:System.Single"/> array to a <see cref="T:System.Int32"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToInt64(System.Single[])">
            <summary>
                Converts <see cref="T:System.Single"/> array to a <see cref="T:System.Int64"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToDouble(System.Single[])">
            <summary>
                Converts <see cref="T:System.Single"/> array to a <see cref="T:System.Double"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToString(System.Single[])">
            <summary>
                Converts <see cref="T:System.Single"/> array to a <see cref="T:System.String"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type String</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToBoolean(System.Double[])">
            <summary>
                Converts <see cref="T:System.Double"/> array to a <see cref="T:System.Boolean"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToByte(System.Double[])">
            <summary>
                Converts <see cref="T:System.Double"/> array to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToInt32(System.Double[])">
            <summary>
                Converts <see cref="T:System.Double"/> array to a <see cref="T:System.Int32"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToInt64(System.Double[])">
            <summary>
                Converts <see cref="T:System.Double"/> array to a <see cref="T:System.Int64"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToSingle(System.Double[])">
            <summary>
                Converts <see cref="T:System.Double"/> array to a <see cref="T:System.Single"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToString(System.Double[])">
            <summary>
                Converts <see cref="T:System.Double"/> array to a <see cref="T:System.String"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type String</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToBoolean(System.String[])">
            <summary>
                Converts <see cref="T:System.String"/> array to a <see cref="T:System.Boolean"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToByte(System.String[])">
            <summary>
                Converts <see cref="T:System.String"/> array to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToInt32(System.String[])">
            <summary>
                Converts <see cref="T:System.String"/> array to a <see cref="T:System.Int32"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToInt64(System.String[])">
            <summary>
                Converts <see cref="T:System.String"/> array to a <see cref="T:System.Int64"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToSingle(System.String[])">
            <summary>
                Converts <see cref="T:System.String"/> array to a <see cref="T:System.Single"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToDouble(System.String[])">
            <summary>
                Converts <see cref="T:System.String"/> array to a <see cref="T:System.Double"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToComplex(System.Boolean[])">
            <summary>
                Converts <see cref="T:System.Boolean"/> array to a <see cref="T:System.Numerics.Complex"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Complex</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToComplex(System.Byte[])">
            <summary>
                Converts <see cref="T:System.Byte"/> array to a <see cref="T:System.Numerics.Complex"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Complex</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToComplex(System.Int32[])">
            <summary>
                Converts <see cref="T:System.Int32"/> array to a <see cref="T:System.Numerics.Complex"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Complex</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToComplex(System.Int64[])">
            <summary>
                Converts <see cref="T:System.Int64"/> array to a <see cref="T:System.Numerics.Complex"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Complex</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToComplex(System.Single[])">
            <summary>
                Converts <see cref="T:System.Single"/> array to a <see cref="T:System.Numerics.Complex"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Complex</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToComplex(System.Double[])">
            <summary>
                Converts <see cref="T:System.Double"/> array to a <see cref="T:System.Numerics.Complex"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Complex</returns>
        </member>
        <member name="M:NumSharp.Utilities.ArrayConvert.ToComplex(System.String[])">
            <summary>
                Converts <see cref="T:System.String"/> array to a <see cref="T:System.Numerics.Complex"/> array.
            </summary>
            <param name="sourceArray">The array to convert</param>
            <returns>Converted array of type Complex</returns>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.Slice``1(``0[],System.Int32,System.Int32)">
            <summary>
                Slice an array.
            </summary>
            <remarks>Supports negative <paramref name="end"/> index</remarks>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.Slice``1(``0[],System.Int64,System.Int64)">
            <summary>
                Slice an array.
            </summary>
            <remarks>Supports negative <paramref name="end"/> index</remarks>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.Insert``1(``0[]@,System.Int32,``0)">
            <summary>
                Inserts item into a specific index.
            </summary>
            <param name="source">The array to insert the value to.</param>
            <param name="index">The index to insert to.</param>
            <param name="value"></param>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.Insert``1(``0[],System.Int32,``0)">
            <summary>
                Inserts item into a specific index.
            </summary>
            <param name="source">The array to insert the value to.</param>
            <param name="index">The index to insert to.</param>
            <param name="value"></param>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.AppendAt``1(``0[],System.Int32,``0)">
            <summary>
                Inserts item into a specific index.
            </summary>
            <param name="source">The array to insert copy and insert value to.</param>
            <param name="index">The index to insert to.</param>
            <param name="value"></param>
            <returns>a copy of <paramref name="source"/> with the appended value.</returns>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.RemoveAt``1(``0[],System.Int32)">
            <summary>
                Removes a specific index from given array.
            </summary>
            <param name="source">The array to remove <paramref name="index"/> from.</param>
            <param name="index">The index to remove.</param>
            <returns>A copy of <paramref name="source"/> without given <paramref name="index"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.CopyToExceptAt``1(``0[],System.Int32,``0[],System.Int32)">
            <summary>
                Copies an array contents except for a specific index.
            </summary>
            <param name="source">The array to copy from.</param>
            <param name="index">The index to ignore.</param>
            <param name="destinition">The copying destinition</param>
            <param name="destOffset">The <paramref name="destinition"/>'s offset</param>
            <returns>A copy of <paramref name="source"/> without given <paramref name="index"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.CopyToExceptAt``1(``0[],System.Int32,System.Int32,``0[],System.Int32)">
            <summary>
                Copies an array contents except for a specific index.
            </summary>
            <param name="source">The array to copy from.</param>
            <param name="sourceOffset"></param>
            <param name="index">The index to ignore.</param>
            <param name="destinition">The copying destinition</param>
            <param name="destOffset">The <paramref name="destinition"/>'s offset</param>
            <returns>A copy of <paramref name="source"/> without given <paramref name="index"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.Flatten(System.Array)">
            <summary>
                Flattens any type of <see cref="T:System.Array"/>.
            </summary>
            <remarks>Supports both jagged array and multi-dim arrays.</remarks>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.Concat``1(``0[][])">
            <summary>
                Performs fast concatenation of multiple arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arrays"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.Concat``1(``0[],``0[])">
            <summary>
                Performs fast concatenation of multiple arrays
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.ResolveElementType(System.Array)">
            <summary>
                Resolves <see cref="T:System.Array"/> element type recusivly.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.ResolveRank(System.Array)">
            <summary>
                Resolves <see cref="T:System.Array"/>'s rank, supports both jagged array and multidim array.
            </summary>
            <returns>The number of ranks <paramref name="arr"/> has</returns>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.ResolveShapeAndType(System.Array)">
            <summary>
                Resolves the shape of this given array.
            </summary>
            <param name="array"></param>
            <remarks>Supports multi-dim and jagged arrays.</remarks>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.ResolveShape(System.Array)">
            <summary>
                Resolves the shape of this given array.
            </summary>
            <param name="array"></param>
            <remarks>Supports multi-dim and jagged arrays.</remarks>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.Create(System.Type,System.Collections.IEnumerable)">
            <summary>
                Creates an array of 1D of type <paramref name="type"/>.
            </summary>
            <param name="type">The type to create this array.</param>
            <param name="enumerable"></param>
            <remarks>Do not use this if you are trying to create jagged or multidimensional array.</remarks>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.Create(System.Type,System.Int32)">
            <summary>
                Creates an array of 1D of type <paramref name="type"/>.
            </summary>
            <param name="type">The type to create this array.</param>
            <param name="length">The length of the array</param>
            <remarks>Do not use this if you are trying to create jagged or multidimensional array.</remarks>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.Create(System.Type,System.Int32[])">
            <summary>
                Creates an array of specific <paramref name="length"/> of type <paramref name="type"/>.
            </summary>
            <param name="type">The type to create this array.</param>
            <param name="length">The length of the array</param>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.Create``1(System.Int32)">
            <summary>
                Creates an array 1D of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the array</typeparam>
            <param name="length">The length of the array</param>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.Create(NumSharp.NPTypeCode,System.Int32)">
            <summary>
                Creates an array of 1D of type <paramref name="typeCode"/>.
            </summary>
            <param name="typeCode">The type to create this array.</param>
            <param name="length">The length of the array</param>
            <remarks>Do not use this if you are trying to create jagged or multidimensional array.</remarks>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.Wrap(NumSharp.NPTypeCode,System.Object)">
            <summary>
                Creates an array of 1D of type <paramref name="typeCode"/> with length of 1 and a single <paramref name="value"/> inside.
            </summary>
            <param name="typeCode">The type to create this array.</param>
            <param name="value">The value to insert</param>
            <remarks>Do not use this if you are trying to create jagged or multidimensional array.</remarks>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.ExtractStructure(System.Array)">
            <summary>
                Extracts shape and type from given <paramref name="array"/>.
            </summary>
            <param name="array">The array to extract D<see cref="T:System.Type"/> and <see cref="T:NumSharp.Shape"/> from.</param>
        </member>
        <member name="M:NumSharp.Utilities.Arrays.ExtractStructure``1(``0[])">
            <summary>
                Extracts shape and type from given <paramref name="array"/>.
            </summary>
            <param name="array">The array to extract D<see cref="T:System.Type"/> and <see cref="T:NumSharp.Shape"/> from.</param>
        </member>
        <member name="M:NumSharp.Utilities.ArraysExtensions.CloneArray(System.Int32[])">
            <summary>
                Slice an array.
            </summary>
            <remarks>Supports negative <paramref name="source"/> index</remarks>
        </member>
        <member name="T:NumSharp.Utilities.Converts">
            <summary>
                Provides various methods related to <see cref="T:System.Convert"/>.
            </summary>
        </member>
        <member name="M:NumSharp.Utilities.Converts.ChangeType``1(System.Object)">
            <summary>Returns an object of the specified type whose value is equivalent to the specified object.</summary>
            <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
            -or-
            <returns>A null reference (Nothing in Visual Basic), if <paramref name="value">value</paramref> is null and <see cref="T:NumSharp.NPTypeCode">typeCode</see> is <see cref="F:System.TypeCode.Empty"></see>, <see cref="F:System.TypeCode.String"></see>, or <see cref="F:System.TypeCode.Object"></see>.</returns>
            <exception cref="T:System.InvalidCastException">This conversion is not supported.
            -or-
            <paramref name="value">value</paramref> is null and <see cref="T:NumSharp.NPTypeCode"></see> specifies a value type.
            -or-
            <paramref name="value">value</paramref> does not implement the <see cref="T:System.IConvertible"></see> interface.</exception>
            <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in a format recognized by the <see cref="T:NumSharp.NPTypeCode"></see> type.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is out of the range of the<see cref="T:NumSharp.NPTypeCode"></see> type.</exception>
            <exception cref="T:System.ArgumentException"><see cref="T:NumSharp.NPTypeCode"></see> is invalid.</exception>
        </member>
        <member name="M:NumSharp.Utilities.Converts.ChangeType(System.Object,NumSharp.NPTypeCode)">
            <summary>Returns an object of the specified type whose value is equivalent to the specified object.</summary>
            <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
            <param name="typeCode">The type of object to return.</param>
            <returns>An object whose underlying type is <paramref name="typeCode">typeCode</paramref> and whose value is equivalent to <paramref name="value">value</paramref>.
            -or-
            A null reference (Nothing in Visual Basic), if <paramref name="value">value</paramref> is null and <paramref name="typeCode">typeCode</paramref> is <see cref="F:System.TypeCode.Empty"></see>, <see cref="F:System.TypeCode.String"></see>, or <see cref="F:System.TypeCode.Object"></see>.</returns>
            <exception cref="T:System.InvalidCastException">This conversion is not supported.
            -or-
            <paramref name="value">value</paramref> is null and <paramref name="typeCode">typeCode</paramref> specifies a value type.
            -or-
            <paramref name="value">value</paramref> does not implement the <see cref="T:System.IConvertible"></see> interface.</exception>
            <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in a format recognized by the <paramref name="typeCode">typeCode</paramref> type.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is out of the range of the <paramref name="typeCode">typeCode</paramref> type.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="typeCode">typeCode</paramref> is invalid.</exception>
        </member>
        <member name="M:NumSharp.Utilities.Converts.ChangeType(System.Object,NumSharp.NPTypeCode,System.IFormatProvider)">
            <summary>Returns an object of the specified type whose value is equivalent to the specified object.</summary>
            <param name="value">An object that implements the <see cref="T:System.IConvertible"></see> interface.</param>
            <param name="provider"></param>
            <param name="typeCode">The type of object to return.</param>
            <returns>An object whose underlying type is <paramref name="typeCode">typeCode</paramref> and whose value is equivalent to <paramref name="value">value</paramref>.
            -or-
            A null reference (Nothing in Visual Basic), if <paramref name="value">value</paramref> is null and <paramref name="typeCode">typeCode</paramref> is <see cref="F:System.TypeCode.Empty"></see>, <see cref="F:System.TypeCode.String"></see>, or <see cref="F:System.TypeCode.Object"></see>.</returns>
            <exception cref="T:System.InvalidCastException">This conversion is not supported.
            -or-
            <paramref name="value">value</paramref> is null and <paramref name="typeCode">typeCode</paramref> specifies a value type.
            -or-
            <paramref name="value">value</paramref> does not implement the <see cref="T:System.IConvertible"></see> interface.</exception>
            <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not in a format recognized by the <paramref name="typeCode">typeCode</paramref> type.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value">value</paramref> represents a number that is out of the range of the <paramref name="typeCode">typeCode</paramref> type.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="typeCode">typeCode</paramref> is invalid.</exception>
        </member>
        <member name="M:NumSharp.Utilities.Converts.FindConverter``2">
            <summary>
                Finds the conversion method from <see cref="T:System.Convert"/> based on <typeparamref name="TIn"/> and <typeparamref name="TOut"/>.
            </summary>
            <typeparam name="TIn">The type that is expected as input and to be converted from</typeparam>
            <typeparam name="TOut">The type we expect to convert to.</typeparam>
        </member>
        <member name="M:NumSharp.Utilities.Converts.FromBase64String(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as Base64 digits, to the equivalent byte array.
            </summary>
            <param name="s">The string to convert</param>
            <returns>The array of bytes represented by the specifed Base64 string.</returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
            <summary>
            Converts the specified range of a Char array, which encodes binary data as Base64 digits, to the equivalent byte array.     
            </summary>
            <param name="inArray">Chars representing Base64 encoding characters</param>
            <param name="offset">A position within the input array.</param>
            <param name="length">Number of element to convert.</param>
            <returns>The array of bytes represented by the specified Base64 encoding characters.</returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts.FromBase64CharPtr(System.Char*,System.Int32)">
            <summary>
            Convert Base64 encoding characters to bytes:
             - Compute result length exactly by actually walking the input;
             - Allocate new result array based on computation;
             - Decode input into the new array;
            </summary>
            <param name="inputPtr">Pointer to the first input char</param>
            <param name="inputLength">Number of input chars</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts.FromBase64_Decode(System.Char*,System.Int32,System.Byte*,System.Int32)">
            <summary>
            Decode characters representing a Base64 encoding into bytes:
            Walk the input. Every time 4 chars are read, convert them to the 3 corresponding output bytes.
            This method is a bit lengthy on purpose. We are trying to avoid jumps to helpers in the loop
            to aid performance.
            </summary>
            <param name="startDestPtr"></param>
            <param name="inputLength">Number of input chars</param>
            <param name="startInputPtr"></param>
            <param name="destLength">Max length of the preallocated result buffer</param>
            <returns>If the result buffer was not large enough to write all result bytes, return -1;
            Otherwise return the number of result bytes actually produced.</returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts.FromBase64_ComputeResultLength(System.Char*,System.Int32)">
            <summary>
            Compute the number of bytes encoded in the specified Base 64 char array:
            Walk the entire input counting white spaces and padding chars, then compute result length
            based on 3 bytes per 4 chars.
            </summary>
        </member>
        <member name="T:NumSharp.Utilities.Converts`1">
            <summary>
                Provides various methods related to <see cref="T:System.Convert"/> based on give <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.ToBoolean(`0)">
            <summary>
                Converts <typeparamref name="T"/> to <see cref="T:System.Boolean"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <see cref="T:System.Boolean"/></param>
            <returns>A <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.ToByte(`0)">
            <summary>
                Converts <typeparamref name="T"/> to <see cref="T:System.Byte"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <see cref="T:System.Byte"/></param>
            <returns>A <see cref="T:System.Byte"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.ToInt32(`0)">
            <summary>
                Converts <typeparamref name="T"/> to <see cref="T:System.Int32"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <see cref="T:System.Int32"/></param>
            <returns>A <see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.ToInt64(`0)">
            <summary>
                Converts <typeparamref name="T"/> to <see cref="T:System.Int64"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <see cref="T:System.Int64"/></param>
            <returns>A <see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.ToSingle(`0)">
            <summary>
                Converts <typeparamref name="T"/> to <see cref="T:System.Single"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <see cref="T:System.Single"/></param>
            <returns>A <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.ToDouble(`0)">
            <summary>
                Converts <typeparamref name="T"/> to <see cref="T:System.Double"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <see cref="T:System.Double"/></param>
            <returns>A <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.ToString(`0)">
            <summary>
                Converts <typeparamref name="T"/> to <see cref="T:System.String"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <see cref="T:System.String"/></param>
            <returns>A <see cref="T:System.String"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.From(System.Boolean)">
            <summary>
                Converts <see cref="T:System.Boolean"/> to <typeparamref name="T"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <typeparamref name="T"/> from <see cref="T:System.Boolean"/></param>
            <returns>A <typeparamref name="T"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.From(System.Byte)">
            <summary>
                Converts <see cref="T:System.Byte"/> to <typeparamref name="T"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <typeparamref name="T"/> from <see cref="T:System.Byte"/></param>
            <returns>A <typeparamref name="T"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.From(System.Int16)">
            <summary>
                Converts <see cref="T:System.Int16"/> to <typeparamref name="T"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <typeparamref name="T"/> from <see cref="T:System.Int16"/></param>
            <returns>A <typeparamref name="T"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.From(System.UInt16)">
            <summary>
                Converts <see cref="T:System.UInt16"/> to <typeparamref name="T"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <typeparamref name="T"/> from <see cref="T:System.UInt16"/></param>
            <returns>A <typeparamref name="T"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.From(System.Int32)">
            <summary>
                Converts <see cref="T:System.Int32"/> to <typeparamref name="T"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <typeparamref name="T"/> from <see cref="T:System.Int32"/></param>
            <returns>A <typeparamref name="T"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.From(System.UInt32)">
            <summary>
                Converts <see cref="T:System.UInt32"/> to <typeparamref name="T"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <typeparamref name="T"/> from <see cref="T:System.UInt32"/></param>
            <returns>A <typeparamref name="T"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.From(System.Int64)">
            <summary>
                Converts <see cref="T:System.Int64"/> to <typeparamref name="T"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <typeparamref name="T"/> from <see cref="T:System.Int64"/></param>
            <returns>A <typeparamref name="T"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.From(System.UInt64)">
            <summary>
                Converts <see cref="T:System.UInt64"/> to <typeparamref name="T"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <typeparamref name="T"/> from <see cref="T:System.UInt64"/></param>
            <returns>A <typeparamref name="T"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.From(System.Char)">
            <summary>
                Converts <see cref="T:System.Char"/> to <typeparamref name="T"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <typeparamref name="T"/> from <see cref="T:System.Char"/></param>
            <returns>A <typeparamref name="T"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.From(System.Double)">
            <summary>
                Converts <see cref="T:System.Double"/> to <typeparamref name="T"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <typeparamref name="T"/> from <see cref="T:System.Double"/></param>
            <returns>A <typeparamref name="T"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.From(System.Single)">
            <summary>
                Converts <see cref="T:System.Single"/> to <typeparamref name="T"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <typeparamref name="T"/> from <see cref="T:System.Single"/></param>
            <returns>A <typeparamref name="T"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.From(System.Decimal)">
            <summary>
                Converts <see cref="T:System.Decimal"/> to <typeparamref name="T"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <typeparamref name="T"/> from <see cref="T:System.Decimal"/></param>
            <returns>A <typeparamref name="T"/></returns>
        </member>
        <member name="M:NumSharp.Utilities.Converts`1.From(System.String)">
            <summary>
                Converts <see cref="T:System.String"/> to <typeparamref name="T"/> using staticly cached <see cref="M:NumSharp.Utilities.Converts.FindConverter``2"/>.
            </summary>
            <param name="obj">The object to convert to <typeparamref name="T"/> from <see cref="T:System.String"/></param>
            <returns>A <typeparamref name="T"/></returns>
        </member>
        <member name="T:NumSharp.Utilities.Hashset`1">
            <summary>
            Implementation notes:
            This uses an array-based implementation similar to <see cref="T:System.Collections.Generic.Dictionary`2"/>, using a buckets array
            to map hash values to the Slots array. Items in the Slots array that hash to the same value
            are chained together through the "next" indices. 
            
            The capacity is always prime; so during resizing, the capacity is chosen as the next prime
            greater than double the last capacity. 
            
            The underlying data structures are lazily initialized. Because of the observation that, 
            in practice, hashtables tend to contain only a few elements, the initial capacity is
            set very small (3 elements) unless the ctor with a collection is used.
            
            The +/- 1 modifications in methods that add, check for containment, etc allow us to 
            distinguish a hash code of 0 from an uninitialized bucket. This saves us from having to 
            reset each bucket to -1 when resizing. See Contains, for example.
            
            Set methods such as UnionWith, IntersectWith, ExceptWith, and SymmetricExceptWith modify
            this set.
            
            Some operations can perform faster if we can assume "other" contains unique elements
            according to this equality comparer. The only times this is efficient to check is if
            other is a hashset. Note that checking that it's a hashset alone doesn't suffice; we
            also have to check that the hashset is using the same equality comparer. If other 
            has a different equality comparer, it will have unique elements according to its own
            equality comparer, but not necessarily according to ours. Therefore, to go these 
            optimized routes we check that other is a hashset using the same equality comparer.
            
            A HashSet with no elements has the properties of the empty set. (See IsSubset, etc. for 
            special empty set checks.)
            
            A couple of methods have a special case if other is this (e.g. SymmetricExceptWith). 
            If we didn't have these checks, we could be iterating over the set and modifying at
            the same time. 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Implementation Notes:
            Since resizes are relatively expensive (require rehashing), this attempts to minimize 
            the need to resize by setting the initial capacity based on size of collection. 
            </summary>
            <param name="collection"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Add item to this hashset. This is the explicit implementation of the <see cref="T:System.Collections.Generic.ICollection`1"/>
            interface. The other Add method returns bool indicating whether item was added.
            </summary>
            <param name="item">item to add</param>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.Clear">
            <summary>
            Remove all items from this set. This clears the elements but not the underlying 
            buckets and slots array. Follow this call by TrimExcess to release these.
            </summary>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.Contains(`0)">
            <summary>
            Checks if this hashset contains the item
            </summary>
            <param name="item">item to check for containment</param>
            <returns>true if item contained; false if not</returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy items in this hashset to array, starting at arrayIndex
            </summary>
            <param name="array">array to add items to</param>
            <param name="arrayIndex">index to start at</param>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.Remove(`0)">
            <summary>
            Remove item from this hashset
            </summary>
            <param name="item">item to remove</param>
            <returns>true if removed; false if not (i.e. if the item wasn't in the HashSet)</returns>
        </member>
        <member name="P:NumSharp.Utilities.Hashset`1.Count">
            <summary>
            Number of elements in this hashset
            </summary>
        </member>
        <member name="P:NumSharp.Utilities.Hashset`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Whether this is readonly
            </summary>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.Add(`0)">
            <summary>
            Add item to this HashSet. Returns bool indicating whether item was added (won't be 
            added if already present)
            </summary>
            <param name="item"></param>
            <returns>true if added, false if already present</returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.TryGetValue(`0,`0@)">
            <summary>
            Searches the set for a given value and returns the equal value it finds, if any.
            </summary>
            <param name="equalValue">The value to search for.</param>
            <param name="actualValue">The value from the set that the search found, or the default value of <typeparamref name="T"/> when the search yielded no match.</param>
            <returns>A value indicating whether the search was successful.</returns>
            <remarks>
            This can be useful when you want to reuse a previously stored reference instead of 
            a newly constructed one (so that more sharing of references can occur) or to look up
            a value that has more complete data than the value you currently have, although their
            comparer functions indicate they are equal.
            </remarks>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Take the union of this HashSet with other. Modifies this set.
            
            Implementation note: GetSuggestedCapacity (to increase capacity in advance avoiding 
            multiple resizes ended up not being useful in practice; quickly gets to the 
            point where it's a wasteful check.
            </summary>
            <param name="other">enumerable with items to add</param>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Takes the intersection of this set with other. Modifies this set.
            
            Implementation Notes: 
            We get better perf if other is a hashset using same equality comparer, because we 
            get constant contains check in other. Resulting cost is O(n1) to iterate over this.
            
            If we can't go above route, iterate over the other and mark intersection by checking
            contains in this. Then loop over and delete any unmarked elements. Total cost is n2+n1. 
            
            Attempts to return early based on counts alone, using the property that the 
            intersection of anything with the empty set is the empty set.
            </summary>
            <param name="other">enumerable with items to add </param>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove items in other from this set. Modifies this set.
            </summary>
            <param name="other">enumerable with items to remove</param>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Takes symmetric difference (XOR) with other and this set. Modifies this set.
            </summary>
            <param name="other">enumerable with items to XOR</param>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this is a subset of other.
            
            Implementation Notes:
            The following properties are used up-front to avoid element-wise checks:
            1. If this is the empty set, then it's a subset of anything, including the empty set
            2. If other has unique elements according to this equality comparer, and this has more
            elements than other, then it can't be a subset.
            
            Furthermore, if other is a hashset using the same equality comparer, we can use a 
            faster element-wise check.
            </summary>
            <param name="other"></param>
            <returns>true if this is a subset of other; false if not</returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this is a proper subset of other (i.e. strictly contained in)
            
            Implementation Notes:
            The following properties are used up-front to avoid element-wise checks:
            1. If this is the empty set, then it's a proper subset of a set that contains at least
            one element, but it's not a proper subset of the empty set.
            2. If other has unique elements according to this equality comparer, and this has >=
            the number of elements in other, then this can't be a proper subset.
            
            Furthermore, if other is a hashset using the same equality comparer, we can use a 
            faster element-wise check.
            </summary>
            <param name="other"></param>
            <returns>true if this is a proper subset of other; false if not</returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this is a superset of other
            
            Implementation Notes:
            The following properties are used up-front to avoid element-wise checks:
            1. If other has no elements (it's the empty set), then this is a superset, even if this
            is also the empty set.
            2. If other has unique elements according to this equality comparer, and this has less 
            than the number of elements in other, then this can't be a superset
            
            </summary>
            <param name="other"></param>
            <returns>true if this is a superset of other; false if not</returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this is a proper superset of other (i.e. other strictly contained in this)
            
            Implementation Notes: 
            This is slightly more complicated than above because we have to keep track if there
            was at least one element not contained in other.
            
            The following properties are used up-front to avoid element-wise checks:
            1. If this is the empty set, then it can't be a proper superset of any set, even if 
            other is the empty set.
            2. If other is an empty set and this contains at least 1 element, then this is a proper
            superset.
            3. If other has unique elements according to this equality comparer, and other's count
            is greater than or equal to this count, then this can't be a proper superset
            
            Furthermore, if other has unique elements according to this equality comparer, we can
            use a faster element-wise check.
            </summary>
            <param name="other"></param>
            <returns>true if this is a proper superset of other; false if not</returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this set overlaps other (i.e. they share at least one item)
            </summary>
            <param name="other"></param>
            <returns>true if these have at least one common element; false if disjoint</returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this and other contain the same elements. This is set equality: 
            duplicates and order are ignored
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.RemoveWhere(System.Predicate{`0})">
            <summary>
            Remove elements that match specified predicate. Returns the number of elements removed
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="P:NumSharp.Utilities.Hashset`1.Comparer">
            <summary>
            Gets the IEqualityComparer that is used to determine equality of keys for 
            the HashSet.
            </summary>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.TrimExcess">
            <summary>
            Sets the capacity of this list to the size of the list (rounded up to nearest prime),
            unless count is 0, in which case we release references.
            
            This method can be used to minimize a list's memory overhead once it is known that no
            new elements will be added to the list. To completely clear a list and release all 
            memory referenced by the list, execute the following statements:
            
            list.Clear();
            list.TrimExcess(); 
            </summary>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.CreateSetComparer">
            <summary>
            Used for deep equality of HashSet testing
            </summary>
            <returns></returns>
        </member>
        <member name="T:NumSharp.Utilities.Hashset`1.HashSetEqualityComparer`1">
            <summary>
            Equality comparer for hashsets of hashsets
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.Initialize(System.Int32)">
            <summary>
            Initializes buckets and slots arrays. Uses suggested capacity by finding next prime
            greater than or equal to capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.IncreaseCapacity">
            <summary>
            Expand to new capacity. New capacity is next prime greater than or equal to suggested 
            size. This is called when the underlying array is filled. This performs no 
            defragmentation, allowing faster execution; note that this is reasonable since 
            AddIfNotPresent attempts to insert new elements in re-opened spots.
            </summary>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.SetCapacity(System.Int32,System.Boolean)">
            <summary>
            Set the underlying buckets array to size newSize and rehash.  Note that newSize
            *must* be a prime.  It is very likely that you want to call IncreaseCapacity()
            instead of this method.
            </summary>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.AddIfNotPresent(`0)">
            <summary>
            Adds value to HashSet if not contained already
            Returns true if added and false if already present
            </summary>
            <param name="value">value to find</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.ContainsAllElements(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this contains of other's elements. Iterates over other's elements and 
            returns false as soon as it finds an element in other that's not in this.
            Used by SupersetOf, ProperSupersetOf, and SetEquals.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.IsSubsetOfHashSetWithSameEC(NumSharp.Utilities.Hashset{`0})">
             <summary>
             Implementation Notes:
             If other is a hashset and is using same equality comparer, then checking subset is 
             faster. Simply check that each element in this is in other.
             
             Note: if other doesn't use same equality comparer, then Contains check is invalid,
             which is why callers must take are of this.
             
             If callers are concerned about whether this is a proper subset, they take care of that.
            
             </summary>
             <param name="other"></param>
             <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.IntersectWithHashSetWithSameEC(NumSharp.Utilities.Hashset{`0})">
            <summary>
            If other is a hashset that uses same equality comparer, intersect is much faster 
            because we can use other's Contains
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.IntersectWithEnumerable(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Iterate over other. If contained in this, mark an element in bit array corresponding to
            its position in m_slots. If anything is unmarked (in bit array), remove it.
            
            This attempts to allocate on the stack, if below StackAllocThreshold.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.InternalIndexOf(`0)">
            <summary>
            Used internally by set operations which have to rely on bit array marking. This is like
            Contains but returns index in slots array. 
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.SymmetricExceptWithUniqueHashSet(NumSharp.Utilities.Hashset{`0})">
            <summary>
            if other is a set, we can assume it doesn't have duplicate elements, so use this
            technique: if can't remove, then it wasn't present in this set, so add.
            
            As with other methods, callers take care of ensuring that other is a hashset using the
            same equality comparer.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.SymmetricExceptWithEnumerable(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Implementation notes:
             
             Used for symmetric except when other isn't a HashSet. This is more tedious because 
             other may contain duplicates. HashSet technique could fail in these situations:
             1. Other has a duplicate that's not in this: HashSet technique would add then 
             remove it.
             2. Other has a duplicate that's in this: HashSet technique would remove then add it
             back.
             In general, its presence would be toggled each time it appears in other. 
             
             This technique uses bit marking to indicate whether to add/remove the item. If already
             present in collection, it will get marked for deletion. If added from other, it will
             get marked as something not to remove.
            
             </summary>
             <param name="other"></param>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.AddOrGetLocation(`0,System.Int32@)">
            <summary>
            Add if not already in hashset. Returns an out param indicating index where added. This 
            is used by SymmetricExcept because it needs to know the following things:
            - whether the item was already present in the collection or added from other
            - where it's located (if already present, it will get marked for removal, otherwise
            marked for keeping)
            </summary>
            <param name="value"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.CheckUniqueAndUnfoundElements(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Determines counts that can be used to determine equality, subset, and superset. This
            is only used when other is an IEnumerable and not a HashSet. If other is a HashSet
            these properties can be checked faster without use of marking because we can assume 
            other has no duplicates.
            
            The following count checks are performed by callers:
            1. Equals: checks if unfoundCount = 0 and uniqueFoundCount = m_count; i.e. everything 
            in other is in this and everything in this is in other
            2. Subset: checks if unfoundCount >= 0 and uniqueFoundCount = m_count; i.e. other may
            have elements not in this and everything in this is in other
            3. Proper subset: checks if unfoundCount > 0 and uniqueFoundCount = m_count; i.e
            other must have at least one element not in this and everything in this is in other
            4. Proper superset: checks if unfound count = 0 and uniqueFoundCount strictly less
            than m_count; i.e. everything in other was in this and this had at least one element
            not contained in other.
            
            An earlier implementation used delegates to perform these checks rather than returning
            an ElementCount struct; however this was changed due to the perf overhead of delegates.
            </summary>
            <param name="other"></param>
            <param name="returnIfUnfound">Allows us to finish faster for equals and proper superset
            because unfoundCount must be 0.</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.ToArray">
            <summary>
            Copies this to an array. Used for DebugView
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.HashSetEquals(NumSharp.Utilities.Hashset{`0},NumSharp.Utilities.Hashset{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Internal method used for HashSetEqualityComparer. Compares set1 and set2 according 
            to specified comparer.
            
            Because items are hashed according to a specific equality comparer, we have to resort
            to n^2 search if they're using different equality comparers.
            </summary>
            <param name="set1"></param>
            <param name="set2"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.AreEqualityComparersEqual(NumSharp.Utilities.Hashset{`0},NumSharp.Utilities.Hashset{`0})">
            <summary>
            Checks if equality comparers are equal. This is used for algorithms that can
            speed up if it knows the other item has unique elements. I.e. if they're using 
            different equality comparers, then uniqueness assumption between sets break.
            </summary>
            <param name="set1"></param>
            <param name="set2"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.Hashset`1.InternalGetHashCode(`0)">
            <summary>
            Workaround Comparers that throw ArgumentNullException for GetHashCode(null).
            </summary>
            <param name="item"></param>
            <returns>hash code</returns>
        </member>
        <member name="M:NumSharp.Utilities.BitHelper.#ctor(System.Int32*,System.Int32)">
            <summary>
            Instantiates a BitHelper with a heap alloc'd array of ints
            </summary>
            <param name="bitArrayPtr">int array to hold bits</param>
            <param name="length">length of int array</param>
        </member>
        <member name="M:NumSharp.Utilities.BitHelper.#ctor(System.Int32[],System.Int32)">
            <summary>
            Instantiates a BitHelper with a heap alloc'd array of ints
            </summary>
            <param name="bitArray">int array to hold bits</param>
            <param name="length">length of int array</param>
        </member>
        <member name="M:NumSharp.Utilities.BitHelper.MarkBit(System.Int32)">
            <summary>
            Mark bit at specified position
            </summary>
            <param name="bitPosition"></param>
        </member>
        <member name="M:NumSharp.Utilities.BitHelper.IsMarked(System.Int32)">
            <summary>
            Is bit at specified position marked?
            </summary>
            <param name="bitPosition"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.BitHelper.ToIntArrayLength(System.Int32)">
            <summary>
            How many ints must be allocated to represent n bits. Returns (n+31)/32, but 
            avoids overflow
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Utilities.NDCoordinatesIncrementor.#ctor(NumSharp.Shape@)">
            <summary>Initializes a new instance of the <see cref="T:System.Object"></see> class.</summary>
        </member>
        <member name="M:NumSharp.Utilities.NDCoordinatesIncrementorAutoResetting.#ctor(NumSharp.Shape@)">
            <summary>Initializes a new instance of the <see cref="T:System.Object"></see> class.</summary>
        </member>
        <member name="M:NumSharp.Utilities.NDExtendedCoordinatesIncrementor.#ctor(NumSharp.Shape,System.Int32,System.Action{NumSharp.Utilities.NDExtendedCoordinatesIncrementor})">
            <param name="shape"></param>
            <param name="extendBy">By how many items should <see cref="F:NumSharp.Utilities.NDExtendedCoordinatesIncrementor.Index"/> be extended</param>
            <param name="endCallback"></param>
        </member>
        <member name="M:NumSharp.Utilities.NDExtendedCoordinatesIncrementor.#ctor(System.Int32[],System.Int32,System.Action{NumSharp.Utilities.NDExtendedCoordinatesIncrementor})">
            <param name="dims">The dims has to be not extended, use <see cref="M:System.Array.Resize``1(``0[]@,System.Int32)"/> if it already extended</param>
            <param name="extendBy">By how many items should <see cref="F:NumSharp.Utilities.NDExtendedCoordinatesIncrementor.Index"/> be extended</param>
            <param name="endCallback"></param>
        </member>
        <member name="T:NumSharp.Utilities.InfoOf`1">
            <summary>
                Provides a cache for properties of <typeparamref name="T"/> that requires computation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NumSharp.Utilities.Linq.IEnumeratorExtensions.ToIEnumerable``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
                Turns <see cref="T:System.Collections.Generic.IEnumerator`1"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="T:NumSharp.Utilities.Linq.IExtremaEnumerable`1">
            <summary>
            Exposes the enumerator, which supports iteration over a sequence of
            some extremum property (maximum or minimum) of a specified type.
            </summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
        </member>
        <member name="M:NumSharp.Utilities.Linq.IExtremaEnumerable`1.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of
            the sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the specified number
            of elements from the start of the input sequence.
            </returns>
        </member>
        <member name="M:NumSharp.Utilities.Linq.IExtremaEnumerable`1.TakeLast(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements at the end of the
            sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the specified number
            of elements at the end of the input sequence.
            </returns>
        </member>
        <member name="M:NumSharp.Utilities.Linq.MoreEnumerable.First``1(NumSharp.Utilities.Linq.IExtremaEnumerable{``0})">
            <summary>
            Returns the first element of a sequence.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The input sequence.</param>
            <exception cref="T:System.InvalidOperationException">
            The input sequence is empty.</exception>
            <returns>
            The first element of the input sequence.
            </returns>
        </member>
        <member name="M:NumSharp.Utilities.Linq.MoreEnumerable.FirstOrDefault``1(NumSharp.Utilities.Linq.IExtremaEnumerable{``0})">
            <summary>
            Returns the first element of a sequence, or a default value if the
            sequence contains no elements.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The input sequence.</param>
            <returns>
            Default value of type <typeparamref name="T"/> if source is empty;
            otherwise, the first element in source.
            </returns>
        </member>
        <member name="M:NumSharp.Utilities.Linq.MoreEnumerable.Last``1(NumSharp.Utilities.Linq.IExtremaEnumerable{``0})">
            <summary>
            Returns the last element of a sequence.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The input sequence.</param>
            <exception cref="T:System.InvalidOperationException">
            The input sequence is empty.</exception>
            <returns>
            The last element of the input sequence.
            </returns>
        </member>
        <member name="M:NumSharp.Utilities.Linq.MoreEnumerable.LastOrDefault``1(NumSharp.Utilities.Linq.IExtremaEnumerable{``0})">
            <summary>
            Returns the last element of a sequence, or a default value if the
            sequence contains no elements.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The input sequence.</param>
            <returns>
            Default value of type <typeparamref name="T"/> if source is empty;
            otherwise, the last element in source.
            </returns>
        </member>
        <member name="M:NumSharp.Utilities.Linq.MoreEnumerable.Single``1(NumSharp.Utilities.Linq.IExtremaEnumerable{``0})">
            <summary>
            Returns the only element of a sequence, and throws an exception if
            there is not exactly one element in the sequence.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The input sequence.</param>
            <exception cref="T:System.InvalidOperationException">
            The input sequence contains more than one element.</exception>
            <returns>
            The single element of the input sequence.
            </returns>
        </member>
        <member name="M:NumSharp.Utilities.Linq.MoreEnumerable.SingleOrDefault``1(NumSharp.Utilities.Linq.IExtremaEnumerable{``0})">
            <summary>
            Returns the only element of a sequence, or a default value if the
            sequence is empty; this method throws an exception if there is more
            than one element in the sequence.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The input sequence.</param>
            <returns>
            The single element of the input sequence, or default value of type
            <typeparamref name="T"/> if the sequence contains no elements.
            </returns>
        </member>
        <member name="M:NumSharp.Utilities.Linq.MoreEnumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximal elements of the given sequence, based on
            the given projection.
            </summary>
            <remarks>
            This overload uses the default comparer  for the projected type.
            This operator uses deferred execution. The results are evaluated
            and cached on first use to returned sequence.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <returns>The maximal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> is empty</exception>
        </member>
        <member name="M:NumSharp.Utilities.Linq.MoreEnumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the maximal elements of the given sequence, based on
            the given projection and the specified comparer for projected values.
            </summary>
            <remarks>
            This operator uses deferred execution. The results are evaluated
            and cached on first use to returned sequence.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <param name="comparer">Comparer to use to compare projected values</param>
            <returns>The maximal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>, <paramref name="selector"/>
            or <paramref name="comparer"/> is null</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> is empty</exception>
        </member>
        <member name="T:NumSharp.Utilities.Maths.Operator">
            <summary>
                A class that provides math operations that return the exact expected type according to numpy.
            </summary>
        </member>
        <member name="T:NumSharp.Utilities.NonGenericConvert">
            <summary>
                Provides a way to convert boxed object from known time to specific type.
            </summary>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromBooleanToByte(System.Object)">
            <summary>
                Convert from Boolean to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromBooleanToInt16(System.Object)">
            <summary>
                Convert from Boolean to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromBooleanToUInt16(System.Object)">
            <summary>
                Convert from Boolean to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromBooleanToInt32(System.Object)">
            <summary>
                Convert from Boolean to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromBooleanToUInt32(System.Object)">
            <summary>
                Convert from Boolean to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromBooleanToInt64(System.Object)">
            <summary>
                Convert from Boolean to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromBooleanToUInt64(System.Object)">
            <summary>
                Convert from Boolean to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromBooleanToChar(System.Object)">
            <summary>
                Convert from Boolean to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromBooleanToDouble(System.Object)">
            <summary>
                Convert from Boolean to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromBooleanToSingle(System.Object)">
            <summary>
                Convert from Boolean to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromBooleanToDecimal(System.Object)">
            <summary>
                Convert from Boolean to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromBooleanToString(System.Object)">
            <summary>
                Convert from Boolean to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromByteToBoolean(System.Object)">
            <summary>
                Convert from Byte to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromByteToInt16(System.Object)">
            <summary>
                Convert from Byte to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromByteToUInt16(System.Object)">
            <summary>
                Convert from Byte to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromByteToInt32(System.Object)">
            <summary>
                Convert from Byte to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromByteToUInt32(System.Object)">
            <summary>
                Convert from Byte to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromByteToInt64(System.Object)">
            <summary>
                Convert from Byte to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromByteToUInt64(System.Object)">
            <summary>
                Convert from Byte to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromByteToChar(System.Object)">
            <summary>
                Convert from Byte to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromByteToDouble(System.Object)">
            <summary>
                Convert from Byte to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromByteToSingle(System.Object)">
            <summary>
                Convert from Byte to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromByteToDecimal(System.Object)">
            <summary>
                Convert from Byte to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromByteToString(System.Object)">
            <summary>
                Convert from Byte to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt16ToBoolean(System.Object)">
            <summary>
                Convert from Int16 to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt16ToByte(System.Object)">
            <summary>
                Convert from Int16 to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt16ToUInt16(System.Object)">
            <summary>
                Convert from Int16 to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt16ToInt32(System.Object)">
            <summary>
                Convert from Int16 to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt16ToUInt32(System.Object)">
            <summary>
                Convert from Int16 to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt16ToInt64(System.Object)">
            <summary>
                Convert from Int16 to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt16ToUInt64(System.Object)">
            <summary>
                Convert from Int16 to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt16ToChar(System.Object)">
            <summary>
                Convert from Int16 to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt16ToDouble(System.Object)">
            <summary>
                Convert from Int16 to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt16ToSingle(System.Object)">
            <summary>
                Convert from Int16 to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt16ToDecimal(System.Object)">
            <summary>
                Convert from Int16 to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt16ToString(System.Object)">
            <summary>
                Convert from Int16 to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt16ToBoolean(System.Object)">
            <summary>
                Convert from UInt16 to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt16ToByte(System.Object)">
            <summary>
                Convert from UInt16 to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt16ToInt16(System.Object)">
            <summary>
                Convert from UInt16 to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt16ToInt32(System.Object)">
            <summary>
                Convert from UInt16 to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt16ToUInt32(System.Object)">
            <summary>
                Convert from UInt16 to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt16ToInt64(System.Object)">
            <summary>
                Convert from UInt16 to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt16ToUInt64(System.Object)">
            <summary>
                Convert from UInt16 to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt16ToChar(System.Object)">
            <summary>
                Convert from UInt16 to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt16ToDouble(System.Object)">
            <summary>
                Convert from UInt16 to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt16ToSingle(System.Object)">
            <summary>
                Convert from UInt16 to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt16ToDecimal(System.Object)">
            <summary>
                Convert from UInt16 to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt16ToString(System.Object)">
            <summary>
                Convert from UInt16 to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt32ToBoolean(System.Object)">
            <summary>
                Convert from Int32 to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt32ToByte(System.Object)">
            <summary>
                Convert from Int32 to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt32ToInt16(System.Object)">
            <summary>
                Convert from Int32 to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt32ToUInt16(System.Object)">
            <summary>
                Convert from Int32 to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt32ToUInt32(System.Object)">
            <summary>
                Convert from Int32 to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt32ToInt64(System.Object)">
            <summary>
                Convert from Int32 to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt32ToUInt64(System.Object)">
            <summary>
                Convert from Int32 to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt32ToChar(System.Object)">
            <summary>
                Convert from Int32 to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt32ToDouble(System.Object)">
            <summary>
                Convert from Int32 to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt32ToSingle(System.Object)">
            <summary>
                Convert from Int32 to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt32ToDecimal(System.Object)">
            <summary>
                Convert from Int32 to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt32ToString(System.Object)">
            <summary>
                Convert from Int32 to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt32ToBoolean(System.Object)">
            <summary>
                Convert from UInt32 to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt32ToByte(System.Object)">
            <summary>
                Convert from UInt32 to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt32ToInt16(System.Object)">
            <summary>
                Convert from UInt32 to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt32ToUInt16(System.Object)">
            <summary>
                Convert from UInt32 to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt32ToInt32(System.Object)">
            <summary>
                Convert from UInt32 to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt32ToInt64(System.Object)">
            <summary>
                Convert from UInt32 to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt32ToUInt64(System.Object)">
            <summary>
                Convert from UInt32 to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt32ToChar(System.Object)">
            <summary>
                Convert from UInt32 to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt32ToDouble(System.Object)">
            <summary>
                Convert from UInt32 to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt32ToSingle(System.Object)">
            <summary>
                Convert from UInt32 to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt32ToDecimal(System.Object)">
            <summary>
                Convert from UInt32 to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt32ToString(System.Object)">
            <summary>
                Convert from UInt32 to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt64ToBoolean(System.Object)">
            <summary>
                Convert from Int64 to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt64ToByte(System.Object)">
            <summary>
                Convert from Int64 to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt64ToInt16(System.Object)">
            <summary>
                Convert from Int64 to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt64ToUInt16(System.Object)">
            <summary>
                Convert from Int64 to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt64ToInt32(System.Object)">
            <summary>
                Convert from Int64 to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt64ToUInt32(System.Object)">
            <summary>
                Convert from Int64 to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt64ToUInt64(System.Object)">
            <summary>
                Convert from Int64 to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt64ToChar(System.Object)">
            <summary>
                Convert from Int64 to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt64ToDouble(System.Object)">
            <summary>
                Convert from Int64 to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt64ToSingle(System.Object)">
            <summary>
                Convert from Int64 to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt64ToDecimal(System.Object)">
            <summary>
                Convert from Int64 to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromInt64ToString(System.Object)">
            <summary>
                Convert from Int64 to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt64ToBoolean(System.Object)">
            <summary>
                Convert from UInt64 to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt64ToByte(System.Object)">
            <summary>
                Convert from UInt64 to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt64ToInt16(System.Object)">
            <summary>
                Convert from UInt64 to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt64ToUInt16(System.Object)">
            <summary>
                Convert from UInt64 to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt64ToInt32(System.Object)">
            <summary>
                Convert from UInt64 to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt64ToUInt32(System.Object)">
            <summary>
                Convert from UInt64 to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt64ToInt64(System.Object)">
            <summary>
                Convert from UInt64 to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt64ToChar(System.Object)">
            <summary>
                Convert from UInt64 to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt64ToDouble(System.Object)">
            <summary>
                Convert from UInt64 to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt64ToSingle(System.Object)">
            <summary>
                Convert from UInt64 to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt64ToDecimal(System.Object)">
            <summary>
                Convert from UInt64 to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromUInt64ToString(System.Object)">
            <summary>
                Convert from UInt64 to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromCharToBoolean(System.Object)">
            <summary>
                Convert from Char to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromCharToByte(System.Object)">
            <summary>
                Convert from Char to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromCharToInt16(System.Object)">
            <summary>
                Convert from Char to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromCharToUInt16(System.Object)">
            <summary>
                Convert from Char to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromCharToInt32(System.Object)">
            <summary>
                Convert from Char to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromCharToUInt32(System.Object)">
            <summary>
                Convert from Char to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromCharToInt64(System.Object)">
            <summary>
                Convert from Char to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromCharToUInt64(System.Object)">
            <summary>
                Convert from Char to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromCharToDouble(System.Object)">
            <summary>
                Convert from Char to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromCharToSingle(System.Object)">
            <summary>
                Convert from Char to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromCharToDecimal(System.Object)">
            <summary>
                Convert from Char to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromCharToString(System.Object)">
            <summary>
                Convert from Char to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDoubleToBoolean(System.Object)">
            <summary>
                Convert from Double to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDoubleToByte(System.Object)">
            <summary>
                Convert from Double to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDoubleToInt16(System.Object)">
            <summary>
                Convert from Double to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDoubleToUInt16(System.Object)">
            <summary>
                Convert from Double to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDoubleToInt32(System.Object)">
            <summary>
                Convert from Double to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDoubleToUInt32(System.Object)">
            <summary>
                Convert from Double to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDoubleToInt64(System.Object)">
            <summary>
                Convert from Double to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDoubleToUInt64(System.Object)">
            <summary>
                Convert from Double to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDoubleToChar(System.Object)">
            <summary>
                Convert from Double to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDoubleToSingle(System.Object)">
            <summary>
                Convert from Double to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDoubleToDecimal(System.Object)">
            <summary>
                Convert from Double to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDoubleToString(System.Object)">
            <summary>
                Convert from Double to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromSingleToBoolean(System.Object)">
            <summary>
                Convert from Single to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromSingleToByte(System.Object)">
            <summary>
                Convert from Single to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromSingleToInt16(System.Object)">
            <summary>
                Convert from Single to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromSingleToUInt16(System.Object)">
            <summary>
                Convert from Single to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromSingleToInt32(System.Object)">
            <summary>
                Convert from Single to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromSingleToUInt32(System.Object)">
            <summary>
                Convert from Single to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromSingleToInt64(System.Object)">
            <summary>
                Convert from Single to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromSingleToUInt64(System.Object)">
            <summary>
                Convert from Single to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromSingleToChar(System.Object)">
            <summary>
                Convert from Single to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromSingleToDouble(System.Object)">
            <summary>
                Convert from Single to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromSingleToDecimal(System.Object)">
            <summary>
                Convert from Single to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromSingleToString(System.Object)">
            <summary>
                Convert from Single to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDecimalToBoolean(System.Object)">
            <summary>
                Convert from Decimal to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDecimalToByte(System.Object)">
            <summary>
                Convert from Decimal to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDecimalToInt16(System.Object)">
            <summary>
                Convert from Decimal to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDecimalToUInt16(System.Object)">
            <summary>
                Convert from Decimal to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDecimalToInt32(System.Object)">
            <summary>
                Convert from Decimal to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDecimalToUInt32(System.Object)">
            <summary>
                Convert from Decimal to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDecimalToInt64(System.Object)">
            <summary>
                Convert from Decimal to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDecimalToUInt64(System.Object)">
            <summary>
                Convert from Decimal to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDecimalToChar(System.Object)">
            <summary>
                Convert from Decimal to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDecimalToDouble(System.Object)">
            <summary>
                Convert from Decimal to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDecimalToSingle(System.Object)">
            <summary>
                Convert from Decimal to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromDecimalToString(System.Object)">
            <summary>
                Convert from Decimal to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromStringToBoolean(System.Object)">
            <summary>
                Convert from String to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromStringToByte(System.Object)">
            <summary>
                Convert from String to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromStringToInt16(System.Object)">
            <summary>
                Convert from String to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromStringToUInt16(System.Object)">
            <summary>
                Convert from String to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromStringToInt32(System.Object)">
            <summary>
                Convert from String to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromStringToUInt32(System.Object)">
            <summary>
                Convert from String to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromStringToInt64(System.Object)">
            <summary>
                Convert from String to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromStringToUInt64(System.Object)">
            <summary>
                Convert from String to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromStringToChar(System.Object)">
            <summary>
                Convert from String to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromStringToDouble(System.Object)">
            <summary>
                Convert from String to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromStringToSingle(System.Object)">
            <summary>
                Convert from String to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.NonGenericConvert.FromStringToDecimal(System.Object)">
            <summary>
                Convert from String to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.NumberInfo.MaxValue(NumSharp.NPTypeCode)">
            <summary>
                Get the min value of given <see cref="T:NumSharp.NPTypeCode"/>.
            </summary>
        </member>
        <member name="M:NumSharp.Utilities.NumberInfo.MinValue(NumSharp.NPTypeCode)">
            <summary>
                Get the min value of given <see cref="T:NumSharp.NPTypeCode"/>.
            </summary>
        </member>
        <member name="T:NumSharp.Utilities.py">
            <summary>
            Implements Python utility functions that are often used in connection with numpy
            </summary>
        </member>
        <member name="T:NumSharp.Utilities.TypelessConvert">
            <summary>
                Provides a way to convert boxed object from known input type to known output type.
                By making it receive and return <see cref="T:System.Object"/> - It is suitable for a common delegate: see <see cref="T:NumSharp.Utilities.TypelessConvertDelegate"/>
            </summary>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.#cctor">
            <summary>Initializes a new instance of the <see cref="T:System.Object"></see> class.</summary>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromBooleanToByte(System.Object)">
            <summary>
                Convert from Boolean to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromBooleanToInt16(System.Object)">
            <summary>
                Convert from Boolean to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromBooleanToUInt16(System.Object)">
            <summary>
                Convert from Boolean to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromBooleanToInt32(System.Object)">
            <summary>
                Convert from Boolean to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromBooleanToUInt32(System.Object)">
            <summary>
                Convert from Boolean to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromBooleanToInt64(System.Object)">
            <summary>
                Convert from Boolean to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromBooleanToUInt64(System.Object)">
            <summary>
                Convert from Boolean to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromBooleanToChar(System.Object)">
            <summary>
                Convert from Boolean to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromBooleanToDouble(System.Object)">
            <summary>
                Convert from Boolean to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromBooleanToSingle(System.Object)">
            <summary>
                Convert from Boolean to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromBooleanToDecimal(System.Object)">
            <summary>
                Convert from Boolean to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromBooleanToString(System.Object)">
            <summary>
                Convert from Boolean to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Boolean"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromByteToBoolean(System.Object)">
            <summary>
                Convert from Byte to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromByteToInt16(System.Object)">
            <summary>
                Convert from Byte to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromByteToUInt16(System.Object)">
            <summary>
                Convert from Byte to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromByteToInt32(System.Object)">
            <summary>
                Convert from Byte to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromByteToUInt32(System.Object)">
            <summary>
                Convert from Byte to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromByteToInt64(System.Object)">
            <summary>
                Convert from Byte to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromByteToUInt64(System.Object)">
            <summary>
                Convert from Byte to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromByteToChar(System.Object)">
            <summary>
                Convert from Byte to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromByteToDouble(System.Object)">
            <summary>
                Convert from Byte to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromByteToSingle(System.Object)">
            <summary>
                Convert from Byte to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromByteToDecimal(System.Object)">
            <summary>
                Convert from Byte to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromByteToString(System.Object)">
            <summary>
                Convert from Byte to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Byte"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt16ToBoolean(System.Object)">
            <summary>
                Convert from Int16 to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt16ToByte(System.Object)">
            <summary>
                Convert from Int16 to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt16ToUInt16(System.Object)">
            <summary>
                Convert from Int16 to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt16ToInt32(System.Object)">
            <summary>
                Convert from Int16 to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt16ToUInt32(System.Object)">
            <summary>
                Convert from Int16 to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt16ToInt64(System.Object)">
            <summary>
                Convert from Int16 to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt16ToUInt64(System.Object)">
            <summary>
                Convert from Int16 to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt16ToChar(System.Object)">
            <summary>
                Convert from Int16 to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt16ToDouble(System.Object)">
            <summary>
                Convert from Int16 to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt16ToSingle(System.Object)">
            <summary>
                Convert from Int16 to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt16ToDecimal(System.Object)">
            <summary>
                Convert from Int16 to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt16ToString(System.Object)">
            <summary>
                Convert from Int16 to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int16"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt16ToBoolean(System.Object)">
            <summary>
                Convert from UInt16 to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt16ToByte(System.Object)">
            <summary>
                Convert from UInt16 to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt16ToInt16(System.Object)">
            <summary>
                Convert from UInt16 to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt16ToInt32(System.Object)">
            <summary>
                Convert from UInt16 to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt16ToUInt32(System.Object)">
            <summary>
                Convert from UInt16 to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt16ToInt64(System.Object)">
            <summary>
                Convert from UInt16 to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt16ToUInt64(System.Object)">
            <summary>
                Convert from UInt16 to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt16ToChar(System.Object)">
            <summary>
                Convert from UInt16 to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt16ToDouble(System.Object)">
            <summary>
                Convert from UInt16 to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt16ToSingle(System.Object)">
            <summary>
                Convert from UInt16 to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt16ToDecimal(System.Object)">
            <summary>
                Convert from UInt16 to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt16ToString(System.Object)">
            <summary>
                Convert from UInt16 to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt16"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt32ToBoolean(System.Object)">
            <summary>
                Convert from Int32 to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt32ToByte(System.Object)">
            <summary>
                Convert from Int32 to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt32ToInt16(System.Object)">
            <summary>
                Convert from Int32 to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt32ToUInt16(System.Object)">
            <summary>
                Convert from Int32 to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt32ToUInt32(System.Object)">
            <summary>
                Convert from Int32 to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt32ToInt64(System.Object)">
            <summary>
                Convert from Int32 to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt32ToUInt64(System.Object)">
            <summary>
                Convert from Int32 to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt32ToChar(System.Object)">
            <summary>
                Convert from Int32 to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt32ToDouble(System.Object)">
            <summary>
                Convert from Int32 to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt32ToSingle(System.Object)">
            <summary>
                Convert from Int32 to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt32ToDecimal(System.Object)">
            <summary>
                Convert from Int32 to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt32ToString(System.Object)">
            <summary>
                Convert from Int32 to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int32"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt32ToBoolean(System.Object)">
            <summary>
                Convert from UInt32 to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt32ToByte(System.Object)">
            <summary>
                Convert from UInt32 to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt32ToInt16(System.Object)">
            <summary>
                Convert from UInt32 to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt32ToUInt16(System.Object)">
            <summary>
                Convert from UInt32 to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt32ToInt32(System.Object)">
            <summary>
                Convert from UInt32 to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt32ToInt64(System.Object)">
            <summary>
                Convert from UInt32 to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt32ToUInt64(System.Object)">
            <summary>
                Convert from UInt32 to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt32ToChar(System.Object)">
            <summary>
                Convert from UInt32 to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt32ToDouble(System.Object)">
            <summary>
                Convert from UInt32 to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt32ToSingle(System.Object)">
            <summary>
                Convert from UInt32 to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt32ToDecimal(System.Object)">
            <summary>
                Convert from UInt32 to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt32ToString(System.Object)">
            <summary>
                Convert from UInt32 to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt32"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt64ToBoolean(System.Object)">
            <summary>
                Convert from Int64 to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt64ToByte(System.Object)">
            <summary>
                Convert from Int64 to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt64ToInt16(System.Object)">
            <summary>
                Convert from Int64 to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt64ToUInt16(System.Object)">
            <summary>
                Convert from Int64 to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt64ToInt32(System.Object)">
            <summary>
                Convert from Int64 to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt64ToUInt32(System.Object)">
            <summary>
                Convert from Int64 to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt64ToUInt64(System.Object)">
            <summary>
                Convert from Int64 to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt64ToChar(System.Object)">
            <summary>
                Convert from Int64 to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt64ToDouble(System.Object)">
            <summary>
                Convert from Int64 to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt64ToSingle(System.Object)">
            <summary>
                Convert from Int64 to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt64ToDecimal(System.Object)">
            <summary>
                Convert from Int64 to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromInt64ToString(System.Object)">
            <summary>
                Convert from Int64 to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Int64"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt64ToBoolean(System.Object)">
            <summary>
                Convert from UInt64 to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt64ToByte(System.Object)">
            <summary>
                Convert from UInt64 to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt64ToInt16(System.Object)">
            <summary>
                Convert from UInt64 to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt64ToUInt16(System.Object)">
            <summary>
                Convert from UInt64 to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt64ToInt32(System.Object)">
            <summary>
                Convert from UInt64 to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt64ToUInt32(System.Object)">
            <summary>
                Convert from UInt64 to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt64ToInt64(System.Object)">
            <summary>
                Convert from UInt64 to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt64ToChar(System.Object)">
            <summary>
                Convert from UInt64 to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt64ToDouble(System.Object)">
            <summary>
                Convert from UInt64 to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt64ToSingle(System.Object)">
            <summary>
                Convert from UInt64 to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt64ToDecimal(System.Object)">
            <summary>
                Convert from UInt64 to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromUInt64ToString(System.Object)">
            <summary>
                Convert from UInt64 to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.UInt64"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromCharToBoolean(System.Object)">
            <summary>
                Convert from Char to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromCharToByte(System.Object)">
            <summary>
                Convert from Char to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromCharToInt16(System.Object)">
            <summary>
                Convert from Char to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromCharToUInt16(System.Object)">
            <summary>
                Convert from Char to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromCharToInt32(System.Object)">
            <summary>
                Convert from Char to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromCharToUInt32(System.Object)">
            <summary>
                Convert from Char to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromCharToInt64(System.Object)">
            <summary>
                Convert from Char to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromCharToUInt64(System.Object)">
            <summary>
                Convert from Char to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromCharToDouble(System.Object)">
            <summary>
                Convert from Char to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromCharToSingle(System.Object)">
            <summary>
                Convert from Char to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromCharToDecimal(System.Object)">
            <summary>
                Convert from Char to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromCharToString(System.Object)">
            <summary>
                Convert from Char to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Char"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDoubleToBoolean(System.Object)">
            <summary>
                Convert from Double to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDoubleToByte(System.Object)">
            <summary>
                Convert from Double to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDoubleToInt16(System.Object)">
            <summary>
                Convert from Double to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDoubleToUInt16(System.Object)">
            <summary>
                Convert from Double to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDoubleToInt32(System.Object)">
            <summary>
                Convert from Double to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDoubleToUInt32(System.Object)">
            <summary>
                Convert from Double to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDoubleToInt64(System.Object)">
            <summary>
                Convert from Double to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDoubleToUInt64(System.Object)">
            <summary>
                Convert from Double to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDoubleToChar(System.Object)">
            <summary>
                Convert from Double to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDoubleToSingle(System.Object)">
            <summary>
                Convert from Double to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDoubleToDecimal(System.Object)">
            <summary>
                Convert from Double to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDoubleToString(System.Object)">
            <summary>
                Convert from Double to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Double"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromSingleToBoolean(System.Object)">
            <summary>
                Convert from Single to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromSingleToByte(System.Object)">
            <summary>
                Convert from Single to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromSingleToInt16(System.Object)">
            <summary>
                Convert from Single to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromSingleToUInt16(System.Object)">
            <summary>
                Convert from Single to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromSingleToInt32(System.Object)">
            <summary>
                Convert from Single to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromSingleToUInt32(System.Object)">
            <summary>
                Convert from Single to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromSingleToInt64(System.Object)">
            <summary>
                Convert from Single to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromSingleToUInt64(System.Object)">
            <summary>
                Convert from Single to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromSingleToChar(System.Object)">
            <summary>
                Convert from Single to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromSingleToDouble(System.Object)">
            <summary>
                Convert from Single to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromSingleToDecimal(System.Object)">
            <summary>
                Convert from Single to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromSingleToString(System.Object)">
            <summary>
                Convert from Single to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Single"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDecimalToBoolean(System.Object)">
            <summary>
                Convert from Decimal to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDecimalToByte(System.Object)">
            <summary>
                Convert from Decimal to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDecimalToInt16(System.Object)">
            <summary>
                Convert from Decimal to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDecimalToUInt16(System.Object)">
            <summary>
                Convert from Decimal to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDecimalToInt32(System.Object)">
            <summary>
                Convert from Decimal to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDecimalToUInt32(System.Object)">
            <summary>
                Convert from Decimal to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDecimalToInt64(System.Object)">
            <summary>
                Convert from Decimal to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDecimalToUInt64(System.Object)">
            <summary>
                Convert from Decimal to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDecimalToChar(System.Object)">
            <summary>
                Convert from Decimal to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDecimalToDouble(System.Object)">
            <summary>
                Convert from Decimal to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDecimalToSingle(System.Object)">
            <summary>
                Convert from Decimal to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromDecimalToString(System.Object)">
            <summary>
                Convert from Decimal to String when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.Decimal"/> and then converted to <see cref="T:System.String"/></param>
            <returns>String</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromStringToBoolean(System.Object)">
            <summary>
                Convert from String to Boolean when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Boolean"/></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromStringToByte(System.Object)">
            <summary>
                Convert from String to Byte when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Byte"/></param>
            <returns>Byte</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromStringToInt16(System.Object)">
            <summary>
                Convert from String to Int16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Int16"/></param>
            <returns>Int16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromStringToUInt16(System.Object)">
            <summary>
                Convert from String to UInt16 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.UInt16"/></param>
            <returns>UInt16</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromStringToInt32(System.Object)">
            <summary>
                Convert from String to Int32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Int32"/></param>
            <returns>Int32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromStringToUInt32(System.Object)">
            <summary>
                Convert from String to UInt32 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.UInt32"/></param>
            <returns>UInt32</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromStringToInt64(System.Object)">
            <summary>
                Convert from String to Int64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Int64"/></param>
            <returns>Int64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromStringToUInt64(System.Object)">
            <summary>
                Convert from String to UInt64 when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.UInt64"/></param>
            <returns>UInt64</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromStringToChar(System.Object)">
            <summary>
                Convert from String to Char when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Char"/></param>
            <returns>Char</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromStringToDouble(System.Object)">
            <summary>
                Convert from String to Double when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Double"/></param>
            <returns>Double</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromStringToSingle(System.Object)">
            <summary>
                Convert from String to Single when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Single"/></param>
            <returns>Single</returns>
        </member>
        <member name="M:NumSharp.Utilities.TypelessConvert.FromStringToDecimal(System.Object)">
            <summary>
                Convert from String to Decimal when input is a boxed non-generic <see cref="T:System.Object"/>.
            </summary>
            <param name="input">The object that will be casted to <see cref="T:System.String"/> and then converted to <see cref="T:System.Decimal"/></param>
            <returns>Decimal</returns>
        </member>
        <member name="F:NumSharp.BroadcastInfo.OriginalShape">
            <summary>
                The original shape prior to broadcasting.
            </summary>
        </member>
        <member name="F:NumSharp.BroadcastInfo.UnreducedBroadcastedShape">
            <summary>
                Represents a shape with the same number of dimensions that the broadcasted ones are set to dim of 1.
            </summary>
            <remarks>This shape is lazyloaded during runtime when calling Shape.GetOffset and other methods.</remarks>
        </member>
        <member name="T:NumSharp.Shape">
            <summary>
                Represents a shape of an N-D array.
            </summary>
            <remarks>Handles slicing, indexing based on coordinates or linear offset and broadcastted indexing.</remarks>
            <summary>
                Represents a shape of an N-D array.
            </summary>
            <remarks>Handles slicing, indexing based on coordinates or linear offset and broadcastted indexing.</remarks>
        </member>
        <member name="F:NumSharp.Shape.ModifiedStrides">
            <summary>
                Does this Shape have modified strides, usually in scenarios like np.transpose.
            </summary>
        </member>
        <member name="P:NumSharp.Shape.IsSliced">
            <summary>
                True if the shape of this array was obtained by a slicing operation that caused the underlying data to be non-contiguous
            </summary>
        </member>
        <member name="P:NumSharp.Shape.IsContiguous">
            <summary>
                Does this Shape represents a non-sliced and non-broadcasted hence contagious unmanaged memory?
            </summary>
        </member>
        <member name="P:NumSharp.Shape.IsRecursive">
            <summary>
                Is this Shape a recusive view? (deeper than 1 view)
            </summary>
        </member>
        <member name="F:NumSharp.Shape.layout">
            <summary>
                Dense data are stored contiguously in memory, addressed by a single index (the memory address). <br></br>
                Array memory ordering schemes translate that single index into multiple indices corresponding to the array coordinates.<br></br>
                0: Row major<br></br>
                1: Column major
            </summary>
        </member>
        <member name="P:NumSharp.Shape.IsBroadcasted">
            <summary>
                Is this shape a broadcast and/or has modified strides?
            </summary>
        </member>
        <member name="F:NumSharp.Shape.IsScalar">
            <summary>
                Is this shape a scalar? (<see cref="P:NumSharp.Shape.NDim"/>==0 &amp;&amp; <see cref="F:NumSharp.Shape.size"/> == 1)
            </summary>
        </member>
        <member name="P:NumSharp.Shape.IsEmpty">
            <summary>
            True if the shape is not initialized.
            Note: A scalar shape is not empty.
            </summary>
        </member>
        <member name="F:NumSharp.Shape.Scalar">
            <summary>
                Singleton instance of a <see cref="T:NumSharp.Shape"/> that represents a scalar.
            </summary>
        </member>
        <member name="M:NumSharp.Shape.NewScalar">
            <summary>
                Create a new scalar shape
            </summary>
        </member>
        <member name="M:NumSharp.Shape.NewScalar(NumSharp.ViewInfo)">
            <summary>
                Create a new scalar shape
            </summary>
        </member>
        <member name="M:NumSharp.Shape.NewScalar(NumSharp.ViewInfo,NumSharp.BroadcastInfo)">
            <summary>
                Create a new scalar shape
            </summary>
        </member>
        <member name="M:NumSharp.Shape.Vector(System.Int32)">
            <summary>
                Create a shape that represents a vector.
            </summary>
            <remarks>Faster than calling Shape's constructor</remarks>
        </member>
        <member name="M:NumSharp.Shape.Vector(System.Int32,NumSharp.ViewInfo)">
            <summary>
                Create a shape that represents a vector.
            </summary>
            <remarks>Faster than calling Shape's constructor</remarks>
        </member>
        <member name="M:NumSharp.Shape.Matrix(System.Int32,System.Int32)">
            <summary>
                Create a shape that represents a matrix.
            </summary>
            <remarks>Faster than calling Shape's constructor</remarks>
        </member>
        <member name="P:NumSharp.Shape.Size">
            <summary>
                The linear size of this shape.
            </summary>
        </member>
        <member name="M:NumSharp.Shape.Empty(System.Int32)">
            <summary>
                An empty shape without any fields set except all are default.
            </summary>
            <remarks>Used internally.</remarks>
        </member>
        <member name="M:NumSharp.Shape.TransformOffset(System.Int32)">
            <summary>
                Retrieve the transformed offset if <see cref="P:NumSharp.Shape.IsSliced"/> is true, otherwise returns <paramref name="offset"/>.
            </summary>
            <param name="offset">The offset within the bounds of <see cref="F:NumSharp.Shape.size"/>.</param>
            <returns>The transformed offset.</returns>
            <remarks>Avoid using unless it is unclear if shape is sliced or not.</remarks>
        </member>
        <member name="M:NumSharp.Shape.GetOffset(System.Int32[])">
             <summary>
                 Get offset index out of coordinate indices.
            
                 The offset is the absolute offset in memory for the given coordinates.
                 Even for shapes that were sliced and reshaped after slicing and sliced again (and so forth)
                 this returns the absolute memory offset.
            
                 Note: the inverse operation to this is GetCoordinatesFromAbsoluteIndex
             </summary>
             <param name="indices">The coordinates to turn into linear offset</param>
             <returns>The index in the memory block that refers to a specific value.</returns>
             <remarks>Handles sliced indices and broadcasting</remarks>
        </member>
        <member name="M:NumSharp.Shape.GetOffset_1D(System.Int32)">
            <summary>
                Get offset index out of coordinate indices.
            </summary>
            <param name="index">The coordinates to turn into linear offset</param>
            <returns>The index in the memory block that refers to a specific value.</returns>
            <remarks>Handles sliced indices and broadcasting</remarks>
        </member>
        <member name="M:NumSharp.Shape.GetOffset_IgnoreViewInfo(System.Int32[])">
            <summary>
            Calculate the offset in an unsliced shape. If the shape is sliced, ignore the ViewInfo
            Note: to be used only inside of GetOffset()
            </summary>
        </member>
        <member name="M:NumSharp.Shape.GetOffset_broadcasted(System.Int32[])">
            <summary>
                Get offset index out of coordinate indices.
            </summary>
            <param name="indices">The coordinates to turn into linear offset</param>
            <returns>The index in the memory block that refers to a specific value.</returns>
            <remarks>Handles sliced indices and broadcasting</remarks>
        </member>
        <member name="M:NumSharp.Shape.GetOffset_broadcasted_1D(System.Int32)">
            <summary>
                Get offset index out of coordinate indices.
            </summary>
            <param name="index">The coordinates to turn into linear offset</param>
            <returns>The index in the memory block that refers to a specific value.</returns>
            <remarks>Handles sliced indices and broadcasting</remarks>
        </member>
        <member name="M:NumSharp.Shape.GetSubshape(System.Int32[])">
            <summary>
                Gets the shape based on given <paramref name="indicies"/> and the index offset (C-Contiguous) inside the current storage.
            </summary>
            <param name="indicies">The selection of indexes 0 based.</param>
            <returns></returns>
            <remarks>Used for slicing, returned shape is the new shape of the slice and offset is the offset from current address.</remarks>
        </member>
        <member name="M:NumSharp.Shape.GetCoordinates(System.Int32)">
            <summary>
             Gets coordinates in this shape from index in this shape (slicing is ignored).
             Example: Shape (2,3)
            0 => [0, 0]
            1 => [0, 1]
            ...
            6 => [1, 2]
            </summary>
            <param name="offset">the index if you would iterate from 0 to shape.size in row major order</param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Shape.GetCoordinatesFromAbsoluteIndex(System.Int32)">
            <summary>
                Retrievs the coordinates in current shape (potentially sliced and reshaped) from index in original array.<br></br>
                Note: this is the inverse operation of GetOffset<br></br>
                Example: Shape a (2,3) => sliced to b (2,2) by a[:, 1:]<br></br>
                The absolute indices in a are:<br></br>
                [0, 1, 2,<br></br>
                 3, 4, 5]<br></br>
                The absolute indices in b are:<br></br>
                [1, 2,<br></br>
                 4, 5]<br></br>
                <br></br>
                <br></br>
                Examples:<br></br>
                a.GetCoordinatesFromAbsoluteIndex(1) returns [0, 1]<br></br>
                b.GetCoordinatesFromAbsoluteIndex(0) returns [0, 0]<br></br>
                b.GetCoordinatesFromAbsoluteIndex(0) returns [] because it is out of shape<br></br>
            </summary>
            <param name="offset">Is the index in the original array before it was sliced and/or reshaped</param>
            <remarks>Note: due to slicing the absolute indices (offset in memory) are different from what GetCoordinates would return, which are relative indices in the shape.</remarks>
        </member>
        <member name="M:NumSharp.Shape.ExtractShape(System.Array)">
            <summary>
                Extracts the shape of given <paramref name="array"/>.
            </summary>
            <remarks>Supports both jagged and multi-dim.</remarks>
        </member>
        <member name="M:NumSharp.Shape.ComputeHashcode">
            <summary>
                Recalculate hashcode from current dimension and layout.
            </summary>
        </member>
        <member name="M:NumSharp.Shape.Equals(NumSharp.Shape)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:NumSharp.Shape.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:NumSharp.Shape.InferNegativeCoordinates(System.Int32[],System.Int32[])">
            <summary>
                Translates coordinates with negative indices, e.g:<br></br>
                np.arange(9)[-1] == np.arange(9)[8]<br></br>
                np.arange(9)[-2] == np.arange(9)[7]<br></br>
            </summary>
            <param name="dimensions">The dimensions these coordinates are targeting</param>
            <param name="coords">The coordinates.</param>
            <returns>Coordinates without negative indices.</returns>
        </member>
        <member name="M:NumSharp.Shape.SetStridesModified(System.Boolean)">
            <summary>
                Flag this shape as stride-modified.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NumSharp.Shape.System#ICloneable#Clone">
            <summary>Creates a new object that is a copy of the current instance.</summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:NumSharp.Shape.Clone(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Creates a complete copy of this Shape.
            </summary>
            <param name="deep">Should make a complete deep clone or a shallow if false.</param>
            <param name="unbroadcast"></param>
            <param name="unview"></param>
        </member>
        <member name="M:NumSharp.Shape.Clean">
            <summary>
                Returns a clean shape based on this.
                Cleans ViewInfo and returns a newly constructed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Shape.Reshape(NumSharp.Shape,System.Boolean)">
            <summary>
                Changes the shape representing this storage.
            </summary>
            <param name="newShape"></param>
            <exception cref="T:NumSharp.IncorrectShapeException">If shape's size mismatches current shape size.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="newShape"/>'s size == 0</exception>
            <param name="unsafe">When true, then guards are skipped.</param>
        </member>
        <member name="M:NumSharp.Shape._reshapeBroadcast(NumSharp.Shape@,System.Boolean)">
            <summary>
                Changes the shape representing this storage.
            </summary>
            <exception cref="T:NumSharp.IncorrectShapeException">If shape's size mismatches current shape size.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="newShape"/>'s size == 0</exception>
        </member>
        <member name="M:NumSharp.Shape.ExpandDimension(System.Int32)">
            <summary>
                Expands a specific <paramref name="axis"/> with 1 dimension.
            </summary>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.Shape.GetOffset(System.Int32*,System.Int32)">
            <summary>
                Get offset index out of coordinate indices.
            </summary>
            <param name="indices">A pointer to the coordinates to turn into linear offset</param>
            <param name="ndims">The number of dimensions</param>
            <returns>The index in the memory block that refers to a specific value.</returns>
            <remarks>Handles sliced indices and broadcasting</remarks>
        </member>
        <member name="M:NumSharp.Shape.GetSubshape(System.Int32*,System.Int32)">
            <summary>
                Gets the shape based on given <paramref name="ndims"/> and the index offset (C-Contiguous) inside the current storage.
            </summary>
            <param name="dims"></param>
            <param name="ndims">The selection of indexes 0 based.</param>
            <returns></returns>
            <remarks>Used for slicing, returned shape is the new shape of the slice and offset is the offset from current address.</remarks>
        </member>
        <member name="M:NumSharp.Shape.InferNegativeCoordinates(System.Int32[],System.Int32*,System.Int32)">
            <summary>
                Translates coordinates with negative indices, e.g:<br></br>
                np.arange(9)[-1] == np.arange(9)[8]<br></br>
                np.arange(9)[-2] == np.arange(9)[7]<br></br>
            </summary>
            <param name="dimensions">The dimensions these coordinates are targeting</param>
            <param name="coords">The coordinates.</param>
            <param name="coordsCount"></param>
            <returns>Coordinates without negative indices.</returns>
        </member>
        <member name="M:NumSharp.Shape.GetOffset_broadcasted(System.Int32*,System.Int32)">
            <summary>
                Get offset index out of coordinate indices.
            </summary>
            <param name="indices">The coordinates to turn into linear offset</param>
            <param name="ndims"></param>
            <returns>The index in the memory block that refers to a specific value.</returns>
            <remarks>Handles sliced indices and broadcasting</remarks>
        </member>
        <member name="M:NumSharp.Shape.GetOffset_IgnoreViewInfo(System.Int32*,System.Int32)">
            <summary>
            Calculate the offset in an unsliced shape. If the shape is sliced, ignore the ViewInfo
            Note: to be used only inside of GetOffset()
            </summary>
        </member>
        <member name="T:NumSharp.Slice">
            <summary>                                                                                                                                         <br></br>
            NDArray can be indexed using slicing                                                                                                              <br></br>
            A slice is constructed by start:stop:step notation                                                                                                <br></br>
                                                                                                                                                              <br></br>
            Examples:                                                                                                                                         <br></br>
                                                                                                                                                              <br></br>
            a[start:stop]  # items start through stop-1                                                                                                       <br></br>
            a[start:]      # items start through the rest of the array                                                                                        <br></br>
            a[:stop]       # items from the beginning through stop-1                                                                                          <br></br>
                                                                                                                                                              <br></br>
            The key point to remember is that the :stop value represents the first value that is not                                                          <br></br>
            in the selected slice. So, the difference between stop and start is the number of elements                                                        <br></br>
            selected (if step is 1, the default).                                                                                                             <br></br>
                                                                                                                                                              <br></br>
            There is also the step value, which can be used with any of the above:                                                                            <br></br>
            a[:]           # a copy of the whole array                                                                                                        <br></br>
            a[start:stop:step] # start through not past stop, by step                                                                                         <br></br>
                                                                                                                                                              <br></br>
            The other feature is that start or stop may be a negative number, which means it counts                                                           <br></br>
            from the end of the array instead of the beginning. So:                                                                                           <br></br>
            a[-1]    # last item in the array                                                                                                                 <br></br>
            a[-2:]   # last two items in the array                                                                                                            <br></br>
            a[:-2]   # everything except the last two items                                                                                                   <br></br>
            Similarly, step may be a negative number:                                                                                                         <br></br>
                                                                                                                                                              <br></br>
            a[::- 1]    # all items in the array, reversed                                                                                                    <br></br>
            a[1::- 1]   # the first two items, reversed                                                                                                       <br></br>
            a[:-3:-1]  # the last two items, reversed                                                                                                         <br></br>
            a[-3::- 1]  # everything except the last two items, reversed                                                                                      <br></br>
                                                                                                                                                              <br></br>
            NumSharp is kind to the programmer if there are fewer items than                                                                                  <br></br>
            you ask for. For example, if you  ask for a[:-2] and a only contains one element, you get an                                                      <br></br>
            empty list instead of an error.Sometimes you would prefer the error, so you have to be aware                                                      <br></br>
            that this may happen.                                                                                                                             <br></br>
                                                                                                                                                              <br></br>
            Adapted from Greg Hewgill's answer on Stackoverflow: https://stackoverflow.com/questions/509211/understanding-slice-notation                      <br></br>
                                                                                                                                                              <br></br>
            Note: special IsIndex == true                                                                                                                     <br></br>
            It will pick only a single value at Start in this dimension effectively reducing the Shape of the sliced matrix by 1 dimension.                   <br></br>
            It can be used to reduce an N-dimensional array/matrix to a (N-1)-dimensional array/matrix                                                        <br></br>
                                                                                                                                                              <br></br>
            Example:                                                                                                                                          <br></br>
            a=[[1, 2], [3, 4]]                                                                                                                                <br></br>
            a[:, 1] returns the second column of that 2x2 matrix as a 1-D vector                                                                              <br></br>
            </summary>
        </member>
        <member name="F:NumSharp.Slice.All">
            <summary>
            return : for this dimension
            </summary>
        </member>
        <member name="F:NumSharp.Slice.None">
            <summary>
            return 0:0 for this dimension
            </summary>
        </member>
        <member name="F:NumSharp.Slice.Ellipsis">
            <summary>
            fill up the missing dimensions with : at this point, corresponds to ... 
            </summary>
        </member>
        <member name="F:NumSharp.Slice.NewAxis">
            <summary>
            insert a new dimension at this point
            </summary>
        </member>
        <member name="M:NumSharp.Slice.Index(System.Int32)">
            <summary>
            return exactly one element at this dimension and reduce the shape from n-dim to (n-1)-dim
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:NumSharp.Slice.Length">
            <summary>
            Length of the slice. 
            <remarks>
            The length is not guaranteed to be known for i.e. a slice like ":". Make sure to check Start and Stop 
            for null before using it</remarks>
            </summary>
        </member>
        <member name="M:NumSharp.Slice.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            ndarray can be indexed using slicing
            slice is constructed by start:stop:step notation
            </summary>
            <param name="start">Start index of the slice, null means from the start of the array</param>
            <param name="stop">Stop index (first index after end of slice), null means to the end of the array</param>
            <param name="step">Optional step to select every n-th element, defaults to 1</param>
        </member>
        <member name="M:NumSharp.Slice.ParseSlices(System.String)">
            <summary>
            Parses Python array slice notation and returns an array of Slice objects
            </summary>
        </member>
        <member name="M:NumSharp.Slice.FormatSlices(NumSharp.Slice[])">
            <summary>
            Creates Python array slice notation out of an array of Slice objects (mainly used for tests)
            </summary>
        </member>
        <member name="M:NumSharp.Slice.ToSliceDef(System.Int32)">
            <summary>
            Converts the user Slice into an internal SliceDef which is easier to calculate with
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:NumSharp.SliceDef.#ctor(System.String)">
            <summary>
            (Start>>Step*Count)
            </summary>
            <param name="def"></param>
        </member>
        <member name="M:NumSharp.SliceDef.Invert">
            <summary>
            reverts the order of the slice sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:NumSharp.SliceDef.Merge(NumSharp.SliceDef)">
            <summary>
            Merge calculates the resulting one-time slice on the original data if it is sliced repeatedly
            </summary>
        </member>
        <member name="F:NumSharp.ViewInfo.ParentShape">
            <summary>
            ParentShape points to a sliced shape that was reshaped. usually this is null, except if the Shape is a reshaped slice.
            ParentShape always is a sliced shape!
            </summary>
        </member>
        <member name="F:NumSharp.ViewInfo.Slices">
            <summary>
            The slice definition for every dimension of the OriginalShape
            </summary>
        </member>
        <member name="F:NumSharp.ViewInfo.OriginalShape">
            <summary>
            OriginalShape is the primitive shape of the unsliced array
            </summary>
        </member>
        <member name="F:NumSharp.ViewInfo.UnreducedShape">
            <summary>
            UnreducedShape is the shape after slicing but without dimensionality reductions due to index access
            </summary>
        </member>
        <member name="T:DecimalMath.DecimalEx">
            <summary>
                Contains mathematical operations performed in Decimal precision.
            </summary>
        </member>
        <member name="M:DecimalMath.DecimalEx.Sqrt(System.Decimal)">
            <summary>
            Returns the square root of a given number. 
            </summary>
            <param name="s">A non-negative number.</param>
            <remarks> 
            Uses an implementation of the "Babylonian Method".
            See http://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method 
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.Pow(System.Decimal,System.Decimal)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="x">A number to be raised to a power.</param>
            <param name="y">A number that specifies a power.</param>
        </member>
        <member name="M:DecimalMath.DecimalEx.ExpBySquaring(System.Decimal,System.Decimal)">
            <summary>
            Raises one number to an integral power.
            </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Exponentiation_by_squaring
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.Exp(System.Decimal)">
            <summary>
            Returns e raised to the specified power.
            </summary>
            <param name="d">A number specifying a power.</param>
        </member>
        <member name="M:DecimalMath.DecimalEx.Log(System.Decimal)">
            <summary>
            Returns the natural (base e) logarithm of a specified number.
            </summary>
            <param name="d">A number whose logarithm is to be found.</param>
            <remarks>
            I'm still not satisfied with the speed. I tried several different
            algorithms that you can find in a historical version of this 
            source file. The one I settled on was the best of mediocrity.
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.Log(System.Decimal,System.Decimal)">
            <summary>
            Returns the logarithm of a specified number in a specified base.
            </summary>
            <param name="d">A number whose logarithm is to be found.</param>
            <param name="newBase">The base of the logarithm.</param>
            <remarks>
            This is a relatively naive implementation that simply divides the
            natural log of <paramref name="d"/> by the natural log of the base.
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.Log10(System.Decimal)">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="d">A number whose logarithm is to be found.</param>
        </member>
        <member name="M:DecimalMath.DecimalEx.Log2(System.Decimal)">
            <summary>
            Returns the base 2 logarithm of a specified number.
            </summary>
            <param name="d">A number whose logarithm is to be found.</param>
        </member>
        <member name="M:DecimalMath.DecimalEx.Factorial(System.Decimal)">
            <summary>
            Returns the factorial of a number n expressed as n!. Factorial is
            calculated as follows: n * (n - 1) * (n - 2) * ... * 1
            </summary>
            <param name="n">An integer.</param>
            <remarks>
            Only supports non-negative integers.
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.SolveQuadratic(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Uses the quadratic formula to factor and solve the equation ax^2 + bx + c = 0
            </summary>
            <param name="a">The coefficient of x^2.</param>
            <param name="b">The coefficient of x.</param>
            <param name="c">The constant.</param>
            <remarks>
            Will return empty results where there is no solution and for complex solutions.
            See http://www.wikihow.com/Factor-Second-Degree-Polynomials-%28Quadratic-Equations%29
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.Floor(System.Decimal,System.Int32)">
            <summary>
            Returns the floor of a Decimal value at the given number of digits.
            </summary>
            <param name="value">A decimal value.</param>
            <param name="places">An integer representing the maximum number of digits 
            after the decimal point to end up with.</param>
        </member>
        <member name="M:DecimalMath.DecimalEx.Ceiling(System.Decimal,System.Int32)">
            <summary>
            Returns the ceiling of a Decimal value at the given number of digits.
            </summary>
            <param name="value">A decimal value.</param>
            <param name="places">An integer representing the maximum number of digits 
            after the decimal point to end up with.</param>
        </member>
        <member name="M:DecimalMath.DecimalEx.GCF(System.Decimal,System.Decimal)">
            <summary>
            Calculates the greatest common factor of a and b to the highest level of
            precision represented by either number.
            </summary>
            <remarks>
            If either number is not an integer, the factor sought will be at the
            same precision as the most precise value.
            For example, 1.2 and 0.42 will yield 0.06.
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.GCF(System.Decimal,System.Decimal,System.Decimal[])">
            <summary>
            Gets the greatest common factor of three or more numbers.
            </summary>
        </member>
        <member name="M:DecimalMath.DecimalEx.AGMean(System.Decimal,System.Decimal)">
            <summary>
            Computes arithmetic-geometric mean which is the convergence of the
            series of the arithmetic and geometric means and their mean values.
            </summary>
            <param name="x">A number.</param>
            <param name="y">A number.</param>
            <remarks>
            See http://en.wikipedia.org/wiki/Arithmetic-geometric_mean
            Originally implemented to try to get a fast approximation of the
            natural logarithm: http://en.wikipedia.org/wiki/Natural_logarithm#High_precision
            But it didn't yield a precise enough answer.
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.Average(System.Decimal[])">
            <summary>
            Calculates the average of the supplied numbers.
            </summary>
            <param name="values">The numbers to average.</param>
            <remarks>
            Simply uses LINQ's Average function, but switches to a potentially less
            accurate method of summing each value divided by the number of values.
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.GetDecimalPlaces(System.Decimal,System.Boolean)">
            <summary>
            Gets the number of decimal places in a decimal value.
            </summary>
            <remarks>
            Started with something found here: http://stackoverflow.com/a/6092298/856595
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.Remainder(System.Decimal,System.Decimal)">
            <summary>
            Gets the remainder of one number divided by another number in such a way as to retain maximum precision.
            </summary>
        </member>
        <member name="F:DecimalMath.DecimalEx.Pi">
            <summary> The pi (π) constant. Pi radians is equivalent to 180 degrees. </summary>
            <remarks> See http://en.wikipedia.org/wiki/Pi </remarks>
        </member>
        <member name="F:DecimalMath.DecimalEx.PiHalf">
            <summary> π/2 - in radians is equivalent to 90 degrees. </summary> 
        </member>
        <member name="F:DecimalMath.DecimalEx.PiQuarter">
            <summary> π/4 - in radians is equivalent to 45 degrees. </summary>
        </member>
        <member name="F:DecimalMath.DecimalEx.PiTwelfth">
            <summary> π/12 - in radians is equivalent to 15 degrees. </summary>
        </member>
        <member name="F:DecimalMath.DecimalEx.TwoPi">
            <summary> 2π - in radians is equivalent to 360 degrees. </summary>
        </member>
        <member name="F:DecimalMath.DecimalEx.SmallestNonZeroDec">
            <summary>
            Smallest non-zero decimal value.
            </summary>
        </member>
        <member name="F:DecimalMath.DecimalEx.E">
            <summary>
            The e constant, also known as "Euler's number" or "Napier's constant"
            </summary>
            <remarks>
            Full value is 2.718281828459045235360287471352662497757, 
            see http://mathworld.wolfram.com/e.html
            </remarks>
        </member>
        <member name="F:DecimalMath.DecimalEx.Ln10">
            <summary>
            The value of the natural logarithm of 10.
            </summary>
            <remarks>
            Full value is: 2.30258509299404568401799145468436420760110148862877297603332790096757
            From: http://oeis.org/A002392/constant
            </remarks>
        </member>
        <member name="F:DecimalMath.DecimalEx.Ln2">
            <summary>
            The value of the natural logarithm of 2.
            </summary>
            <remarks>
            Full value is: .693147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687
            From: http://oeis.org/A002162/constant
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.ToRad(System.Decimal)">
            <summary>
            Converts degrees to radians. (π radians = 180 degrees)
            </summary>
            <param name="degrees">The degrees to convert.</param>
        </member>
        <member name="M:DecimalMath.DecimalEx.ToDeg(System.Decimal)">
            <summary>
            Converts radians to degrees. (π radians = 180 degrees)
            </summary>
            <param name="radians">The radians to convert.</param>
        </member>
        <member name="M:DecimalMath.DecimalEx.NormalizeAngle(System.Decimal)">
            <summary>
            Normalizes an angle in radians to the 0 to 2Pi interval.
            </summary>
            <param name="radians">Angle in radians.</param>
        </member>
        <member name="M:DecimalMath.DecimalEx.NormalizeAngleDeg(System.Decimal)">
            <summary>
            Normalizes an angle in degrees to the 0 to 360 degree interval.
            </summary>
            <param name="degrees">Angle in degrees.</param>
        </member>
        <member name="M:DecimalMath.DecimalEx.Sin(System.Decimal)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="x">An angle, measured in radians.</param>
            <remarks>
            Uses a Taylor series to calculate sine. See 
            http://en.wikipedia.org/wiki/Trigonometric_functions for details.
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.Cos(System.Decimal)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="x">An angle, measured in radians.</param>
            <remarks>
            Uses a Taylor series to calculate sine. See 
            http://en.wikipedia.org/wiki/Trigonometric_functions for details.
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.Tan(System.Decimal)">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
            <param name="radians">An angle, measured in radians.</param>
            <remarks>
            Uses a Taylor series to calculate sine. See 
            http://en.wikipedia.org/wiki/Trigonometric_functions for details.
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.ASin(System.Decimal)">
            <summary>
            Returns the angle whose sine is the specified number.
            </summary>
            <param name="z">A number representing a sine, where -1 ≤d≤ 1.</param>
            <remarks>
            See http://en.wikipedia.org/wiki/Inverse_trigonometric_function
            and http://mathworld.wolfram.com/InverseSine.html
            I originally used the Taylor series for ASin, but it was extremely slow
            around -1 and 1 (millions of iterations) and still ends up being less
            accurate than deriving from the ATan function.
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.ACos(System.Decimal)">
            <summary>
            Returns the angle whose cosine is the specified number.
            </summary>
            <param name="z">A number representing a cosine, where -1 ≤d≤ 1.</param>
            <remarks>
            See http://en.wikipedia.org/wiki/Inverse_trigonometric_function
            and http://mathworld.wolfram.com/InverseCosine.html
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.ATan(System.Decimal)">
            <summary>
            Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="x">A number representing a tangent.</param>
            <remarks>
            See http://mathworld.wolfram.com/InverseTangent.html for faster converging 
            series from Euler that was used here.
            </remarks>
        </member>
        <member name="M:DecimalMath.DecimalEx.ATan2(System.Decimal,System.Decimal)">
            <summary>
            Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y">The y coordinate of a point.</param>
            <param name="x">The x coordinate of a point.</param>
            <returns>
            An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = y / x,
            where (x, y) is a point in the Cartesian plane. Observe the following: 
            For (x, y) in quadrant 1, 0 &lt; θ &lt; π/2.
            For (x, y) in quadrant 2, π/2 &lt; θ ≤ π.
            For (x, y) in quadrant 3, -π &lt; θ &lt; -π/2.
            For (x, y) in quadrant 4, -π/2 &lt; θ &lt; 0.
            </returns>
        </member>
    </members>
</doc>
